# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coot_headless_api
else:
    import _coot_headless_api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coot_headless_api.delete_SwigPyIterator

    def value(self):
        return _coot_headless_api.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _coot_headless_api.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _coot_headless_api.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _coot_headless_api.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _coot_headless_api.SwigPyIterator_equal(self, x)

    def copy(self):
        return _coot_headless_api.SwigPyIterator_copy(self)

    def next(self):
        return _coot_headless_api.SwigPyIterator_next(self)

    def __next__(self):
        return _coot_headless_api.SwigPyIterator___next__(self)

    def previous(self):
        return _coot_headless_api.SwigPyIterator_previous(self)

    def advance(self, n):
        return _coot_headless_api.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _coot_headless_api.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _coot_headless_api.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _coot_headless_api.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _coot_headless_api.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _coot_headless_api.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _coot_headless_api.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _coot_headless_api:
_coot_headless_api.SwigPyIterator_swigregister(SwigPyIterator)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot_headless_api.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot_headless_api.vector_string___nonzero__(self)

    def __bool__(self):
        return _coot_headless_api.vector_string___bool__(self)

    def __len__(self):
        return _coot_headless_api.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _coot_headless_api.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot_headless_api.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot_headless_api.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot_headless_api.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot_headless_api.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot_headless_api.vector_string___setitem__(self, *args)

    def pop(self):
        return _coot_headless_api.vector_string_pop(self)

    def append(self, x):
        return _coot_headless_api.vector_string_append(self, x)

    def empty(self):
        return _coot_headless_api.vector_string_empty(self)

    def size(self):
        return _coot_headless_api.vector_string_size(self)

    def swap(self, v):
        return _coot_headless_api.vector_string_swap(self, v)

    def begin(self):
        return _coot_headless_api.vector_string_begin(self)

    def end(self):
        return _coot_headless_api.vector_string_end(self)

    def rbegin(self):
        return _coot_headless_api.vector_string_rbegin(self)

    def rend(self):
        return _coot_headless_api.vector_string_rend(self)

    def clear(self):
        return _coot_headless_api.vector_string_clear(self)

    def get_allocator(self):
        return _coot_headless_api.vector_string_get_allocator(self)

    def pop_back(self):
        return _coot_headless_api.vector_string_pop_back(self)

    def erase(self, *args):
        return _coot_headless_api.vector_string_erase(self, *args)

    def __init__(self, *args):
        _coot_headless_api.vector_string_swiginit(self, _coot_headless_api.new_vector_string(*args))

    def push_back(self, x):
        return _coot_headless_api.vector_string_push_back(self, x)

    def front(self):
        return _coot_headless_api.vector_string_front(self)

    def back(self):
        return _coot_headless_api.vector_string_back(self)

    def assign(self, n, x):
        return _coot_headless_api.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _coot_headless_api.vector_string_resize(self, *args)

    def insert(self, *args):
        return _coot_headless_api.vector_string_insert(self, *args)

    def reserve(self, n):
        return _coot_headless_api.vector_string_reserve(self, n)

    def capacity(self):
        return _coot_headless_api.vector_string_capacity(self)
    __swig_destroy__ = _coot_headless_api.delete_vector_string

# Register vector_string in _coot_headless_api:
_coot_headless_api.vector_string_swigregister(vector_string)
class pairbf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coot_headless_api.pairbf_swiginit(self, _coot_headless_api.new_pairbf(*args))
    first = property(_coot_headless_api.pairbf_first_get, _coot_headless_api.pairbf_first_set)
    second = property(_coot_headless_api.pairbf_second_get, _coot_headless_api.pairbf_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _coot_headless_api.delete_pairbf

# Register pairbf in _coot_headless_api:
_coot_headless_api.pairbf_swigregister(pairbf)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot_headless_api.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot_headless_api.IntVector___nonzero__(self)

    def __bool__(self):
        return _coot_headless_api.IntVector___bool__(self)

    def __len__(self):
        return _coot_headless_api.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _coot_headless_api.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot_headless_api.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot_headless_api.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot_headless_api.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot_headless_api.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot_headless_api.IntVector___setitem__(self, *args)

    def pop(self):
        return _coot_headless_api.IntVector_pop(self)

    def append(self, x):
        return _coot_headless_api.IntVector_append(self, x)

    def empty(self):
        return _coot_headless_api.IntVector_empty(self)

    def size(self):
        return _coot_headless_api.IntVector_size(self)

    def swap(self, v):
        return _coot_headless_api.IntVector_swap(self, v)

    def begin(self):
        return _coot_headless_api.IntVector_begin(self)

    def end(self):
        return _coot_headless_api.IntVector_end(self)

    def rbegin(self):
        return _coot_headless_api.IntVector_rbegin(self)

    def rend(self):
        return _coot_headless_api.IntVector_rend(self)

    def clear(self):
        return _coot_headless_api.IntVector_clear(self)

    def get_allocator(self):
        return _coot_headless_api.IntVector_get_allocator(self)

    def pop_back(self):
        return _coot_headless_api.IntVector_pop_back(self)

    def erase(self, *args):
        return _coot_headless_api.IntVector_erase(self, *args)

    def __init__(self, *args):
        _coot_headless_api.IntVector_swiginit(self, _coot_headless_api.new_IntVector(*args))

    def push_back(self, x):
        return _coot_headless_api.IntVector_push_back(self, x)

    def front(self):
        return _coot_headless_api.IntVector_front(self)

    def back(self):
        return _coot_headless_api.IntVector_back(self)

    def assign(self, n, x):
        return _coot_headless_api.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _coot_headless_api.IntVector_resize(self, *args)

    def insert(self, *args):
        return _coot_headless_api.IntVector_insert(self, *args)

    def reserve(self, n):
        return _coot_headless_api.IntVector_reserve(self, n)

    def capacity(self):
        return _coot_headless_api.IntVector_capacity(self)
    __swig_destroy__ = _coot_headless_api.delete_IntVector

# Register IntVector in _coot_headless_api:
_coot_headless_api.IntVector_swigregister(IntVector)
class coot_chain_validation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot_headless_api.coot_chain_validation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot_headless_api.coot_chain_validation___nonzero__(self)

    def __bool__(self):
        return _coot_headless_api.coot_chain_validation___bool__(self)

    def __len__(self):
        return _coot_headless_api.coot_chain_validation___len__(self)

    def __getslice__(self, i, j):
        return _coot_headless_api.coot_chain_validation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot_headless_api.coot_chain_validation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot_headless_api.coot_chain_validation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot_headless_api.coot_chain_validation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot_headless_api.coot_chain_validation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot_headless_api.coot_chain_validation___setitem__(self, *args)

    def pop(self):
        return _coot_headless_api.coot_chain_validation_pop(self)

    def append(self, x):
        return _coot_headless_api.coot_chain_validation_append(self, x)

    def empty(self):
        return _coot_headless_api.coot_chain_validation_empty(self)

    def size(self):
        return _coot_headless_api.coot_chain_validation_size(self)

    def swap(self, v):
        return _coot_headless_api.coot_chain_validation_swap(self, v)

    def begin(self):
        return _coot_headless_api.coot_chain_validation_begin(self)

    def end(self):
        return _coot_headless_api.coot_chain_validation_end(self)

    def rbegin(self):
        return _coot_headless_api.coot_chain_validation_rbegin(self)

    def rend(self):
        return _coot_headless_api.coot_chain_validation_rend(self)

    def clear(self):
        return _coot_headless_api.coot_chain_validation_clear(self)

    def get_allocator(self):
        return _coot_headless_api.coot_chain_validation_get_allocator(self)

    def pop_back(self):
        return _coot_headless_api.coot_chain_validation_pop_back(self)

    def erase(self, *args):
        return _coot_headless_api.coot_chain_validation_erase(self, *args)

    def __init__(self, *args):
        _coot_headless_api.coot_chain_validation_swiginit(self, _coot_headless_api.new_coot_chain_validation(*args))

    def push_back(self, x):
        return _coot_headless_api.coot_chain_validation_push_back(self, x)

    def front(self):
        return _coot_headless_api.coot_chain_validation_front(self)

    def back(self):
        return _coot_headless_api.coot_chain_validation_back(self)

    def assign(self, n, x):
        return _coot_headless_api.coot_chain_validation_assign(self, n, x)

    def resize(self, *args):
        return _coot_headless_api.coot_chain_validation_resize(self, *args)

    def insert(self, *args):
        return _coot_headless_api.coot_chain_validation_insert(self, *args)

    def reserve(self, n):
        return _coot_headless_api.coot_chain_validation_reserve(self, n)

    def capacity(self):
        return _coot_headless_api.coot_chain_validation_capacity(self)
    __swig_destroy__ = _coot_headless_api.delete_coot_chain_validation

# Register coot_chain_validation in _coot_headless_api:
_coot_headless_api.coot_chain_validation_swigregister(coot_chain_validation)
class coot_residue_validation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot_headless_api.coot_residue_validation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot_headless_api.coot_residue_validation___nonzero__(self)

    def __bool__(self):
        return _coot_headless_api.coot_residue_validation___bool__(self)

    def __len__(self):
        return _coot_headless_api.coot_residue_validation___len__(self)

    def __getslice__(self, i, j):
        return _coot_headless_api.coot_residue_validation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot_headless_api.coot_residue_validation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot_headless_api.coot_residue_validation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot_headless_api.coot_residue_validation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot_headless_api.coot_residue_validation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot_headless_api.coot_residue_validation___setitem__(self, *args)

    def pop(self):
        return _coot_headless_api.coot_residue_validation_pop(self)

    def append(self, x):
        return _coot_headless_api.coot_residue_validation_append(self, x)

    def empty(self):
        return _coot_headless_api.coot_residue_validation_empty(self)

    def size(self):
        return _coot_headless_api.coot_residue_validation_size(self)

    def swap(self, v):
        return _coot_headless_api.coot_residue_validation_swap(self, v)

    def begin(self):
        return _coot_headless_api.coot_residue_validation_begin(self)

    def end(self):
        return _coot_headless_api.coot_residue_validation_end(self)

    def rbegin(self):
        return _coot_headless_api.coot_residue_validation_rbegin(self)

    def rend(self):
        return _coot_headless_api.coot_residue_validation_rend(self)

    def clear(self):
        return _coot_headless_api.coot_residue_validation_clear(self)

    def get_allocator(self):
        return _coot_headless_api.coot_residue_validation_get_allocator(self)

    def pop_back(self):
        return _coot_headless_api.coot_residue_validation_pop_back(self)

    def erase(self, *args):
        return _coot_headless_api.coot_residue_validation_erase(self, *args)

    def __init__(self, *args):
        _coot_headless_api.coot_residue_validation_swiginit(self, _coot_headless_api.new_coot_residue_validation(*args))

    def push_back(self, x):
        return _coot_headless_api.coot_residue_validation_push_back(self, x)

    def front(self):
        return _coot_headless_api.coot_residue_validation_front(self)

    def back(self):
        return _coot_headless_api.coot_residue_validation_back(self)

    def assign(self, n, x):
        return _coot_headless_api.coot_residue_validation_assign(self, n, x)

    def resize(self, *args):
        return _coot_headless_api.coot_residue_validation_resize(self, *args)

    def insert(self, *args):
        return _coot_headless_api.coot_residue_validation_insert(self, *args)

    def reserve(self, n):
        return _coot_headless_api.coot_residue_validation_reserve(self, n)

    def capacity(self):
        return _coot_headless_api.coot_residue_validation_capacity(self)
    __swig_destroy__ = _coot_headless_api.delete_coot_residue_validation

# Register coot_residue_validation in _coot_headless_api:
_coot_headless_api.coot_residue_validation_swigregister(coot_residue_validation)
class molecules_container_t(object):
    r"""Proxy of C++ molecules_container_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, verbose=True):
        r"""__init__(molecules_container_t self, bool verbose=True) -> molecules_container_t"""
        _coot_headless_api.molecules_container_t_swiginit(self, _coot_headless_api.new_molecules_container_t(verbose))
    __swig_destroy__ = _coot_headless_api.delete_molecules_container_t
    imol_refinement_map = property(_coot_headless_api.molecules_container_t_imol_refinement_map_get, _coot_headless_api.molecules_container_t_imol_refinement_map_set, doc=r"""imol_refinement_map : int""")
    imol_difference_map = property(_coot_headless_api.molecules_container_t_imol_difference_map_get, _coot_headless_api.molecules_container_t_imol_difference_map_set, doc=r"""imol_difference_map : int""")
    use_gemmi = property(_coot_headless_api.molecules_container_t_use_gemmi_get, _coot_headless_api.molecules_container_t_use_gemmi_set, doc=r"""use_gemmi : bool""")

    def set_use_gemmi(self, state):
        r"""set_use_gemmi(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_use_gemmi(self, state)

    def get_use_gemmi(self):
        r"""get_use_gemmi(molecules_container_t self) -> bool"""
        return _coot_headless_api.molecules_container_t_get_use_gemmi(self)

    def set_make_backups(self, state):
        r"""set_make_backups(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_make_backups(self, state)

    def get_make_backups(self):
        r"""get_make_backups(molecules_container_t self) -> bool"""
        return _coot_headless_api.molecules_container_t_get_make_backups(self)
    make_backups_flag = property(_coot_headless_api.molecules_container_t_make_backups_flag_get, _coot_headless_api.molecules_container_t_make_backups_flag_set, doc=r"""make_backups_flag : bool""")

    def file_name_to_string(self, file_name):
        r"""file_name_to_string(molecules_container_t self, std::string const & file_name) -> std::string"""
        return _coot_headless_api.molecules_container_t_file_name_to_string(self, file_name)

    def get_number_of_molecules(self):
        r"""get_number_of_molecules(molecules_container_t self) -> unsigned int"""
        return _coot_headless_api.molecules_container_t_get_number_of_molecules(self)

    def create_empty_molecules(self, n_empty):
        r"""create_empty_molecules(molecules_container_t self, unsigned int n_empty)"""
        return _coot_headless_api.molecules_container_t_create_empty_molecules(self, n_empty)

    def set_imol_refinement_map(self, i):
        r"""set_imol_refinement_map(molecules_container_t self, int i)"""
        return _coot_headless_api.molecules_container_t_set_imol_refinement_map(self, i)

    def set_map_weight(self, w):
        r"""set_map_weight(molecules_container_t self, float w)"""
        return _coot_headless_api.molecules_container_t_set_map_weight(self, w)

    def get_map_weight(self):
        r"""get_map_weight(molecules_container_t self) -> float"""
        return _coot_headless_api.molecules_container_t_get_map_weight(self)

    def atom_cid_to_atom_spec(self, imol, cid):
        r"""atom_cid_to_atom_spec(molecules_container_t self, int imol, std::string const & cid) -> coot::atom_spec_t"""
        return _coot_headless_api.molecules_container_t_atom_cid_to_atom_spec(self, imol, cid)

    def residue_cid_to_residue_spec(self, imol, cid):
        r"""residue_cid_to_residue_spec(molecules_container_t self, int imol, std::string const & cid) -> coot::residue_spec_t"""
        return _coot_headless_api.molecules_container_t_residue_cid_to_residue_spec(self, imol, cid)

    def set_show_timings(self, s):
        r"""set_show_timings(molecules_container_t self, bool s)"""
        return _coot_headless_api.molecules_container_t_set_show_timings(self, s)

    def get_geom(self):
        r"""get_geom(molecules_container_t self) -> coot::protein_geometry &"""
        return _coot_headless_api.molecules_container_t_get_geom(self)

    def get_header_info(self, imol):
        r"""get_header_info(molecules_container_t self, int imol) -> moorhen::header_info_t"""
        return _coot_headless_api.molecules_container_t_get_header_info(self, imol)

    def get_molecule_name(self, imol):
        r"""get_molecule_name(molecules_container_t self, int imol) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_molecule_name(self, imol)

    def set_molecule_name(self, imol, new_name):
        r"""set_molecule_name(molecules_container_t self, int imol, std::string const & new_name)"""
        return _coot_headless_api.molecules_container_t_set_molecule_name(self, imol, new_name)

    def display_molecule_names_table(self):
        r"""display_molecule_names_table(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_display_molecule_names_table(self)

    def is_valid_model_molecule(self, imol):
        r"""is_valid_model_molecule(molecules_container_t self, int imol) -> bool"""
        return _coot_headless_api.molecules_container_t_is_valid_model_molecule(self, imol)

    def is_valid_map_molecule(self, imol_map):
        r"""is_valid_map_molecule(molecules_container_t self, int imol_map) -> bool"""
        return _coot_headless_api.molecules_container_t_is_valid_map_molecule(self, imol_map)

    def is_a_difference_map(self, imol_map):
        r"""is_a_difference_map(molecules_container_t self, int imol_map) -> bool"""
        return _coot_headless_api.molecules_container_t_is_a_difference_map(self, imol_map)

    def new_molecule(self, name):
        r"""new_molecule(molecules_container_t self, std::string const & name) -> int"""
        return _coot_headless_api.molecules_container_t_new_molecule(self, name)

    def close_molecule(self, imol):
        r"""close_molecule(molecules_container_t self, int imol) -> int"""
        return _coot_headless_api.molecules_container_t_close_molecule(self, imol)

    def end_delete_closed_molecules(self):
        r"""end_delete_closed_molecules(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_end_delete_closed_molecules(self)

    def pop_back(self):
        r"""pop_back(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_pop_back(self)

    def clear(self):
        r"""clear(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_clear(self)

    def get_eigenvalues(self, imol, chain_id, res_no, ins_code):
        r"""get_eigenvalues(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> std::vector< double,std::allocator< double > >"""
        return _coot_headless_api.molecules_container_t_get_eigenvalues(self, imol, chain_id, res_no, ins_code)

    def test_origin_cube(self):
        r"""test_origin_cube(molecules_container_t self) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_test_origin_cube(self)

    def get_mol(self, imol):
        r"""get_mol(molecules_container_t self, unsigned int imol) -> mmdb::Manager *"""
        return _coot_headless_api.molecules_container_t_get_mol(self, imol)

    def fill_rotamer_probability_tables(self):
        r"""fill_rotamer_probability_tables(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_fill_rotamer_probability_tables(self)

    def accept_rotamer_probability_tables_compressed_data(self, data_stream):
        r"""accept_rotamer_probability_tables_compressed_data(molecules_container_t self, std::string const & data_stream)"""
        return _coot_headless_api.molecules_container_t_accept_rotamer_probability_tables_compressed_data(self, data_stream)

    def contains_unsaved_models(self):
        r"""contains_unsaved_models(molecules_container_t self) -> bool"""
        return _coot_headless_api.molecules_container_t_contains_unsaved_models(self)

    def save_unsaved_model_changes(self):
        r"""save_unsaved_model_changes(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_save_unsaved_model_changes(self)

    def geometry_init_standard(self):
        r"""geometry_init_standard(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_geometry_init_standard(self)

    def non_standard_residue_types_in_model(self, imol):
        r"""non_standard_residue_types_in_model(molecules_container_t self, int imol) -> vector_string"""
        return _coot_headless_api.molecules_container_t_non_standard_residue_types_in_model(self, imol)

    def read_coordinates(self, file_name):
        r"""read_coordinates(molecules_container_t self, std::string const & file_name) -> int"""
        return _coot_headless_api.molecules_container_t_read_coordinates(self, file_name)

    def read_pdb(self, file_name):
        r"""read_pdb(molecules_container_t self, std::string const & file_name) -> int"""
        return _coot_headless_api.molecules_container_t_read_pdb(self, file_name)

    def print_secondary_structure_info(self, imol):
        r"""print_secondary_structure_info(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_print_secondary_structure_info(self, imol)

    def replace_molecule_by_model_from_file(self, imol, pdb_file_name):
        r"""replace_molecule_by_model_from_file(molecules_container_t self, int imol, std::string const & pdb_file_name)"""
        return _coot_headless_api.molecules_container_t_replace_molecule_by_model_from_file(self, imol, pdb_file_name)

    def split_multi_model_molecule(self, imol):
        r"""split_multi_model_molecule(molecules_container_t self, int imol) -> IntVector"""
        return _coot_headless_api.molecules_container_t_split_multi_model_molecule(self, imol)

    def make_ensemble(self, model_molecule_list):
        r"""make_ensemble(molecules_container_t self, std::string const & model_molecule_list) -> int"""
        return _coot_headless_api.molecules_container_t_make_ensemble(self, model_molecule_list)

    def molecule_to_PDB_string(self, imol):
        r"""molecule_to_PDB_string(molecules_container_t self, int imol) -> std::string"""
        return _coot_headless_api.molecules_container_t_molecule_to_PDB_string(self, imol)

    def molecule_to_mmCIF_string(self, imol):
        r"""molecule_to_mmCIF_string(molecules_container_t self, int imol) -> std::string"""
        return _coot_headless_api.molecules_container_t_molecule_to_mmCIF_string(self, imol)

    def get_active_atom(self, x, y, z, displayed_model_molecules_list):
        r"""get_active_atom(molecules_container_t self, float x, float y, float z, std::string const & displayed_model_molecules_list) -> std::pair< int,std::string >"""
        return _coot_headless_api.molecules_container_t_get_active_atom(self, x, y, z, displayed_model_molecules_list)

    def import_cif_dictionary(self, cif_file_name, imol_enc):
        r"""import_cif_dictionary(molecules_container_t self, std::string const & cif_file_name, int imol_enc) -> int"""
        return _coot_headless_api.molecules_container_t_import_cif_dictionary(self, cif_file_name, imol_enc)

    def get_cif_file_name(self, comp_id, imol_enc):
        r"""get_cif_file_name(molecules_container_t self, std::string const & comp_id, int imol_enc) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_cif_file_name(self, comp_id, imol_enc)

    def get_cif_restraints_as_string(self, comp_id, imol_enc):
        r"""get_cif_restraints_as_string(molecules_container_t self, std::string const & comp_id, int imol_enc) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_cif_restraints_as_string(self, comp_id, imol_enc)

    def copy_dictionary(self, monomer_name, imol_current, imol_new):
        r"""copy_dictionary(molecules_container_t self, std::string const & monomer_name, int imol_current, int imol_new) -> bool"""
        return _coot_headless_api.molecules_container_t_copy_dictionary(self, monomer_name, imol_current, imol_new)

    def get_monomer(self, monomer_name):
        r"""get_monomer(molecules_container_t self, std::string const & monomer_name) -> int"""
        return _coot_headless_api.molecules_container_t_get_monomer(self, monomer_name)

    def get_monomer_from_dictionary(self, comp_id, imol, idealised_flag):
        r"""get_monomer_from_dictionary(molecules_container_t self, std::string const & comp_id, int imol, bool idealised_flag) -> int"""
        return _coot_headless_api.molecules_container_t_get_monomer_from_dictionary(self, comp_id, imol, idealised_flag)

    def get_monomer_and_position_at(self, comp_id, imol, x, y, z):
        r"""get_monomer_and_position_at(molecules_container_t self, std::string const & comp_id, int imol, float x, float y, float z) -> int"""
        return _coot_headless_api.molecules_container_t_get_monomer_and_position_at(self, comp_id, imol, x, y, z)

    def get_groups_for_monomers(self, residue_names):
        r"""get_groups_for_monomers(molecules_container_t self, vector_string residue_names) -> vector_string"""
        return _coot_headless_api.molecules_container_t_get_groups_for_monomers(self, residue_names)

    def get_group_for_monomer(self, residue_name):
        r"""get_group_for_monomer(molecules_container_t self, std::string const & residue_name) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_group_for_monomer(self, residue_name)

    def get_hb_type(self, compound_id, imol_enc, atom_name):
        r"""get_hb_type(molecules_container_t self, std::string const & compound_id, int imol_enc, std::string const & atom_name) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_hb_type(self, compound_id, imol_enc, atom_name)

    def get_gphl_chem_comp_info(self, compound_id, imol_enc):
        r"""get_gphl_chem_comp_info(molecules_container_t self, std::string const & compound_id, int imol_enc) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >"""
        return _coot_headless_api.molecules_container_t_get_gphl_chem_comp_info(self, compound_id, imol_enc)

    def write_png(self, compound_id, imol, file_name):
        r"""write_png(molecules_container_t self, std::string const & compound_id, int imol, std::string const & file_name)"""
        return _coot_headless_api.molecules_container_t_write_png(self, compound_id, imol, file_name)

    def write_coordinates(self, imol, file_name):
        r"""write_coordinates(molecules_container_t self, int imol, std::string const & file_name) -> int"""
        return _coot_headless_api.molecules_container_t_write_coordinates(self, imol, file_name)

    def set_draw_missing_residue_loops(self, state):
        r"""set_draw_missing_residue_loops(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_draw_missing_residue_loops(self, state)

    def get_bonds_mesh(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor):
        r"""get_bonds_mesh(molecules_container_t self, int imol, std::string const & mode, bool against_a_dark_background, float bond_width, float atom_radius_to_bond_width_ratio, int smoothness_factor) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_bonds_mesh(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor)

    def get_bonds_mesh_instanced(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor):
        r"""get_bonds_mesh_instanced(molecules_container_t self, int imol, std::string const & mode, bool against_a_dark_background, float bond_width, float atom_radius_to_bond_width_ratio, int smoothness_factor) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_bonds_mesh_instanced(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor)

    def get_bonds_mesh_for_selection_instanced(self, imol, atom_selection_cid, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor):
        r"""get_bonds_mesh_for_selection_instanced(molecules_container_t self, int imol, std::string const & atom_selection_cid, std::string const & mode, bool against_a_dark_background, float bond_width, float atom_radius_to_bond_width_ratio, int smoothness_factor) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_bonds_mesh_for_selection_instanced(self, imol, atom_selection_cid, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor)

    def get_goodsell_style_mesh_instanced(self, imol, colour_wheel_rotation_step, saturation, goodselliness):
        r"""get_goodsell_style_mesh_instanced(molecules_container_t self, int imol, float colour_wheel_rotation_step, float saturation, float goodselliness) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_goodsell_style_mesh_instanced(self, imol, colour_wheel_rotation_step, saturation, goodselliness)

    def export_map_molecule_as_gltf(self, imol, pos_x, pos_y, pos_z, radius, contour_level, file_name):
        r"""export_map_molecule_as_gltf(molecules_container_t self, int imol, float pos_x, float pos_y, float pos_z, float radius, float contour_level, std::string const & file_name)"""
        return _coot_headless_api.molecules_container_t_export_map_molecule_as_gltf(self, imol, pos_x, pos_y, pos_z, radius, contour_level, file_name)

    def export_model_molecule_as_gltf(self, imol, selection_cid, mode, against_a_dark_background, bonds_width, atom_radius_to_bond_width_ratio, smoothness_factor, draw_hydrogen_atoms_flag, draw_missing_residue_loops, file_name):
        r"""export_model_molecule_as_gltf(molecules_container_t self, int imol, std::string const & selection_cid, std::string const & mode, bool against_a_dark_background, float bonds_width, float atom_radius_to_bond_width_ratio, int smoothness_factor, bool draw_hydrogen_atoms_flag, bool draw_missing_residue_loops, std::string const & file_name)"""
        return _coot_headless_api.molecules_container_t_export_model_molecule_as_gltf(self, imol, selection_cid, mode, against_a_dark_background, bonds_width, atom_radius_to_bond_width_ratio, smoothness_factor, draw_hydrogen_atoms_flag, draw_missing_residue_loops, file_name)

    def export_molecular_represenation_as_gltf(self, imol, atom_selection_cid, colour_scheme, style, file_name):
        r"""export_molecular_represenation_as_gltf(molecules_container_t self, int imol, std::string const & atom_selection_cid, std::string const & colour_scheme, std::string const & style, std::string const & file_name)"""
        return _coot_headless_api.molecules_container_t_export_molecular_represenation_as_gltf(self, imol, atom_selection_cid, colour_scheme, style, file_name)

    def get_colour_table(self, imol, against_a_dark_background):
        r"""get_colour_table(molecules_container_t self, int imol, bool against_a_dark_background) -> std::vector< glm::vec4,std::allocator< glm::vec4 > >"""
        return _coot_headless_api.molecules_container_t_get_colour_table(self, imol, against_a_dark_background)

    def set_colour_wheel_rotation_base(self, imol, r):
        r"""set_colour_wheel_rotation_base(molecules_container_t self, int imol, float r)"""
        return _coot_headless_api.molecules_container_t_set_colour_wheel_rotation_base(self, imol, r)

    def set_base_colour_for_bonds(self, imol, r, g, b):
        r"""set_base_colour_for_bonds(molecules_container_t self, int imol, float r, float g, float b)"""
        return _coot_headless_api.molecules_container_t_set_base_colour_for_bonds(self, imol, r, g, b)

    def add_to_non_drawn_bonds(self, imol, atom_selection_cid):
        r"""add_to_non_drawn_bonds(molecules_container_t self, int imol, std::string const & atom_selection_cid)"""
        return _coot_headless_api.molecules_container_t_add_to_non_drawn_bonds(self, imol, atom_selection_cid)

    def clear_non_drawn_bonds(self, imol):
        r"""clear_non_drawn_bonds(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_clear_non_drawn_bonds(self, imol)

    def print_non_drawn_bonds(self, imol):
        r"""print_non_drawn_bonds(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_print_non_drawn_bonds(self, imol)

    def set_user_defined_bond_colours(self, imol, colour_map):
        r"""set_user_defined_bond_colours(molecules_container_t self, int imol, std::map< unsigned int,std::array< float,4 > > const & colour_map)"""
        return _coot_headless_api.molecules_container_t_set_user_defined_bond_colours(self, imol, colour_map)

    def set_user_defined_atom_colour_by_selection(self, imol, indexed_residues_cids, colour_applies_to_non_carbon_atoms_also):
        r"""set_user_defined_atom_colour_by_selection(molecules_container_t self, int imol, std::vector< std::pair< std::string,unsigned int >,std::allocator< std::pair< std::string,unsigned int > > > const & indexed_residues_cids, bool colour_applies_to_non_carbon_atoms_also)"""
        return _coot_headless_api.molecules_container_t_set_user_defined_atom_colour_by_selection(self, imol, indexed_residues_cids, colour_applies_to_non_carbon_atoms_also)

    def add_colour_rule(self, imol, selection_cid, colour):
        r"""add_colour_rule(molecules_container_t self, int imol, std::string const & selection_cid, std::string const & colour)"""
        return _coot_headless_api.molecules_container_t_add_colour_rule(self, imol, selection_cid, colour)

    def add_colour_rules_multi(self, imol, selections_and_colours_combo_string):
        r"""add_colour_rules_multi(molecules_container_t self, int imol, std::string const & selections_and_colours_combo_string)"""
        return _coot_headless_api.molecules_container_t_add_colour_rules_multi(self, imol, selections_and_colours_combo_string)

    def delete_colour_rules(self, imol):
        r"""delete_colour_rules(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_delete_colour_rules(self, imol)

    def get_colour_rules(self, imol):
        r"""get_colour_rules(molecules_container_t self, int imol) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >"""
        return _coot_headless_api.molecules_container_t_get_colour_rules(self, imol)

    def print_colour_rules(self, imol):
        r"""print_colour_rules(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_print_colour_rules(self, imol)

    def set_use_bespoke_carbon_atom_colour(self, imol, state):
        r"""set_use_bespoke_carbon_atom_colour(molecules_container_t self, int imol, bool state)"""
        return _coot_headless_api.molecules_container_t_set_use_bespoke_carbon_atom_colour(self, imol, state)

    def set_bespoke_carbon_atom_colour(self, imol, col):
        r"""set_bespoke_carbon_atom_colour(molecules_container_t self, int imol, coot::colour_t const & col)"""
        return _coot_headless_api.molecules_container_t_set_bespoke_carbon_atom_colour(self, imol, col)

    def M2T_updateFloatParameter(self, imol, param_name, value):
        r"""M2T_updateFloatParameter(molecules_container_t self, int imol, std::string const & param_name, float value)"""
        return _coot_headless_api.molecules_container_t_M2T_updateFloatParameter(self, imol, param_name, value)

    def M2T_updateIntParameter(self, imol, param_name, value):
        r"""M2T_updateIntParameter(molecules_container_t self, int imol, std::string const & param_name, int value)"""
        return _coot_headless_api.molecules_container_t_M2T_updateIntParameter(self, imol, param_name, value)

    def get_molecular_representation_mesh(self, imol, cid, colour_scheme, style):
        r"""get_molecular_representation_mesh(molecules_container_t self, int imol, std::string const & cid, std::string const & colour_scheme, std::string const & style) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_molecular_representation_mesh(self, imol, cid, colour_scheme, style)

    def get_gaussian_surface(self, imol, sigma, contour_level, box_radius, grid_scale, b_factor):
        r"""get_gaussian_surface(molecules_container_t self, int imol, float sigma, float contour_level, float box_radius, float grid_scale, float b_factor) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_gaussian_surface(self, imol, sigma, contour_level, box_radius, grid_scale, b_factor)

    def get_chemical_features_mesh(self, imol, cid):
        r"""get_chemical_features_mesh(molecules_container_t self, int imol, std::string const & cid) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_chemical_features_mesh(self, imol, cid)

    def get_atom(self, imol, atom_spec):
        r"""get_atom(molecules_container_t self, int imol, coot::atom_spec_t const & atom_spec) -> mmdb::Atom *"""
        return _coot_headless_api.molecules_container_t_get_atom(self, imol, atom_spec)

    def get_residue(self, imol, residue_spec):
        r"""get_residue(molecules_container_t self, int imol, coot::residue_spec_t const & residue_spec) -> mmdb::Residue *"""
        return _coot_headless_api.molecules_container_t_get_residue(self, imol, residue_spec)

    def get_atom_using_cid(self, imol, cid):
        r"""get_atom_using_cid(molecules_container_t self, int imol, std::string const & cid) -> mmdb::Atom *"""
        return _coot_headless_api.molecules_container_t_get_atom_using_cid(self, imol, cid)

    def get_residue_using_cid(self, imol, cid):
        r"""get_residue_using_cid(molecules_container_t self, int imol, std::string const & cid) -> mmdb::Residue *"""
        return _coot_headless_api.molecules_container_t_get_residue_using_cid(self, imol, cid)

    def get_atom_position(self, imol, atom_spec):
        r"""get_atom_position(molecules_container_t self, int imol, coot::atom_spec_t & atom_spec) -> std::pair< bool,coot::Cartesian >"""
        return _coot_headless_api.molecules_container_t_get_atom_position(self, imol, atom_spec)

    def get_number_of_atoms(self, imol):
        r"""get_number_of_atoms(molecules_container_t self, int imol) -> unsigned int"""
        return _coot_headless_api.molecules_container_t_get_number_of_atoms(self, imol)

    def get_molecule_diameter(self, imol):
        r"""get_molecule_diameter(molecules_container_t self, int imol) -> float"""
        return _coot_headless_api.molecules_container_t_get_molecule_diameter(self, imol)

    def get_number_of_hydrogen_atoms(self, imol):
        r"""get_number_of_hydrogen_atoms(molecules_container_t self, int imol) -> int"""
        return _coot_headless_api.molecules_container_t_get_number_of_hydrogen_atoms(self, imol)

    def get_chains_in_model(self, imol):
        r"""get_chains_in_model(molecules_container_t self, int imol) -> vector_string"""
        return _coot_headless_api.molecules_container_t_get_chains_in_model(self, imol)

    def get_ncs_related_chains(self, imol):
        r"""get_ncs_related_chains(molecules_container_t self, int imol) -> std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >"""
        return _coot_headless_api.molecules_container_t_get_ncs_related_chains(self, imol)

    def get_single_letter_codes_for_chain(self, imol, chain_id):
        r"""get_single_letter_codes_for_chain(molecules_container_t self, int imol, std::string const & chain_id) -> std::vector< std::pair< coot::residue_spec_t,std::string >,std::allocator< std::pair< coot::residue_spec_t,std::string > > >"""
        return _coot_headless_api.molecules_container_t_get_single_letter_codes_for_chain(self, imol, chain_id)

    def get_residue_names_with_no_dictionary(self, imol):
        r"""get_residue_names_with_no_dictionary(molecules_container_t self, int imol) -> vector_string"""
        return _coot_headless_api.molecules_container_t_get_residue_names_with_no_dictionary(self, imol)

    def get_residue_name(self, imol, chain_id, res_no, ins_code):
        r"""get_residue_name(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_residue_name(self, imol, chain_id, res_no, ins_code)

    def residues_with_missing_atoms(self, imol):
        r"""residues_with_missing_atoms(molecules_container_t self, int imol) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >"""
        return _coot_headless_api.molecules_container_t_residues_with_missing_atoms(self, imol)

    def missing_atoms_info_raw(self, imol):
        r"""missing_atoms_info_raw(molecules_container_t self, int imol) -> coot::util::missing_atom_info"""
        return _coot_headless_api.molecules_container_t_missing_atoms_info_raw(self, imol)

    def get_residues_near_residue(self, imol, residue_cid, dist):
        r"""get_residues_near_residue(molecules_container_t self, int imol, std::string const & residue_cid, float dist) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >"""
        return _coot_headless_api.molecules_container_t_get_residues_near_residue(self, imol, residue_cid, dist)

    def SSM_superpose(self, imol_ref, chain_id_ref, imol_mov, chain_id_mov):
        r"""SSM_superpose(molecules_container_t self, int imol_ref, std::string const & chain_id_ref, int imol_mov, std::string const & chain_id_mov) -> superpose_results_t"""
        return _coot_headless_api.molecules_container_t_SSM_superpose(self, imol_ref, chain_id_ref, imol_mov, chain_id_mov)

    def add_lsq_superpose_match(self, chain_id_ref, res_no_ref_start, res_no_ref_end, chain_id_mov, res_no_mov_start, res_no_mov_end, match_type):
        r"""add_lsq_superpose_match(molecules_container_t self, std::string const & chain_id_ref, int res_no_ref_start, int res_no_ref_end, std::string const & chain_id_mov, int res_no_mov_start, int res_no_mov_end, int match_type)"""
        return _coot_headless_api.molecules_container_t_add_lsq_superpose_match(self, chain_id_ref, res_no_ref_start, res_no_ref_end, chain_id_mov, res_no_mov_start, res_no_mov_end, match_type)

    def clear_lsq_matches(self):
        r"""clear_lsq_matches(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_clear_lsq_matches(self)
    lsq_matchers = property(_coot_headless_api.molecules_container_t_lsq_matchers_get, _coot_headless_api.molecules_container_t_lsq_matchers_set, doc=r"""lsq_matchers : std::vector<(coot::lsq_range_match_info_t,std::allocator<(coot::lsq_range_match_info_t)>)>""")

    def lsq_superpose(self, imol_ref, imol_mov):
        r"""lsq_superpose(molecules_container_t self, int imol_ref, int imol_mov)"""
        return _coot_headless_api.molecules_container_t_lsq_superpose(self, imol_ref, imol_mov)

    def get_lsq_matrix(self, imol_ref, imol_mov):
        r"""get_lsq_matrix(molecules_container_t self, int imol_ref, int imol_mov) -> lsq_results_t"""
        return _coot_headless_api.molecules_container_t_get_lsq_matrix(self, imol_ref, imol_mov)

    def get_lsq_matrix_internal(self, imol_ref, imol_mov):
        r"""get_lsq_matrix_internal(molecules_container_t self, int imol_ref, int imol_mov) -> std::pair< short,clipper::RTop_orth >"""
        return _coot_headless_api.molecules_container_t_get_lsq_matrix_internal(self, imol_ref, imol_mov)

    def get_symmetry(self, imol, symmetry_search_radius, centre_x, centre_y, centre_z):
        r"""get_symmetry(molecules_container_t self, int imol, float symmetry_search_radius, float centre_x, float centre_y, float centre_z) -> coot::symmetry_info_t"""
        return _coot_headless_api.molecules_container_t_get_symmetry(self, imol, symmetry_search_radius, centre_x, centre_y, centre_z)

    def get_cell(self, imol):
        r"""get_cell(molecules_container_t self, int imol) -> ::api::cell_t"""
        return _coot_headless_api.molecules_container_t_get_cell(self, imol)

    def get_map_molecule_centre(self, imol):
        r"""get_map_molecule_centre(molecules_container_t self, int imol) -> coot::util::map_molecule_centre_info_t"""
        return _coot_headless_api.molecules_container_t_get_map_molecule_centre(self, imol)

    def undo(self, imol):
        r"""undo(molecules_container_t self, int imol) -> int"""
        return _coot_headless_api.molecules_container_t_undo(self, imol)

    def redo(self, imol):
        r"""redo(molecules_container_t self, int imol) -> int"""
        return _coot_headless_api.molecules_container_t_redo(self, imol)
    map_sampling_rate = property(_coot_headless_api.molecules_container_t_map_sampling_rate_get, _coot_headless_api.molecules_container_t_map_sampling_rate_set, doc=r"""map_sampling_rate : float""")

    def set_map_sampling_rate(self, msr):
        r"""set_map_sampling_rate(molecules_container_t self, float msr)"""
        return _coot_headless_api.molecules_container_t_set_map_sampling_rate(self, msr)

    def read_mtz(self, file_name, f, phi, weight, use_weight, is_a_difference_map):
        r"""read_mtz(molecules_container_t self, std::string const & file_name, std::string const & f, std::string const & phi, std::string const & weight, bool use_weight, bool is_a_difference_map) -> int"""
        return _coot_headless_api.molecules_container_t_read_mtz(self, file_name, f, phi, weight, use_weight, is_a_difference_map)

    def replace_map_by_mtz_from_file(self, imol, file_name, f, phi, weight, use_weight):
        r"""replace_map_by_mtz_from_file(molecules_container_t self, int imol, std::string const & file_name, std::string const & f, std::string const & phi, std::string const & weight, bool use_weight) -> int"""
        return _coot_headless_api.molecules_container_t_replace_map_by_mtz_from_file(self, imol, file_name, f, phi, weight, use_weight)

    def auto_read_mtz(self, file_name):
        r"""auto_read_mtz(molecules_container_t self, std::string const & file_name) -> std::vector< molecules_container_t::auto_read_mtz_info_t,std::allocator< molecules_container_t::auto_read_mtz_info_t > >"""
        return _coot_headless_api.molecules_container_t_auto_read_mtz(self, file_name)

    def read_ccp4_map(self, file_name, is_a_difference_map):
        r"""read_ccp4_map(molecules_container_t self, std::string const & file_name, bool is_a_difference_map) -> int"""
        return _coot_headless_api.molecules_container_t_read_ccp4_map(self, file_name, is_a_difference_map)

    def write_map(self, imol, file_name):
        r"""write_map(molecules_container_t self, int imol, std::string const & file_name) -> int"""
        return _coot_headless_api.molecules_container_t_write_map(self, imol, file_name)

    def get_map_mean(self, imol):
        r"""get_map_mean(molecules_container_t self, int imol) -> float"""
        return _coot_headless_api.molecules_container_t_get_map_mean(self, imol)

    def get_map_rmsd_approx(self, imol_map):
        r"""get_map_rmsd_approx(molecules_container_t self, int imol_map) -> float"""
        return _coot_headless_api.molecules_container_t_get_map_rmsd_approx(self, imol_map)

    def get_map_histogram(self, imol, n_bins, zoom_factor):
        r"""get_map_histogram(molecules_container_t self, int imol, unsigned int n_bins, float zoom_factor) -> coot::molecule_t::histogram_info_t"""
        return _coot_headless_api.molecules_container_t_get_map_histogram(self, imol, n_bins, zoom_factor)

    def get_suggested_initial_contour_level(self, imol):
        r"""get_suggested_initial_contour_level(molecules_container_t self, int imol) -> float"""
        return _coot_headless_api.molecules_container_t_get_suggested_initial_contour_level(self, imol)

    def is_EM_map(self, imol):
        r"""is_EM_map(molecules_container_t self, int imol) -> bool"""
        return _coot_headless_api.molecules_container_t_is_EM_map(self, imol)

    def sharpen_blur_map(self, imol_map, b_factor, in_place_flag):
        r"""sharpen_blur_map(molecules_container_t self, int imol_map, float b_factor, bool in_place_flag) -> int"""
        return _coot_headless_api.molecules_container_t_sharpen_blur_map(self, imol_map, b_factor, in_place_flag)

    def sharpen_blur_map_with_resample(self, imol_map, b_factor, resample_factor, in_place_flag):
        r"""sharpen_blur_map_with_resample(molecules_container_t self, int imol_map, float b_factor, float resample_factor, bool in_place_flag) -> int"""
        return _coot_headless_api.molecules_container_t_sharpen_blur_map_with_resample(self, imol_map, b_factor, resample_factor, in_place_flag)

    def mask_map_by_atom_selection(self, imol_coords, imol_map, cid, atom_radius, invert_flag):
        r"""mask_map_by_atom_selection(molecules_container_t self, int imol_coords, int imol_map, std::string const & cid, float atom_radius, bool invert_flag) -> int"""
        return _coot_headless_api.molecules_container_t_mask_map_by_atom_selection(self, imol_coords, imol_map, cid, atom_radius, invert_flag)

    def flip_hand(self, imol_map):
        r"""flip_hand(molecules_container_t self, int imol_map) -> int"""
        return _coot_headless_api.molecules_container_t_flip_hand(self, imol_map)

    def make_masked_maps_split_by_chain(self, imol, imol_map):
        r"""make_masked_maps_split_by_chain(molecules_container_t self, int imol, int imol_map) -> IntVector"""
        return _coot_headless_api.molecules_container_t_make_masked_maps_split_by_chain(self, imol, imol_map)

    def set_map_colour(self, imol, r, g, b):
        r"""set_map_colour(molecules_container_t self, int imol, float r, float g, float b)"""
        return _coot_headless_api.molecules_container_t_set_map_colour(self, imol, r, g, b)

    def set_map_is_contoured_with_thread_pool(self, state):
        r"""set_map_is_contoured_with_thread_pool(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_map_is_contoured_with_thread_pool(self, state)

    def get_map_contours_mesh(self, imol, position_x, position_y, position_z, radius, contour_level):
        r"""get_map_contours_mesh(molecules_container_t self, int imol, double position_x, double position_y, double position_z, float radius, float contour_level) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_map_contours_mesh(self, imol, position_x, position_y, position_z, radius, contour_level)

    def get_map_contours_mesh_using_other_map_for_colours(self, imol_ref, imol_map_for_colouring, position_x, position_y, position_z, radius, contour_level, other_map_for_colouring_min_value, other_map_for_colouring_max_value, invert_colour_ramp):
        r"""get_map_contours_mesh_using_other_map_for_colours(molecules_container_t self, int imol_ref, int imol_map_for_colouring, double position_x, double position_y, double position_z, float radius, float contour_level, float other_map_for_colouring_min_value, float other_map_for_colouring_max_value, bool invert_colour_ramp) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_map_contours_mesh_using_other_map_for_colours(self, imol_ref, imol_map_for_colouring, position_x, position_y, position_z, radius, contour_level, other_map_for_colouring_min_value, other_map_for_colouring_max_value, invert_colour_ramp)

    def set_map_colour_saturation(self, imol, s):
        r"""set_map_colour_saturation(molecules_container_t self, int imol, float s)"""
        return _coot_headless_api.molecules_container_t_set_map_colour_saturation(self, imol, s)

    def get_latest_sfcalc_stats(self):
        r"""get_latest_sfcalc_stats(molecules_container_t self) -> coot::util::sfcalc_genmap_stats_t"""
        return _coot_headless_api.molecules_container_t_get_latest_sfcalc_stats(self)

    def get_r_factor_stats(self):
        r"""get_r_factor_stats(molecules_container_t self) -> molecules_container_t::r_factor_stats"""
        return _coot_headless_api.molecules_container_t_get_r_factor_stats(self)

    def r_factor_stats_as_string(self, rfs):
        r"""r_factor_stats_as_string(molecules_container_t self, molecules_container_t::r_factor_stats const & rfs) -> std::string"""
        return _coot_headless_api.molecules_container_t_r_factor_stats_as_string(self, rfs)

    def average_map(self, imol_maps, scales):
        r"""average_map(molecules_container_t self, std::string const & imol_maps, std::vector< float,std::allocator< float > > & scales) -> int"""
        return _coot_headless_api.molecules_container_t_average_map(self, imol_maps, scales)

    def regen_map(self, imol_map, imol_maps, scales):
        r"""regen_map(molecules_container_t self, int imol_map, std::string const & imol_maps, std::vector< float,std::allocator< float > > const & scales) -> bool"""
        return _coot_headless_api.molecules_container_t_regen_map(self, imol_map, imol_maps, scales)

    def auto_fit_rotamer(self, imol, chain_id, res_no, ins_code, alt_conf, imol_map):
        r"""auto_fit_rotamer(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code, std::string const & alt_conf, int imol_map) -> int"""
        return _coot_headless_api.molecules_container_t_auto_fit_rotamer(self, imol, chain_id, res_no, ins_code, alt_conf, imol_map)

    def change_to_next_rotamer(self, imol, residue_cid, alt_conf):
        r"""change_to_next_rotamer(molecules_container_t self, int imol, std::string const & residue_cid, std::string const & alt_conf) -> coot::molecule_t::rotamer_change_info_t"""
        return _coot_headless_api.molecules_container_t_change_to_next_rotamer(self, imol, residue_cid, alt_conf)

    def change_to_previous_rotamer(self, imol, residue_cid, alt_conf):
        r"""change_to_previous_rotamer(molecules_container_t self, int imol, std::string const & residue_cid, std::string const & alt_conf) -> coot::molecule_t::rotamer_change_info_t"""
        return _coot_headless_api.molecules_container_t_change_to_previous_rotamer(self, imol, residue_cid, alt_conf)

    def change_to_first_rotamer(self, imol, residue_cid, alt_conf):
        r"""change_to_first_rotamer(molecules_container_t self, int imol, std::string const & residue_cid, std::string const & alt_conf) -> coot::molecule_t::rotamer_change_info_t"""
        return _coot_headless_api.molecules_container_t_change_to_first_rotamer(self, imol, residue_cid, alt_conf)

    def delete_using_cid(self, imol, cid, scope):
        r"""delete_using_cid(molecules_container_t self, int imol, std::string const & cid, std::string const & scope) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_using_cid(self, imol, cid, scope)

    def delete_atom(self, imol, chain_id, res_no, ins_code, atom_name, alt_conf):
        r"""delete_atom(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code, std::string const & atom_name, std::string const & alt_conf) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_atom(self, imol, chain_id, res_no, ins_code, atom_name, alt_conf)

    def delete_atom_using_cid(self, imol, cid):
        r"""delete_atom_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_atom_using_cid(self, imol, cid)

    def delete_residue(self, imol, chain_id, res_no, ins_code):
        r"""delete_residue(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_residue(self, imol, chain_id, res_no, ins_code)

    def delete_residue_using_cid(self, imol, cid):
        r"""delete_residue_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_residue_using_cid(self, imol, cid)

    def delete_residue_atoms_with_alt_conf(self, imol, chain_id, res_no, ins_code, alt_conf):
        r"""delete_residue_atoms_with_alt_conf(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code, std::string const & alt_conf) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_residue_atoms_with_alt_conf(self, imol, chain_id, res_no, ins_code, alt_conf)

    def delete_residue_atoms_using_cid(self, imol, cid):
        r"""delete_residue_atoms_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_residue_atoms_using_cid(self, imol, cid)

    def delete_side_chain(self, imol, chain_id, res_no, ins_code):
        r"""delete_side_chain(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_side_chain(self, imol, chain_id, res_no, ins_code)

    def delete_side_chain_using_cid(self, imol, cid):
        r"""delete_side_chain_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_side_chain_using_cid(self, imol, cid)

    def delete_chain_using_cid(self, imol, cid):
        r"""delete_chain_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_chain_using_cid(self, imol, cid)

    def delete_literal_using_cid(self, imol, cid):
        r"""delete_literal_using_cid(molecules_container_t self, int imol, std::string const & cid) -> std::pair< int,unsigned int >"""
        return _coot_headless_api.molecules_container_t_delete_literal_using_cid(self, imol, cid)

    def add_terminal_residue_directly(self, imol, chain_id, res_no, ins_code):
        r"""add_terminal_residue_directly(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> std::pair< int,std::string >"""
        return _coot_headless_api.molecules_container_t_add_terminal_residue_directly(self, imol, chain_id, res_no, ins_code)

    def add_terminal_residue_directly_using_cid(self, imol, cid):
        r"""add_terminal_residue_directly_using_cid(molecules_container_t self, int imol, std::string const & cid) -> int"""
        return _coot_headless_api.molecules_container_t_add_terminal_residue_directly_using_cid(self, imol, cid)

    def add_terminal_residue_directly_using_bucca_ml_growing_using_cid(self, imol, cid):
        r"""add_terminal_residue_directly_using_bucca_ml_growing_using_cid(molecules_container_t self, int imol, std::string const & cid) -> int"""
        return _coot_headless_api.molecules_container_t_add_terminal_residue_directly_using_bucca_ml_growing_using_cid(self, imol, cid)

    def add_terminal_residue_directly_using_bucca_ml_growing(self, imol, spec):
        r"""add_terminal_residue_directly_using_bucca_ml_growing(molecules_container_t self, int imol, coot::residue_spec_t const & spec) -> int"""
        return _coot_headless_api.molecules_container_t_add_terminal_residue_directly_using_bucca_ml_growing(self, imol, spec)

    def set_add_waters_water_to_protein_distance_lim_min(self, d):
        r"""set_add_waters_water_to_protein_distance_lim_min(molecules_container_t self, float d)"""
        return _coot_headless_api.molecules_container_t_set_add_waters_water_to_protein_distance_lim_min(self, d)

    def set_add_waters_water_to_protein_distance_lim_max(self, d):
        r"""set_add_waters_water_to_protein_distance_lim_max(molecules_container_t self, float d)"""
        return _coot_headless_api.molecules_container_t_set_add_waters_water_to_protein_distance_lim_max(self, d)

    def set_add_waters_variance_limit(self, d):
        r"""set_add_waters_variance_limit(molecules_container_t self, float d)"""
        return _coot_headless_api.molecules_container_t_set_add_waters_variance_limit(self, d)

    def set_add_waters_sigma_cutoff(self, d):
        r"""set_add_waters_sigma_cutoff(molecules_container_t self, float d)"""
        return _coot_headless_api.molecules_container_t_set_add_waters_sigma_cutoff(self, d)

    def add_waters(self, imol_model, imol_map):
        r"""add_waters(molecules_container_t self, int imol_model, int imol_map) -> int"""
        return _coot_headless_api.molecules_container_t_add_waters(self, imol_model, imol_map)

    def add_hydrogen_atoms(self, imol_model):
        r"""add_hydrogen_atoms(molecules_container_t self, int imol_model) -> int"""
        return _coot_headless_api.molecules_container_t_add_hydrogen_atoms(self, imol_model)

    def delete_hydrogen_atoms(self, imol_model):
        r"""delete_hydrogen_atoms(molecules_container_t self, int imol_model) -> int"""
        return _coot_headless_api.molecules_container_t_delete_hydrogen_atoms(self, imol_model)

    def add_alternative_conformation(self, imol_model, cid):
        r"""add_alternative_conformation(molecules_container_t self, int imol_model, std::string const & cid) -> int"""
        return _coot_headless_api.molecules_container_t_add_alternative_conformation(self, imol_model, cid)

    def fill_partial_residue(self, imol, chain_id, res_no, ins_code):
        r"""fill_partial_residue(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> int"""
        return _coot_headless_api.molecules_container_t_fill_partial_residue(self, imol, chain_id, res_no, ins_code)

    def fill_partial_residue_using_cid(self, imol, cid):
        r"""fill_partial_residue_using_cid(molecules_container_t self, int imol, std::string const & cid) -> int"""
        return _coot_headless_api.molecules_container_t_fill_partial_residue_using_cid(self, imol, cid)

    def fill_partial_residues(self, imol):
        r"""fill_partial_residues(molecules_container_t self, int imol) -> int"""
        return _coot_headless_api.molecules_container_t_fill_partial_residues(self, imol)

    def flip_peptide(self, imol, atom_spec, alt_conf):
        r"""flip_peptide(molecules_container_t self, int imol, coot::atom_spec_t const & atom_spec, std::string const & alt_conf) -> int"""
        return _coot_headless_api.molecules_container_t_flip_peptide(self, imol, atom_spec, alt_conf)

    def flip_peptide_using_cid(self, imol, atom_cid, alt_conf):
        r"""flip_peptide_using_cid(molecules_container_t self, int imol, std::string const & atom_cid, std::string const & alt_conf) -> int"""
        return _coot_headless_api.molecules_container_t_flip_peptide_using_cid(self, imol, atom_cid, alt_conf)

    def eigen_flip_ligand(self, imol, chain_id, res_no, ins_code):
        r"""eigen_flip_ligand(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code)"""
        return _coot_headless_api.molecules_container_t_eigen_flip_ligand(self, imol, chain_id, res_no, ins_code)

    def eigen_flip_ligand_using_cid(self, imol, residue_cid):
        r"""eigen_flip_ligand_using_cid(molecules_container_t self, int imol, std::string const & residue_cid)"""
        return _coot_headless_api.molecules_container_t_eigen_flip_ligand_using_cid(self, imol, residue_cid)

    def mutate(self, imol, cid, new_residue_type):
        r"""mutate(molecules_container_t self, int imol, std::string const & cid, std::string const & new_residue_type) -> int"""
        return _coot_headless_api.molecules_container_t_mutate(self, imol, cid, new_residue_type)

    def side_chain_180(self, imol, atom_cid):
        r"""side_chain_180(molecules_container_t self, int imol, std::string const & atom_cid) -> int"""
        return _coot_headless_api.molecules_container_t_side_chain_180(self, imol, atom_cid)

    def jed_flip(self, imol, atom_cid, invert_selection):
        r"""jed_flip(molecules_container_t self, int imol, std::string const & atom_cid, bool invert_selection) -> std::string"""
        return _coot_headless_api.molecules_container_t_jed_flip(self, imol, atom_cid, invert_selection)

    def move_molecule_to_new_centre(self, imol, x, y, z):
        r"""move_molecule_to_new_centre(molecules_container_t self, int imol, float x, float y, float z) -> int"""
        return _coot_headless_api.molecules_container_t_move_molecule_to_new_centre(self, imol, x, y, z)

    def multiply_residue_temperature_factors(self, imol, cid, factor):
        r"""multiply_residue_temperature_factors(molecules_container_t self, int imol, std::string const & cid, float factor)"""
        return _coot_headless_api.molecules_container_t_multiply_residue_temperature_factors(self, imol, cid, factor)

    def get_molecule_centre(self, imol):
        r"""get_molecule_centre(molecules_container_t self, int imol) -> coot::Cartesian"""
        return _coot_headless_api.molecules_container_t_get_molecule_centre(self, imol)

    def copy_fragment_using_cid(self, imol, multi_cid):
        r"""copy_fragment_using_cid(molecules_container_t self, int imol, std::string const & multi_cid) -> int"""
        return _coot_headless_api.molecules_container_t_copy_fragment_using_cid(self, imol, multi_cid)

    def copy_fragment_for_refinement_using_cid(self, imol, multi_cid):
        r"""copy_fragment_for_refinement_using_cid(molecules_container_t self, int imol, std::string const & multi_cid) -> int"""
        return _coot_headless_api.molecules_container_t_copy_fragment_for_refinement_using_cid(self, imol, multi_cid)

    def copy_fragment_using_residue_range(self, imol, chain_id, res_no_start, res_no_end):
        r"""copy_fragment_using_residue_range(molecules_container_t self, int imol, std::string const & chain_id, int res_no_start, int res_no_end) -> int"""
        return _coot_headless_api.molecules_container_t_copy_fragment_using_residue_range(self, imol, chain_id, res_no_start, res_no_end)

    def apply_transformation_to_atom_selection(self, imol, atoms_selection_cid, n_atoms, m00, m01, m02, m10, m11, m12, m20, m21, m22, c0, c1, c2, t0, t1, t2):
        r"""apply_transformation_to_atom_selection(molecules_container_t self, int imol, std::string const & atoms_selection_cid, int n_atoms, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, float c0, float c1, float c2, float t0, float t1, float t2) -> int"""
        return _coot_headless_api.molecules_container_t_apply_transformation_to_atom_selection(self, imol, atoms_selection_cid, n_atoms, m00, m01, m02, m10, m11, m12, m20, m21, m22, c0, c1, c2, t0, t1, t2)

    def new_positions_for_residue_atoms(self, imol, residue_cid, moved_atoms):
        r"""new_positions_for_residue_atoms(molecules_container_t self, int imol, std::string const & residue_cid, std::vector< coot::molecule_t::moved_atom_t,std::allocator< coot::molecule_t::moved_atom_t > > & moved_atoms) -> int"""
        return _coot_headless_api.molecules_container_t_new_positions_for_residue_atoms(self, imol, residue_cid, moved_atoms)

    def new_positions_for_atoms_in_residues(self, imol, moved_residues):
        r"""new_positions_for_atoms_in_residues(molecules_container_t self, int imol, std::vector< coot::molecule_t::moved_residue_t,std::allocator< coot::molecule_t::moved_residue_t > > const & moved_residues) -> int"""
        return _coot_headless_api.molecules_container_t_new_positions_for_atoms_in_residues(self, imol, moved_residues)

    def merge_molecules(self, *args):
        r"""
        merge_molecules(molecules_container_t self, int imol, std::string const & list_of_other_molecules) -> std::pair< int,std::vector< merge_molecule_results_info_t,std::allocator< merge_molecule_results_info_t > > >
        merge_molecules(molecules_container_t self, int imol, std::vector< mmdb::Manager *,std::allocator< mmdb::Manager * > > mols) -> std::pair< int,std::vector< merge_molecule_results_info_t,std::allocator< merge_molecule_results_info_t > > >
        """
        return _coot_headless_api.molecules_container_t_merge_molecules(self, *args)

    def cis_trans_convert(self, imol, atom_cid):
        r"""cis_trans_convert(molecules_container_t self, int imol, std::string const & atom_cid) -> int"""
        return _coot_headless_api.molecules_container_t_cis_trans_convert(self, imol, atom_cid)

    def replace_fragment(self, imol_base, imol_reference, atom_selection):
        r"""replace_fragment(molecules_container_t self, int imol_base, int imol_reference, std::string const & atom_selection) -> int"""
        return _coot_headless_api.molecules_container_t_replace_fragment(self, imol_base, imol_reference, atom_selection)

    def rigid_body_fit(self, imol, multi_cid, imol_map):
        r"""rigid_body_fit(molecules_container_t self, int imol, std::string const & multi_cid, int imol_map) -> int"""
        return _coot_headless_api.molecules_container_t_rigid_body_fit(self, imol, multi_cid, imol_map)

    def change_chain_id(self, imol, from_chain_id, to_chain_id, use_resno_range, start_resno, end_resno):
        r"""change_chain_id(molecules_container_t self, int imol, std::string const & from_chain_id, std::string const & to_chain_id, bool use_resno_range, int start_resno, int end_resno) -> std::pair< int,std::string >"""
        return _coot_headless_api.molecules_container_t_change_chain_id(self, imol, from_chain_id, to_chain_id, use_resno_range, start_resno, end_resno)

    def refine_residues_using_atom_cid(self, imol, cid, mode, n_cycles):
        r"""refine_residues_using_atom_cid(molecules_container_t self, int imol, std::string const & cid, std::string const & mode, int n_cycles) -> int"""
        return _coot_headless_api.molecules_container_t_refine_residues_using_atom_cid(self, imol, cid, mode, n_cycles)

    def refine_residues(self, imol, chain_id, res_no, ins_code, alt_conf, mode, n_cycles):
        r"""refine_residues(molecules_container_t self, int imol, std::string const & chain_id, int res_no, std::string const & ins_code, std::string const & alt_conf, std::string const & mode, int n_cycles) -> int"""
        return _coot_headless_api.molecules_container_t_refine_residues(self, imol, chain_id, res_no, ins_code, alt_conf, mode, n_cycles)

    def refine_residue_range(self, imol, chain_id, res_no_start, res_no_end, n_cycles):
        r"""refine_residue_range(molecules_container_t self, int imol, std::string const & chain_id, int res_no_start, int res_no_end, int n_cycles) -> int"""
        return _coot_headless_api.molecules_container_t_refine_residue_range(self, imol, chain_id, res_no_start, res_no_end, n_cycles)

    def minimize_energy(self, imol, atom_selection_cid, n_cycles, do_rama_plot_restraints, rama_plot_weight, do_torsion_restraints, torsion_weight, refinement_is_quiet):
        r"""minimize_energy(molecules_container_t self, int imol, std::string const & atom_selection_cid, int n_cycles, bool do_rama_plot_restraints, float rama_plot_weight, bool do_torsion_restraints, float torsion_weight, bool refinement_is_quiet) -> std::pair< int,coot::instanced_mesh_t >"""
        return _coot_headless_api.molecules_container_t_minimize_energy(self, imol, atom_selection_cid, n_cycles, do_rama_plot_restraints, rama_plot_weight, do_torsion_restraints, torsion_weight, refinement_is_quiet)

    def fix_atom_selection_during_refinement(self, imol, atom_selection_cid):
        r"""fix_atom_selection_during_refinement(molecules_container_t self, int imol, std::string const & atom_selection_cid)"""
        return _coot_headless_api.molecules_container_t_fix_atom_selection_during_refinement(self, imol, atom_selection_cid)

    def add_target_position_restraint(self, imol, atom_cid, pos_x, pos_y, pos_z):
        r"""add_target_position_restraint(molecules_container_t self, int imol, std::string const & atom_cid, float pos_x, float pos_y, float pos_z)"""
        return _coot_headless_api.molecules_container_t_add_target_position_restraint(self, imol, atom_cid, pos_x, pos_y, pos_z)

    def clear_target_position_restraint(self, imol, atom_cid):
        r"""clear_target_position_restraint(molecules_container_t self, int imol, std::string const & atom_cid)"""
        return _coot_headless_api.molecules_container_t_clear_target_position_restraint(self, imol, atom_cid)

    def turn_off_when_close_target_position_restraint(self, imol):
        r"""turn_off_when_close_target_position_restraint(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_turn_off_when_close_target_position_restraint(self, imol)

    def set_use_rama_plot_restraints(self, state):
        r"""set_use_rama_plot_restraints(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_use_rama_plot_restraints(self, state)

    def get_use_rama_plot_restraints(self):
        r"""get_use_rama_plot_restraints(molecules_container_t self) -> bool"""
        return _coot_headless_api.molecules_container_t_get_use_rama_plot_restraints(self)

    def set_rama_plot_restraints_weight(self, f):
        r"""set_rama_plot_restraints_weight(molecules_container_t self, float f)"""
        return _coot_headless_api.molecules_container_t_set_rama_plot_restraints_weight(self, f)

    def get_rama_plot_restraints_weight(self):
        r"""get_rama_plot_restraints_weight(molecules_container_t self) -> float"""
        return _coot_headless_api.molecules_container_t_get_rama_plot_restraints_weight(self)

    def set_use_torsion_restraints(self, state):
        r"""set_use_torsion_restraints(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_use_torsion_restraints(self, state)

    def get_use_torsion_restraints(self):
        r"""get_use_torsion_restraints(molecules_container_t self) -> bool"""
        return _coot_headless_api.molecules_container_t_get_use_torsion_restraints(self)

    def set_torsion_restraints_weight(self, f):
        r"""set_torsion_restraints_weight(molecules_container_t self, float f)"""
        return _coot_headless_api.molecules_container_t_set_torsion_restraints_weight(self, f)

    def get_torsion_restraints_weight(self):
        r"""get_torsion_restraints_weight(molecules_container_t self) -> float"""
        return _coot_headless_api.molecules_container_t_get_torsion_restraints_weight(self)

    def init_refinement_of_molecule_as_fragment_based_on_reference(self, imol_frag, imol_ref, imol_map):
        r"""init_refinement_of_molecule_as_fragment_based_on_reference(molecules_container_t self, int imol_frag, int imol_ref, int imol_map)"""
        return _coot_headless_api.molecules_container_t_init_refinement_of_molecule_as_fragment_based_on_reference(self, imol_frag, imol_ref, imol_map)

    def refine(self, imol, n_cycles):
        r"""refine(molecules_container_t self, int imol, int n_cycles) -> std::pair< int,coot::instanced_mesh_t >"""
        return _coot_headless_api.molecules_container_t_refine(self, imol, n_cycles)

    def add_target_position_restraint_and_refine(self, imol, atom_cid, pos_x, pos_y, pos_z, n_cycles):
        r"""add_target_position_restraint_and_refine(molecules_container_t self, int imol, std::string const & atom_cid, float pos_x, float pos_y, float pos_z, int n_cycles) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_add_target_position_restraint_and_refine(self, imol, atom_cid, pos_x, pos_y, pos_z, n_cycles)

    def clear_target_position_restraints(self, imol):
        r"""clear_target_position_restraints(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_clear_target_position_restraints(self, imol)

    def clear_refinement(self, imol):
        r"""clear_refinement(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_clear_refinement(self, imol)

    def set_refinement_is_verbose(self, state):
        r"""set_refinement_is_verbose(molecules_container_t self, bool state)"""
        return _coot_headless_api.molecules_container_t_set_refinement_is_verbose(self, state)

    def set_refinement_geman_mcclure_alpha(self, a):
        r"""set_refinement_geman_mcclure_alpha(molecules_container_t self, float a)"""
        return _coot_headless_api.molecules_container_t_set_refinement_geman_mcclure_alpha(self, a)

    def get_geman_mcclure_alpha(self):
        r"""get_geman_mcclure_alpha(molecules_container_t self) -> float"""
        return _coot_headless_api.molecules_container_t_get_geman_mcclure_alpha(self)

    def generate_self_restraints(self, imol, local_dist_max):
        r"""generate_self_restraints(molecules_container_t self, int imol, float local_dist_max) -> int"""
        return _coot_headless_api.molecules_container_t_generate_self_restraints(self, imol, local_dist_max)

    def generate_chain_self_restraints(self, imol, local_dist_max, chain_id):
        r"""generate_chain_self_restraints(molecules_container_t self, int imol, float local_dist_max, std::string const & chain_id)"""
        return _coot_headless_api.molecules_container_t_generate_chain_self_restraints(self, imol, local_dist_max, chain_id)

    def generate_local_self_restraints(self, imol, local_dist_max, residue_cids):
        r"""generate_local_self_restraints(molecules_container_t self, int imol, float local_dist_max, std::string const & residue_cids)"""
        return _coot_headless_api.molecules_container_t_generate_local_self_restraints(self, imol, local_dist_max, residue_cids)

    def add_parallel_plane_restraint(self, imol, residue_cid_1, residue_cid_2):
        r"""add_parallel_plane_restraint(molecules_container_t self, int imol, std::string const & residue_cid_1, std::string const & residue_cid_2)"""
        return _coot_headless_api.molecules_container_t_add_parallel_plane_restraint(self, imol, residue_cid_1, residue_cid_2)

    def get_extra_restraints_mesh(self, imol, mode):
        r"""get_extra_restraints_mesh(molecules_container_t self, int imol, int mode) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_extra_restraints_mesh(self, imol, mode)

    def read_extra_restraints(self, imol, file_name):
        r"""read_extra_restraints(molecules_container_t self, int imol, std::string const & file_name)"""
        return _coot_headless_api.molecules_container_t_read_extra_restraints(self, imol, file_name)

    def clear_extra_restraints(self, imol):
        r"""clear_extra_restraints(molecules_container_t self, int imol)"""
        return _coot_headless_api.molecules_container_t_clear_extra_restraints(self, imol)

    def get_rotamer_dodecs(self, imol):
        r"""get_rotamer_dodecs(molecules_container_t self, int imol) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_rotamer_dodecs(self, imol)

    def get_rotamer_dodecs_instanced(self, imol):
        r"""get_rotamer_dodecs_instanced(molecules_container_t self, int imol) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_rotamer_dodecs_instanced(self, imol)

    def get_ramachandran_validation_markup_mesh(self, imol):
        r"""get_ramachandran_validation_markup_mesh(molecules_container_t self, int imol) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_ramachandran_validation_markup_mesh(self, imol)

    def ramachandran_validation(self, imol):
        r"""ramachandran_validation(molecules_container_t self, int imol) -> std::vector< coot::phi_psi_prob_t,std::allocator< coot::phi_psi_prob_t > >"""
        return _coot_headless_api.molecules_container_t_ramachandran_validation(self, imol)

    def contact_dots_for_ligand(self, imol, cid, smoothness_factor):
        r"""contact_dots_for_ligand(molecules_container_t self, int imol, std::string const & cid, unsigned int smoothness_factor) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_contact_dots_for_ligand(self, imol, cid, smoothness_factor)

    def all_molecule_contact_dots(self, imol, smoothness_factor):
        r"""all_molecule_contact_dots(molecules_container_t self, int imol, unsigned int smoothness_factor) -> coot::instanced_mesh_t"""
        return _coot_headless_api.molecules_container_t_all_molecule_contact_dots(self, imol, smoothness_factor)

    def get_simple_molecule(self, imol, residue_cid, draw_hydrogen_atoms_flag):
        r"""get_simple_molecule(molecules_container_t self, int imol, std::string const & residue_cid, bool draw_hydrogen_atoms_flag) -> coot::simple::molecule_t"""
        return _coot_headless_api.molecules_container_t_get_simple_molecule(self, imol, residue_cid, draw_hydrogen_atoms_flag)

    def make_exportable_environment_bond_box(self, imol, spec):
        r"""make_exportable_environment_bond_box(molecules_container_t self, int imol, coot::residue_spec_t & spec) -> generic_3d_lines_bonds_box_t"""
        return _coot_headless_api.molecules_container_t_make_exportable_environment_bond_box(self, imol, spec)

    def get_h_bonds(self, imol, cid_str, mcdonald_and_thornton_mode):
        r"""get_h_bonds(molecules_container_t self, int imol, std::string const & cid_str, bool mcdonald_and_thornton_mode) -> std::vector< moorhen::h_bond,std::allocator< moorhen::h_bond > >"""
        return _coot_headless_api.molecules_container_t_get_h_bonds(self, imol, cid_str, mcdonald_and_thornton_mode)

    def get_mesh_for_ligand_validation_vs_dictionary(self, imol, ligand_cid):
        r"""get_mesh_for_ligand_validation_vs_dictionary(molecules_container_t self, int imol, std::string const & ligand_cid) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_mesh_for_ligand_validation_vs_dictionary(self, imol, ligand_cid)

    def match_ligand_torsions(self, imol_ligand, imol_ref, chain_id_ref, resno_ref):
        r"""match_ligand_torsions(molecules_container_t self, int imol_ligand, int imol_ref, std::string const & chain_id_ref, int resno_ref) -> bool"""
        return _coot_headless_api.molecules_container_t_match_ligand_torsions(self, imol_ligand, imol_ref, chain_id_ref, resno_ref)

    def match_ligand_position(self, imol_ligand, imol_ref, chain_id_ref, resno_ref):
        r"""match_ligand_position(molecules_container_t self, int imol_ligand, int imol_ref, std::string const & chain_id_ref, int resno_ref) -> bool"""
        return _coot_headless_api.molecules_container_t_match_ligand_position(self, imol_ligand, imol_ref, chain_id_ref, resno_ref)

    def match_ligand_torsions_and_position(self, imol_ligand, imol_ref, chain_id_ref, resno_ref):
        r"""match_ligand_torsions_and_position(molecules_container_t self, int imol_ligand, int imol_ref, std::string const & chain_id_ref, int resno_ref) -> bool"""
        return _coot_headless_api.molecules_container_t_match_ligand_torsions_and_position(self, imol_ligand, imol_ref, chain_id_ref, resno_ref)

    def match_ligand_torsions_and_position_using_cid(self, imol_ligand, imol_ref, cid):
        r"""match_ligand_torsions_and_position_using_cid(molecules_container_t self, int imol_ligand, int imol_ref, std::string const & cid) -> bool"""
        return _coot_headless_api.molecules_container_t_match_ligand_torsions_and_position_using_cid(self, imol_ligand, imol_ref, cid)

    def get_overlap_dots(self, imol):
        r"""get_overlap_dots(molecules_container_t self, int imol) -> coot::atom_overlaps_dots_container_t"""
        return _coot_headless_api.molecules_container_t_get_overlap_dots(self, imol)

    def get_overlap_dots_for_ligand(self, imol, cid_ligand):
        r"""get_overlap_dots_for_ligand(molecules_container_t self, int imol, std::string const & cid_ligand) -> coot::atom_overlaps_dots_container_t"""
        return _coot_headless_api.molecules_container_t_get_overlap_dots_for_ligand(self, imol, cid_ligand)

    def get_overlaps(self, imol):
        r"""get_overlaps(molecules_container_t self, int imol) -> std::vector< coot::plain_atom_overlap_t,std::allocator< coot::plain_atom_overlap_t > >"""
        return _coot_headless_api.molecules_container_t_get_overlaps(self, imol)

    def get_overlaps_for_ligand(self, imol, cid_ligand):
        r"""get_overlaps_for_ligand(molecules_container_t self, int imol, std::string const & cid_ligand) -> std::vector< coot::plain_atom_overlap_t,std::allocator< coot::plain_atom_overlap_t > >"""
        return _coot_headless_api.molecules_container_t_get_overlaps_for_ligand(self, imol, cid_ligand)

    def density_fit_analysis(self, imol_model, imol_map):
        r"""density_fit_analysis(molecules_container_t self, int imol_model, int imol_map) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_density_fit_analysis(self, imol_model, imol_map)

    def density_correlation_analysis(self, imol_model, imol_map):
        r"""density_correlation_analysis(molecules_container_t self, int imol_model, int imol_map) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_density_correlation_analysis(self, imol_model, imol_map)

    def rotamer_analysis(self, imol_model):
        r"""rotamer_analysis(molecules_container_t self, int imol_model) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_rotamer_analysis(self, imol_model)

    def ramachandran_analysis(self, imol_model):
        r"""ramachandran_analysis(molecules_container_t self, int imol_model) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_ramachandran_analysis(self, imol_model)

    def ramachandran_analysis_for_chain(self, imol_model, chain_id):
        r"""ramachandran_analysis_for_chain(molecules_container_t self, int imol_model, std::string const & chain_id) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_ramachandran_analysis_for_chain(self, imol_model, chain_id)

    def peptide_omega_analysis(self, imol_model):
        r"""peptide_omega_analysis(molecules_container_t self, int imol_model) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_peptide_omega_analysis(self, imol_model)

    def get_median_temperature_factor(self, imol):
        r"""get_median_temperature_factor(molecules_container_t self, int imol) -> float"""
        return _coot_headless_api.molecules_container_t_get_median_temperature_factor(self, imol)

    def get_interesting_places(self, imol, mode):
        r"""get_interesting_places(molecules_container_t self, int imol, std::string const & mode) -> std::vector< coot::molecule_t::interesting_place_t,std::allocator< coot::molecule_t::interesting_place_t > >"""
        return _coot_headless_api.molecules_container_t_get_interesting_places(self, imol, mode)

    def difference_map_peaks(self, imol_map, imol_protein, n_rmsd):
        r"""difference_map_peaks(molecules_container_t self, int imol_map, int imol_protein, float n_rmsd) -> std::vector< coot::molecule_t::interesting_place_t,std::allocator< coot::molecule_t::interesting_place_t > >"""
        return _coot_headless_api.molecules_container_t_difference_map_peaks(self, imol_map, imol_protein, n_rmsd)

    def pepflips_using_difference_map(self, imol_coords, imol_difference_map, n_sigma):
        r"""pepflips_using_difference_map(molecules_container_t self, int imol_coords, int imol_difference_map, float n_sigma) -> std::vector< coot::molecule_t::interesting_place_t,std::allocator< coot::molecule_t::interesting_place_t > >"""
        return _coot_headless_api.molecules_container_t_pepflips_using_difference_map(self, imol_coords, imol_difference_map, n_sigma)

    def unmodelled_blobs(self, imol_model, imol_map):
        r"""unmodelled_blobs(molecules_container_t self, int imol_model, int imol_map) -> std::vector< coot::molecule_t::interesting_place_t,std::allocator< coot::molecule_t::interesting_place_t > >"""
        return _coot_headless_api.molecules_container_t_unmodelled_blobs(self, imol_model, imol_map)

    def find_water_baddies(self, imol_model, imol_map, b_factor_lim, outlier_sigma_level, min_dist, max_dist, ignore_part_occ_contact_flag, ignore_zero_occ_flag):
        r"""find_water_baddies(molecules_container_t self, int imol_model, int imol_map, float b_factor_lim, float outlier_sigma_level, float min_dist, float max_dist, bool ignore_part_occ_contact_flag, bool ignore_zero_occ_flag) -> std::vector< coot::atom_spec_t,std::allocator< coot::atom_spec_t > >"""
        return _coot_headless_api.molecules_container_t_find_water_baddies(self, imol_model, imol_map, b_factor_lim, outlier_sigma_level, min_dist, max_dist, ignore_part_occ_contact_flag, ignore_zero_occ_flag)

    def fourier_shell_correlation(self, imol_map_1, imol_map_2):
        r"""fourier_shell_correlation(molecules_container_t self, int imol_map_1, int imol_map_2) -> std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > >"""
        return _coot_headless_api.molecules_container_t_fourier_shell_correlation(self, imol_map_1, imol_map_2)

    def get_q_score(self, imol_model, imol_map):
        r"""get_q_score(molecules_container_t self, int imol_model, int imol_map) -> coot::validation_information_t"""
        return _coot_headless_api.molecules_container_t_get_q_score(self, imol_model, imol_map)

    def calculate_new_rail_points(self):
        r"""calculate_new_rail_points(molecules_container_t self) -> int"""
        return _coot_headless_api.molecules_container_t_calculate_new_rail_points(self)

    def rail_points_total(self):
        r"""rail_points_total(molecules_container_t self) -> int"""
        return _coot_headless_api.molecules_container_t_rail_points_total(self)

    def associate_data_mtz_file_with_map(self, imol, data_mtz_file_name, f_col, sigf_col, free_r_col):
        r"""associate_data_mtz_file_with_map(molecules_container_t self, int imol, std::string const & data_mtz_file_name, std::string const & f_col, std::string const & sigf_col, std::string const & free_r_col)"""
        return _coot_headless_api.molecules_container_t_associate_data_mtz_file_with_map(self, imol, data_mtz_file_name, f_col, sigf_col, free_r_col)

    def connect_updating_maps(self, imol_model, imol_with_data_info_attached, imol_map_2fofc, imol_map_fofc):
        r"""connect_updating_maps(molecules_container_t self, int imol_model, int imol_with_data_info_attached, int imol_map_2fofc, int imol_map_fofc) -> int"""
        return _coot_headless_api.molecules_container_t_connect_updating_maps(self, imol_model, imol_with_data_info_attached, imol_map_2fofc, imol_map_fofc)

    def sfcalc_genmap(self, imol_model, imol_map_with_data_attached, imol_updating_difference_map):
        r"""sfcalc_genmap(molecules_container_t self, int imol_model, int imol_map_with_data_attached, int imol_updating_difference_map)"""
        return _coot_headless_api.molecules_container_t_sfcalc_genmap(self, imol_model, imol_map_with_data_attached, imol_updating_difference_map)

    def sfcalc_genmaps_using_bulk_solvent(self, imol_model, imol_2fofc_map, imol_updating_difference_map, imol_map_with_data_attached):
        r"""sfcalc_genmaps_using_bulk_solvent(molecules_container_t self, int imol_model, int imol_2fofc_map, int imol_updating_difference_map, int imol_map_with_data_attached) -> coot::util::sfcalc_genmap_stats_t"""
        return _coot_headless_api.molecules_container_t_sfcalc_genmaps_using_bulk_solvent(self, imol_model, imol_2fofc_map, imol_updating_difference_map, imol_map_with_data_attached)

    def shift_field_b_factor_refinement(self, imol, imol_with_data_attached):
        r"""shift_field_b_factor_refinement(molecules_container_t self, int imol, int imol_with_data_attached) -> bool"""
        return _coot_headless_api.molecules_container_t_shift_field_b_factor_refinement(self, imol, imol_with_data_attached)

    def get_density_at_position(self, imol_map, x, y, z):
        r"""get_density_at_position(molecules_container_t self, int imol_map, float x, float y, float z) -> float"""
        return _coot_headless_api.molecules_container_t_get_density_at_position(self, imol_map, x, y, z)

    def get_diff_diff_map_peaks(self, imol_diff_map, screen_centre_x, screen_centre_y, screen_centre_z):
        r"""get_diff_diff_map_peaks(molecules_container_t self, int imol_diff_map, float screen_centre_x, float screen_centre_y, float screen_centre_z) -> std::vector< std::pair< clipper::Coord_orth,float >,std::allocator< std::pair< clipper::Coord_orth,float > > >"""
        return _coot_headless_api.molecules_container_t_get_diff_diff_map_peaks(self, imol_diff_map, screen_centre_x, screen_centre_y, screen_centre_z)

    def get_data_set_file_name(self, imol):
        r"""get_data_set_file_name(molecules_container_t self, int imol) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_data_set_file_name(self, imol)

    def go_to_blob(self, x1, y1, z1, x2, y2, z2, contour_level):
        r"""go_to_blob(molecules_container_t self, float x1, float y1, float z1, float x2, float y2, float z2, float contour_level) -> std::pair< bool,clipper::Coord_orth >"""
        return _coot_headless_api.molecules_container_t_go_to_blob(self, x1, y1, z1, x2, y2, z2, contour_level)

    def fit_ligand_right_here(self, imol_protein, imol_map, imol_ligand, x, y, z, n_rmsd, use_conformers, n_conformers):
        r"""fit_ligand_right_here(molecules_container_t self, int imol_protein, int imol_map, int imol_ligand, float x, float y, float z, float n_rmsd, bool use_conformers, unsigned int n_conformers) -> IntVector"""
        return _coot_headless_api.molecules_container_t_fit_ligand_right_here(self, imol_protein, imol_map, imol_ligand, x, y, z, n_rmsd, use_conformers, n_conformers)

    def fit_ligand(self, imol_protein, imol_map, imol_ligand, n_rmsd, use_conformers, n_conformers):
        r"""fit_ligand(molecules_container_t self, int imol_protein, int imol_map, int imol_ligand, float n_rmsd, bool use_conformers, unsigned int n_conformers) -> std::vector< molecules_container_t::fit_ligand_info_t,std::allocator< molecules_container_t::fit_ligand_info_t > >"""
        return _coot_headless_api.molecules_container_t_fit_ligand(self, imol_protein, imol_map, imol_ligand, n_rmsd, use_conformers, n_conformers)

    def fit_ligand_multi_ligand(self, imol_protein, imol_map, multi_ligand_molecule_number_list, n_rmsd, use_conformers, n_conformers):
        r"""fit_ligand_multi_ligand(molecules_container_t self, int imol_protein, int imol_map, std::string const & multi_ligand_molecule_number_list, float n_rmsd, bool use_conformers, unsigned int n_conformers) -> std::vector< molecules_container_t::fit_ligand_info_t,std::allocator< molecules_container_t::fit_ligand_info_t > >"""
        return _coot_headless_api.molecules_container_t_fit_ligand_multi_ligand(self, imol_protein, imol_map, multi_ligand_molecule_number_list, n_rmsd, use_conformers, n_conformers)

    def fit_to_map_by_random_jiggle(self, imol, res_spec, n_trials, translation_scale_factor):
        r"""fit_to_map_by_random_jiggle(molecules_container_t self, int imol, coot::residue_spec_t const & res_spec, int n_trials, float translation_scale_factor) -> float"""
        return _coot_headless_api.molecules_container_t_fit_to_map_by_random_jiggle(self, imol, res_spec, n_trials, translation_scale_factor)

    def fit_to_map_by_random_jiggle_using_cid(self, imol, cid, n_trials, translation_scale_factor):
        r"""fit_to_map_by_random_jiggle_using_cid(molecules_container_t self, int imol, std::string const & cid, int n_trials, float translation_scale_factor) -> float"""
        return _coot_headless_api.molecules_container_t_fit_to_map_by_random_jiggle_using_cid(self, imol, cid, n_trials, translation_scale_factor)

    def fit_to_map_by_random_jiggle_with_blur_using_cid(self, imol, imol_map, cid, b_factor, n_trials, translation_scale_factor):
        r"""fit_to_map_by_random_jiggle_with_blur_using_cid(molecules_container_t self, int imol, int imol_map, std::string const & cid, float b_factor, int n_trials, float translation_scale_factor) -> float"""
        return _coot_headless_api.molecules_container_t_fit_to_map_by_random_jiggle_with_blur_using_cid(self, imol, imol_map, cid, b_factor, n_trials, translation_scale_factor)

    def get_svg_for_residue_type(self, imol, comp_id, use_rdkit_svg, dark_background_flag):
        r"""get_svg_for_residue_type(molecules_container_t self, int imol, std::string const & comp_id, bool use_rdkit_svg, bool dark_background_flag) -> std::string"""
        return _coot_headless_api.molecules_container_t_get_svg_for_residue_type(self, imol, comp_id, use_rdkit_svg, dark_background_flag)

    def add_compound(self, imol, tlc, imol_dict, imol_map, x, y, z):
        r"""add_compound(molecules_container_t self, int imol, std::string const & tlc, int imol_dict, int imol_map, float x, float y, float z) -> int"""
        return _coot_headless_api.molecules_container_t_add_compound(self, imol, tlc, imol_dict, imol_map, x, y, z)

    def get_non_standard_residues_in_molecule(self, imol):
        r"""get_non_standard_residues_in_molecule(molecules_container_t self, int imol) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >"""
        return _coot_headless_api.molecules_container_t_get_non_standard_residues_in_molecule(self, imol)

    def get_map_section_texture(self, imol, section_id, axis, data_value_for_bottom, data_value_for_top):
        r"""get_map_section_texture(molecules_container_t self, int imol, int section_id, int axis, float data_value_for_bottom, float data_value_for_top) -> texture_as_floats_t"""
        return _coot_headless_api.molecules_container_t_get_map_section_texture(self, imol, section_id, axis, data_value_for_bottom, data_value_for_top)

    def get_number_of_map_sections(self, imol_map, axis_id):
        r"""get_number_of_map_sections(molecules_container_t self, int imol_map, int axis_id) -> int"""
        return _coot_headless_api.molecules_container_t_get_number_of_map_sections(self, imol_map, axis_id)

    def make_mesh_from_gltf_file(self, file_name):
        r"""make_mesh_from_gltf_file(molecules_container_t self, std::string const & file_name) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_make_mesh_from_gltf_file(self, file_name)

    def get_octahemisphere(self, n_divisions):
        r"""get_octahemisphere(molecules_container_t self, unsigned int n_divisions) -> coot::simple_mesh_t"""
        return _coot_headless_api.molecules_container_t_get_octahemisphere(self, n_divisions)

    def pae_png(self, pae_file_name):
        r"""pae_png(molecules_container_t self, std::string const & pae_file_name) -> std::string"""
        return _coot_headless_api.molecules_container_t_pae_png(self, pae_file_name)
    long_term_job_stats = property(_coot_headless_api.molecules_container_t_long_term_job_stats_get, _coot_headless_api.molecules_container_t_long_term_job_stats_set, doc=r"""long_term_job_stats : molecules_container_t::ltj_stats_t""")
    interrupt_long_term_job = property(_coot_headless_api.molecules_container_t_interrupt_long_term_job_get, _coot_headless_api.molecules_container_t_interrupt_long_term_job_set, doc=r"""interrupt_long_term_job : bool""")

    def testing_start_long_term_job(self, n_seconds):
        r"""testing_start_long_term_job(molecules_container_t self, unsigned int n_seconds)"""
        return _coot_headless_api.molecules_container_t_testing_start_long_term_job(self, n_seconds)

    def testing_stop_long_term_job(self):
        r"""testing_stop_long_term_job(molecules_container_t self)"""
        return _coot_headless_api.molecules_container_t_testing_stop_long_term_job(self)

    def testing_interrogate_long_term_job(self):
        r"""testing_interrogate_long_term_job(molecules_container_t self) -> molecules_container_t::ltj_stats_t"""
        return _coot_headless_api.molecules_container_t_testing_interrogate_long_term_job(self)

    def get_contouring_time(self):
        r"""get_contouring_time(molecules_container_t self) -> double"""
        return _coot_headless_api.molecules_container_t_get_contouring_time(self)

    def set_max_number_of_threads(self, n_threads):
        r"""set_max_number_of_threads(molecules_container_t self, unsigned int n_threads)"""
        return _coot_headless_api.molecules_container_t_set_max_number_of_threads(self, n_threads)

    def set_max_number_of_threads_in_thread_pool(self, n_threads):
        r"""set_max_number_of_threads_in_thread_pool(molecules_container_t self, unsigned int n_threads)"""
        return _coot_headless_api.molecules_container_t_set_max_number_of_threads_in_thread_pool(self, n_threads)

    def test_the_threading(self, n_threads):
        r"""test_the_threading(molecules_container_t self, int n_threads) -> double"""
        return _coot_headless_api.molecules_container_t_test_the_threading(self, n_threads)

    def test_launching_threads(self, n_threads_per_batch, n_batches):
        r"""test_launching_threads(molecules_container_t self, unsigned int n_threads_per_batch, unsigned int n_batches) -> double"""
        return _coot_headless_api.molecules_container_t_test_launching_threads(self, n_threads_per_batch, n_batches)

    def test_thread_pool_threads(self, n_threads):
        r"""test_thread_pool_threads(molecules_container_t self, unsigned int n_threads) -> double"""
        return _coot_headless_api.molecules_container_t_test_thread_pool_threads(self, n_threads)

    def get_geometry(self):
        r"""get_geometry(molecules_container_t self) -> coot::protein_geometry &"""
        return _coot_headless_api.molecules_container_t_get_geometry(self)

    def make_mesh_for_map_contours_for_blender(self, imol, x, y, z, level, radius):
        r"""make_mesh_for_map_contours_for_blender(molecules_container_t self, int imol, float x, float y, float z, float level, float radius)"""
        return _coot_headless_api.molecules_container_t_make_mesh_for_map_contours_for_blender(self, imol, x, y, z, level, radius)

    def make_mesh_for_bonds_for_blender(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor):
        r"""make_mesh_for_bonds_for_blender(molecules_container_t self, int imol, std::string const & mode, bool against_a_dark_background, float bond_width, float atom_radius_to_bond_width_ratio, int smoothness_factor)"""
        return _coot_headless_api.molecules_container_t_make_mesh_for_bonds_for_blender(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor)

    def make_mesh_for_molecular_representation_for_blender(self, imol, cid, colour_scheme, style):
        r"""make_mesh_for_molecular_representation_for_blender(molecules_container_t self, int imol, std::string const & cid, std::string const & colour_scheme, std::string const & style)"""
        return _coot_headless_api.molecules_container_t_make_mesh_for_molecular_representation_for_blender(self, imol, cid, colour_scheme, style)

    def make_mesh_for_gaussian_surface_for_blender(self, imol, sigma, contour_level, box_radius, grid_scale, b_factor):
        r"""make_mesh_for_gaussian_surface_for_blender(molecules_container_t self, int imol, float sigma, float contour_level, float box_radius, float grid_scale, float b_factor)"""
        return _coot_headless_api.molecules_container_t_make_mesh_for_gaussian_surface_for_blender(self, imol, sigma, contour_level, box_radius, grid_scale, b_factor)

    def make_mesh_for_goodsell_style_for_blender(self, imol, colour_wheel_rotation_step, saturation, goodselliness):
        r"""make_mesh_for_goodsell_style_for_blender(molecules_container_t self, int imol, float colour_wheel_rotation_step, float saturation, float goodselliness)"""
        return _coot_headless_api.molecules_container_t_make_mesh_for_goodsell_style_for_blender(self, imol, colour_wheel_rotation_step, saturation, goodselliness)

    def get_colour_table_for_blender(self, imol):
        r"""get_colour_table_for_blender(molecules_container_t self, int imol) -> std::vector< float,std::allocator< float > >"""
        return _coot_headless_api.molecules_container_t_get_colour_table_for_blender(self, imol)

    def get_vertices_for_blender(self, imol):
        r"""get_vertices_for_blender(molecules_container_t self, int imol) -> std::vector< float,std::allocator< float > >"""
        return _coot_headless_api.molecules_container_t_get_vertices_for_blender(self, imol)

    def get_triangles_for_blender(self, imol):
        r"""get_triangles_for_blender(molecules_container_t self, int imol) -> IntVector"""
        return _coot_headless_api.molecules_container_t_get_triangles_for_blender(self, imol)
    UNKNOWN = _coot_headless_api.molecules_container_t_UNKNOWN
    
    SINGLE_COLOUR = _coot_headless_api.molecules_container_t_SINGLE_COLOUR
    
    MULTI_COLOUR = _coot_headless_api.molecules_container_t_MULTI_COLOUR
    

    def simple_mesh_to_pythonic_mesh(self, mesh, mesh_mode):
        r"""simple_mesh_to_pythonic_mesh(molecules_container_t self, coot::simple_mesh_t const & mesh, int mesh_mode) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_simple_mesh_to_pythonic_mesh(self, mesh, mesh_mode)

    def get_pythonic_bonds_mesh(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor):
        r"""get_pythonic_bonds_mesh(molecules_container_t self, int imol, std::string const & mode, bool against_a_dark_background, float bond_width, float atom_radius_to_bond_width_ratio, int smoothness_factor) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_get_pythonic_bonds_mesh(self, imol, mode, against_a_dark_background, bond_width, atom_radius_to_bond_width_ratio, smoothness_factor)

    def get_pythonic_map_mesh(self, imol, x, y, z, radius, contour_level):
        r"""get_pythonic_map_mesh(molecules_container_t self, int imol, float x, float y, float z, float radius, float contour_level) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_get_pythonic_map_mesh(self, imol, x, y, z, radius, contour_level)

    def get_pythonic_molecular_representation_mesh(self, imol, atom_selection, colour_sheme, style):
        r"""get_pythonic_molecular_representation_mesh(molecules_container_t self, int imol, std::string const & atom_selection, std::string const & colour_sheme, std::string const & style) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_get_pythonic_molecular_representation_mesh(self, imol, atom_selection, colour_sheme, style)

    def get_pythonic_gaussian_surface_mesh(self, imol, sigma, contour_level, box_radius, grid_scale, fft_b_factor):
        r"""get_pythonic_gaussian_surface_mesh(molecules_container_t self, int imol, float sigma, float contour_level, float box_radius, float grid_scale, float fft_b_factor) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_get_pythonic_gaussian_surface_mesh(self, imol, sigma, contour_level, box_radius, grid_scale, fft_b_factor)

    def get_pythonic_simple_molecule(self, imol, cid, include_hydrogen_atoms_flag):
        r"""get_pythonic_simple_molecule(molecules_container_t self, int imol, std::string const & cid, bool include_hydrogen_atoms_flag) -> PyObject *"""
        return _coot_headless_api.molecules_container_t_get_pythonic_simple_molecule(self, imol, cid, include_hydrogen_atoms_flag)

# Register molecules_container_t in _coot_headless_api:
_coot_headless_api.molecules_container_t_swigregister(molecules_container_t)

