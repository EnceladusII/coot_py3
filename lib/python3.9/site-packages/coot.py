# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coot
else:
    import _coot

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coot.delete_SwigPyIterator

    def value(self):
        return _coot.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _coot.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _coot.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _coot.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _coot.SwigPyIterator_equal(self, x)

    def copy(self):
        return _coot.SwigPyIterator_copy(self)

    def next(self):
        return _coot.SwigPyIterator_next(self)

    def __next__(self):
        return _coot.SwigPyIterator___next__(self)

    def previous(self):
        return _coot.SwigPyIterator_previous(self)

    def advance(self, n):
        return _coot.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _coot.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _coot.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _coot.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _coot.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _coot.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _coot.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _coot:
_coot.SwigPyIterator_swigregister(SwigPyIterator)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot.vector_string___nonzero__(self)

    def __bool__(self):
        return _coot.vector_string___bool__(self)

    def __len__(self):
        return _coot.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _coot.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot.vector_string___setitem__(self, *args)

    def pop(self):
        return _coot.vector_string_pop(self)

    def append(self, x):
        return _coot.vector_string_append(self, x)

    def empty(self):
        return _coot.vector_string_empty(self)

    def size(self):
        return _coot.vector_string_size(self)

    def swap(self, v):
        return _coot.vector_string_swap(self, v)

    def begin(self):
        return _coot.vector_string_begin(self)

    def end(self):
        return _coot.vector_string_end(self)

    def rbegin(self):
        return _coot.vector_string_rbegin(self)

    def rend(self):
        return _coot.vector_string_rend(self)

    def clear(self):
        return _coot.vector_string_clear(self)

    def get_allocator(self):
        return _coot.vector_string_get_allocator(self)

    def pop_back(self):
        return _coot.vector_string_pop_back(self)

    def erase(self, *args):
        return _coot.vector_string_erase(self, *args)

    def __init__(self, *args):
        _coot.vector_string_swiginit(self, _coot.new_vector_string(*args))

    def push_back(self, x):
        return _coot.vector_string_push_back(self, x)

    def front(self):
        return _coot.vector_string_front(self)

    def back(self):
        return _coot.vector_string_back(self)

    def assign(self, n, x):
        return _coot.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _coot.vector_string_resize(self, *args)

    def insert(self, *args):
        return _coot.vector_string_insert(self, *args)

    def reserve(self, n):
        return _coot.vector_string_reserve(self, n)

    def capacity(self):
        return _coot.vector_string_capacity(self)
    __swig_destroy__ = _coot.delete_vector_string

# Register vector_string in _coot:
_coot.vector_string_swigregister(vector_string)
class pairbf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _coot.pairbf_swiginit(self, _coot.new_pairbf(*args))
    first = property(_coot.pairbf_first_get, _coot.pairbf_first_set)
    second = property(_coot.pairbf_second_get, _coot.pairbf_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _coot.delete_pairbf

# Register pairbf in _coot:
_coot.pairbf_swigregister(pairbf)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot.IntVector___nonzero__(self)

    def __bool__(self):
        return _coot.IntVector___bool__(self)

    def __len__(self):
        return _coot.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _coot.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot.IntVector___setitem__(self, *args)

    def pop(self):
        return _coot.IntVector_pop(self)

    def append(self, x):
        return _coot.IntVector_append(self, x)

    def empty(self):
        return _coot.IntVector_empty(self)

    def size(self):
        return _coot.IntVector_size(self)

    def swap(self, v):
        return _coot.IntVector_swap(self, v)

    def begin(self):
        return _coot.IntVector_begin(self)

    def end(self):
        return _coot.IntVector_end(self)

    def rbegin(self):
        return _coot.IntVector_rbegin(self)

    def rend(self):
        return _coot.IntVector_rend(self)

    def clear(self):
        return _coot.IntVector_clear(self)

    def get_allocator(self):
        return _coot.IntVector_get_allocator(self)

    def pop_back(self):
        return _coot.IntVector_pop_back(self)

    def erase(self, *args):
        return _coot.IntVector_erase(self, *args)

    def __init__(self, *args):
        _coot.IntVector_swiginit(self, _coot.new_IntVector(*args))

    def push_back(self, x):
        return _coot.IntVector_push_back(self, x)

    def front(self):
        return _coot.IntVector_front(self)

    def back(self):
        return _coot.IntVector_back(self)

    def assign(self, n, x):
        return _coot.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _coot.IntVector_resize(self, *args)

    def insert(self, *args):
        return _coot.IntVector_insert(self, *args)

    def reserve(self, n):
        return _coot.IntVector_reserve(self, n)

    def capacity(self):
        return _coot.IntVector_capacity(self)
    __swig_destroy__ = _coot.delete_IntVector

# Register IntVector in _coot:
_coot.IntVector_swigregister(IntVector)
class vector_atom_spec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot.vector_atom_spec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot.vector_atom_spec___nonzero__(self)

    def __bool__(self):
        return _coot.vector_atom_spec___bool__(self)

    def __len__(self):
        return _coot.vector_atom_spec___len__(self)

    def __getslice__(self, i, j):
        return _coot.vector_atom_spec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot.vector_atom_spec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot.vector_atom_spec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot.vector_atom_spec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot.vector_atom_spec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot.vector_atom_spec___setitem__(self, *args)

    def pop(self):
        return _coot.vector_atom_spec_pop(self)

    def append(self, x):
        return _coot.vector_atom_spec_append(self, x)

    def empty(self):
        return _coot.vector_atom_spec_empty(self)

    def size(self):
        return _coot.vector_atom_spec_size(self)

    def swap(self, v):
        return _coot.vector_atom_spec_swap(self, v)

    def begin(self):
        return _coot.vector_atom_spec_begin(self)

    def end(self):
        return _coot.vector_atom_spec_end(self)

    def rbegin(self):
        return _coot.vector_atom_spec_rbegin(self)

    def rend(self):
        return _coot.vector_atom_spec_rend(self)

    def clear(self):
        return _coot.vector_atom_spec_clear(self)

    def get_allocator(self):
        return _coot.vector_atom_spec_get_allocator(self)

    def pop_back(self):
        return _coot.vector_atom_spec_pop_back(self)

    def erase(self, *args):
        return _coot.vector_atom_spec_erase(self, *args)

    def __init__(self, *args):
        _coot.vector_atom_spec_swiginit(self, _coot.new_vector_atom_spec(*args))

    def push_back(self, x):
        return _coot.vector_atom_spec_push_back(self, x)

    def front(self):
        return _coot.vector_atom_spec_front(self)

    def back(self):
        return _coot.vector_atom_spec_back(self)

    def assign(self, n, x):
        return _coot.vector_atom_spec_assign(self, n, x)

    def resize(self, *args):
        return _coot.vector_atom_spec_resize(self, *args)

    def insert(self, *args):
        return _coot.vector_atom_spec_insert(self, *args)

    def reserve(self, n):
        return _coot.vector_atom_spec_reserve(self, n)

    def capacity(self):
        return _coot.vector_atom_spec_capacity(self)
    __swig_destroy__ = _coot.delete_vector_atom_spec

# Register vector_atom_spec in _coot:
_coot.vector_atom_spec_swigregister(vector_atom_spec)
class vector_mtz_type_label(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _coot.vector_mtz_type_label_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coot.vector_mtz_type_label___nonzero__(self)

    def __bool__(self):
        return _coot.vector_mtz_type_label___bool__(self)

    def __len__(self):
        return _coot.vector_mtz_type_label___len__(self)

    def __getslice__(self, i, j):
        return _coot.vector_mtz_type_label___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coot.vector_mtz_type_label___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coot.vector_mtz_type_label___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coot.vector_mtz_type_label___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coot.vector_mtz_type_label___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coot.vector_mtz_type_label___setitem__(self, *args)

    def pop(self):
        return _coot.vector_mtz_type_label_pop(self)

    def append(self, x):
        return _coot.vector_mtz_type_label_append(self, x)

    def empty(self):
        return _coot.vector_mtz_type_label_empty(self)

    def size(self):
        return _coot.vector_mtz_type_label_size(self)

    def swap(self, v):
        return _coot.vector_mtz_type_label_swap(self, v)

    def begin(self):
        return _coot.vector_mtz_type_label_begin(self)

    def end(self):
        return _coot.vector_mtz_type_label_end(self)

    def rbegin(self):
        return _coot.vector_mtz_type_label_rbegin(self)

    def rend(self):
        return _coot.vector_mtz_type_label_rend(self)

    def clear(self):
        return _coot.vector_mtz_type_label_clear(self)

    def get_allocator(self):
        return _coot.vector_mtz_type_label_get_allocator(self)

    def pop_back(self):
        return _coot.vector_mtz_type_label_pop_back(self)

    def erase(self, *args):
        return _coot.vector_mtz_type_label_erase(self, *args)

    def __init__(self, *args):
        _coot.vector_mtz_type_label_swiginit(self, _coot.new_vector_mtz_type_label(*args))

    def push_back(self, x):
        return _coot.vector_mtz_type_label_push_back(self, x)

    def front(self):
        return _coot.vector_mtz_type_label_front(self)

    def back(self):
        return _coot.vector_mtz_type_label_back(self)

    def assign(self, n, x):
        return _coot.vector_mtz_type_label_assign(self, n, x)

    def resize(self, *args):
        return _coot.vector_mtz_type_label_resize(self, *args)

    def insert(self, *args):
        return _coot.vector_mtz_type_label_insert(self, *args)

    def reserve(self, n):
        return _coot.vector_mtz_type_label_reserve(self, n)

    def capacity(self):
        return _coot.vector_mtz_type_label_capacity(self)
    __swig_destroy__ = _coot.delete_vector_mtz_type_label

# Register vector_mtz_type_label in _coot:
_coot.vector_mtz_type_label_swigregister(vector_mtz_type_label)
COOT_SCHEME_DIR = _coot.COOT_SCHEME_DIR

COOT_PYTHON_DIR = _coot.COOT_PYTHON_DIR


def try_load_python_extras_dir():
    r"""try_load_python_extras_dir()"""
    return _coot.try_load_python_extras_dir()

def set_prefer_python():
    r"""set_prefer_python()"""
    return _coot.set_prefer_python()

def prefer_python():
    r"""prefer_python() -> int"""
    return _coot.prefer_python()

def make_directory_maybe(dir):
    r"""
    make_directory_maybe(char const * dir) -> int

    Parameters
    ----------
    dir: char const *

    """
    return _coot.make_directory_maybe(dir)

def set_show_paths_in_display_manager(i):
    r"""
    set_show_paths_in_display_manager(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_show_paths_in_display_manager(i)

def show_paths_in_display_manager_state():
    r"""show_paths_in_display_manager_state() -> int"""
    return _coot.show_paths_in_display_manager_state()

def add_coordinates_glob_extension(ext):
    r"""
    add_coordinates_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.add_coordinates_glob_extension(ext)

def add_data_glob_extension(ext):
    r"""
    add_data_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.add_data_glob_extension(ext)

def add_dictionary_glob_extension(ext):
    r"""
    add_dictionary_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.add_dictionary_glob_extension(ext)

def add_map_glob_extension(ext):
    r"""
    add_map_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.add_map_glob_extension(ext)

def remove_coordinates_glob_extension(ext):
    r"""
    remove_coordinates_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.remove_coordinates_glob_extension(ext)

def remove_data_glob_extension(ext):
    r"""
    remove_data_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.remove_data_glob_extension(ext)

def remove_dictionary_glob_extension(ext):
    r"""
    remove_dictionary_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.remove_dictionary_glob_extension(ext)

def remove_map_glob_extension(ext):
    r"""
    remove_map_glob_extension(char const * ext)

    Parameters
    ----------
    ext: char const *

    """
    return _coot.remove_map_glob_extension(ext)

def set_sticky_sort_by_date():
    r"""set_sticky_sort_by_date()"""
    return _coot.set_sticky_sort_by_date()

def unset_sticky_sort_by_date():
    r"""unset_sticky_sort_by_date()"""
    return _coot.unset_sticky_sort_by_date()

def set_filter_fileselection_filenames(istate):
    r"""
    set_filter_fileselection_filenames(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_filter_fileselection_filenames(istate)

def filter_fileselection_filenames_state():
    r"""filter_fileselection_filenames_state() -> int"""
    return _coot.filter_fileselection_filenames_state()

def file_type_coords(file_name):
    r"""
    file_type_coords(char const * file_name) -> short

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.file_type_coords(file_name)

def open_coords_dialog():
    r"""open_coords_dialog()"""
    return _coot.open_coords_dialog()

def set_file_chooser_selector(istate):
    r"""
    set_file_chooser_selector(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_file_chooser_selector(istate)

def file_chooser_selector_state():
    r"""file_chooser_selector_state() -> int"""
    return _coot.file_chooser_selector_state()

def set_file_chooser_overwrite(istate):
    r"""
    set_file_chooser_overwrite(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_file_chooser_overwrite(istate)

def file_chooser_overwrite_state():
    r"""file_chooser_overwrite_state() -> int"""
    return _coot.file_chooser_overwrite_state()

def export_map_gui(export_map_fragment):
    r"""
    export_map_gui(short export_map_fragment)

    Parameters
    ----------
    export_map_fragment: short

    """
    return _coot.export_map_gui(export_map_fragment)

def set_main_window_title(s):
    r"""
    set_main_window_title(char const * s)

    Parameters
    ----------
    s: char const *

    """
    return _coot.set_main_window_title(s)

def manage_column_selector(filename):
    r"""
    manage_column_selector(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.manage_column_selector(filename)

def chain_n_residues(chain_id, imol):
    r"""
    chain_n_residues(char const * chain_id, int imol) -> int

    Parameters
    ----------
    chain_id: char const *
    imol: int

    """
    return _coot.chain_n_residues(chain_id, imol)

def molecule_centre_internal(imol, iaxis):
    r"""
    molecule_centre_internal(int imol, int iaxis) -> float

    Parameters
    ----------
    imol: int
    iaxis: int

    """
    return _coot.molecule_centre_internal(imol, iaxis)

def seqnum_from_serial_number(imol, chain_id, serial_num):
    r"""
    seqnum_from_serial_number(int imol, char const * chain_id, int serial_num) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    serial_num: int

    """
    return _coot.seqnum_from_serial_number(imol, chain_id, serial_num)

def insertion_code_from_serial_number(imol, chain_id, serial_num):
    r"""
    insertion_code_from_serial_number(int imol, char const * chain_id, int serial_num) -> char *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    serial_num: int

    """
    return _coot.insertion_code_from_serial_number(imol, chain_id, serial_num)

def python_representation_kk(imol):
    r"""
    python_representation_kk(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.python_representation_kk(imol)

def chain_id_py(imol, ichain):
    r"""
    chain_id_py(int imol, int ichain) -> PyObject *

    Parameters
    ----------
    imol: int
    ichain: int

    """
    return _coot.chain_id_py(imol, ichain)

def n_models(imol):
    r"""
    n_models(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_models(imol)

def n_chains(imol):
    r"""
    n_chains(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_chains(imol)

def is_solvent_chain_p(imol, chain_id):
    r"""
    is_solvent_chain_p(int imol, char const * chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.is_solvent_chain_p(imol, chain_id)

def is_protein_chain_p(imol, chain_id):
    r"""
    is_protein_chain_p(int imol, char const * chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.is_protein_chain_p(imol, chain_id)

def is_nucleotide_chain_p(imol, chain_id):
    r"""
    is_nucleotide_chain_p(int imol, char const * chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.is_nucleotide_chain_p(imol, chain_id)

def n_residues(imol):
    r"""
    n_residues(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_residues(imol)

def n_atoms(imol):
    r"""
    n_atoms(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_atoms(imol)

def remarks_py(imol):
    r"""
    remarks_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.remarks_py(imol)

def residue_centre_py(imol, chain_id, resno, ins_code):
    r"""
    residue_centre_py(int imol, char const * chain_id, int resno, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.residue_centre_py(imol, chain_id, resno, ins_code)

def model_composition_statistics_py(imol):
    r"""
    model_composition_statistics_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.model_composition_statistics_py(imol)

def sort_chains(imol):
    r"""
    sort_chains(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.sort_chains(imol)

def sort_residues(imol):
    r"""
    sort_residues(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.sort_residues(imol)

def remarks_dialog(imol):
    r"""
    remarks_dialog(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.remarks_dialog(imol)

def print_header_secondary_structure_info(imol):
    r"""
    print_header_secondary_structure_info(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.print_header_secondary_structure_info(imol)

def add_header_secondary_structure_info(imol):
    r"""
    add_header_secondary_structure_info(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.add_header_secondary_structure_info(imol)

def write_header_secondary_structure_info(imol, file_name):
    r"""
    write_header_secondary_structure_info(int imol, char const * file_name)

    Parameters
    ----------
    imol: int
    file_name: char const *

    """
    return _coot.write_header_secondary_structure_info(imol, file_name)

def copy_molecule(imol):
    r"""
    copy_molecule(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.copy_molecule(imol)

def add_ligand_delete_residue_copy_molecule(imol_ligand_new, chain_id_ligand_new, resno_ligand_new, imol_current, chain_id_ligand_current, resno_ligand_current):
    r"""
    add_ligand_delete_residue_copy_molecule(int imol_ligand_new, char const * chain_id_ligand_new, int resno_ligand_new, int imol_current, char const * chain_id_ligand_current, int resno_ligand_current) -> int

    Parameters
    ----------
    imol_ligand_new: int
    chain_id_ligand_new: char const *
    resno_ligand_new: int
    imol_current: int
    chain_id_ligand_current: char const *
    resno_ligand_current: int

    """
    return _coot.add_ligand_delete_residue_copy_molecule(imol_ligand_new, chain_id_ligand_new, resno_ligand_new, imol_current, chain_id_ligand_current, resno_ligand_current)

def exchange_chain_ids_for_seg_ids(imol):
    r"""
    exchange_chain_ids_for_seg_ids(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.exchange_chain_ids_for_seg_ids(imol)

def show_remarks_browswer():
    r"""show_remarks_browswer()"""
    return _coot.show_remarks_browswer()

def coot_sys_build_type_py():
    r"""coot_sys_build_type_py() -> PyObject *"""
    return _coot.coot_sys_build_type_py()

def git_revision_count():
    r"""git_revision_count() -> int"""
    return _coot.git_revision_count()

def svn_revision():
    r"""svn_revision() -> int"""
    return _coot.svn_revision()

def molecule_name(imol):
    r"""
    molecule_name(int imol) -> char const *

    Parameters
    ----------
    imol: int

    """
    return _coot.molecule_name(imol)

def molecule_name_stub_py(imol, include_path_flag):
    r"""
    molecule_name_stub_py(int imol, int include_path_flag) -> PyObject *

    Parameters
    ----------
    imol: int
    include_path_flag: int

    """
    return _coot.molecule_name_stub_py(imol, include_path_flag)

def set_molecule_name(imol, new_name):
    r"""
    set_molecule_name(int imol, char const * new_name)

    Parameters
    ----------
    imol: int
    new_name: char const *

    """
    return _coot.set_molecule_name(imol, new_name)

def coot_checked_exit(retval):
    r"""
    coot_checked_exit(int retval) -> int

    Parameters
    ----------
    retval: int

    """
    return _coot.coot_checked_exit(retval)

def coot_real_exit(retval):
    r"""
    coot_real_exit(int retval)

    Parameters
    ----------
    retval: int

    """
    return _coot.coot_real_exit(retval)

def coot_no_state_real_exit(retval):
    r"""
    coot_no_state_real_exit(int retval)

    Parameters
    ----------
    retval: int

    """
    return _coot.coot_no_state_real_exit(retval)

def coot_clear_backup_or_real_exit(retval):
    r"""
    coot_clear_backup_or_real_exit(int retval)

    Parameters
    ----------
    retval: int

    """
    return _coot.coot_clear_backup_or_real_exit(retval)

def coot_save_state_and_exit(retval, save_state_flag):
    r"""
    coot_save_state_and_exit(int retval, int save_state_flag)

    Parameters
    ----------
    retval: int
    save_state_flag: int

    """
    return _coot.coot_save_state_and_exit(retval, save_state_flag)

def run_clear_backups_py(retval):
    r"""
    run_clear_backups_py(int retval)

    Parameters
    ----------
    retval: int

    """
    return _coot.run_clear_backups_py(retval)

def first_coords_imol():
    r"""first_coords_imol() -> int"""
    return _coot.first_coords_imol()

def first_small_coords_imol():
    r"""first_small_coords_imol() -> int"""
    return _coot.first_small_coords_imol()

def first_unsaved_coords_imol():
    r"""first_unsaved_coords_imol() -> int"""
    return _coot.first_unsaved_coords_imol()

def mmcif_sfs_to_mtz(cif_file_name, mtz_file_name):
    r"""
    mmcif_sfs_to_mtz(char const * cif_file_name, char const * mtz_file_name) -> int

    Parameters
    ----------
    cif_file_name: char const *
    mtz_file_name: char const *

    """
    return _coot.mmcif_sfs_to_mtz(cif_file_name, mtz_file_name)

def set_do_anti_aliasing(state):
    r"""
    set_do_anti_aliasing(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_do_anti_aliasing(state)

def do_anti_aliasing_state():
    r"""do_anti_aliasing_state() -> int"""
    return _coot.do_anti_aliasing_state()

def set_do_GL_lighting(state):
    r"""
    set_do_GL_lighting(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_do_GL_lighting(state)

def do_GL_lighting_state():
    r"""do_GL_lighting_state() -> int"""
    return _coot.do_GL_lighting_state()

def use_graphics_interface_state():
    r"""use_graphics_interface_state() -> short"""
    return _coot.use_graphics_interface_state()

def set_use_dark_mode(state):
    r"""
    set_use_dark_mode(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_dark_mode(state)

def python_at_prompt_at_startup_state():
    r"""python_at_prompt_at_startup_state() -> short"""
    return _coot.python_at_prompt_at_startup_state()

def reset_view():
    r"""reset_view() -> int"""
    return _coot.reset_view()

def get_number_of_molecules():
    r"""get_number_of_molecules() -> int"""
    return _coot.get_number_of_molecules()

def graphics_n_molecules():
    r"""graphics_n_molecules() -> int"""
    return _coot.graphics_n_molecules()

def molecule_has_hydrogens_raw(imol):
    r"""
    molecule_has_hydrogens_raw(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.molecule_has_hydrogens_raw(imol)

def own_molecule_number(imol):
    r"""
    own_molecule_number(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.own_molecule_number(imol)

def toggle_idle_spin_function():
    r"""toggle_idle_spin_function()"""
    return _coot.toggle_idle_spin_function()

def toggle_idle_rock_function():
    r"""toggle_idle_rock_function()"""
    return _coot.toggle_idle_rock_function()

def get_idle_function_rock_target_angle():
    r"""get_idle_function_rock_target_angle() -> double"""
    return _coot.get_idle_function_rock_target_angle()

def set_rocking_factors(width_scale, frequency_scale):
    r"""
    set_rocking_factors(float width_scale, float frequency_scale)

    Parameters
    ----------
    width_scale: float
    frequency_scale: float

    """
    return _coot.set_rocking_factors(width_scale, frequency_scale)

def set_idle_function_rotate_angle(f):
    r"""
    set_idle_function_rotate_angle(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_idle_function_rotate_angle(f)

def idle_function_rotate_angle():
    r"""idle_function_rotate_angle() -> float"""
    return _coot.idle_function_rotate_angle()

def make_updating_model_molecule(filename):
    r"""
    make_updating_model_molecule(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.make_updating_model_molecule(filename)

def show_calculate_updating_maps_pythonic_gui():
    r"""show_calculate_updating_maps_pythonic_gui()"""
    return _coot.show_calculate_updating_maps_pythonic_gui()

def allow_duplicate_sequence_numbers():
    r"""allow_duplicate_sequence_numbers()"""
    return _coot.allow_duplicate_sequence_numbers()

def set_convert_to_v2_atom_names(state):
    r"""
    set_convert_to_v2_atom_names(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_convert_to_v2_atom_names(state)

def get_input_molecule_was_in_mmcif_state_py(imol):
    r"""
    get_input_molecule_was_in_mmcif_state_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_input_molecule_was_in_mmcif_state_py(imol)

def assign_hetatms(imol):
    r"""
    assign_hetatms(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.assign_hetatms(imol)

def hetify_residue(imol, chain_id, resno, ins_code):
    r"""
    hetify_residue(int imol, char const * chain_id, int resno, char const * ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.hetify_residue(imol, chain_id, resno, ins_code)

def residue_has_hetatms(imol, chain_id, resno, ins_code):
    r"""
    residue_has_hetatms(int imol, char const * chain_id, int resno, char const * ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.residue_has_hetatms(imol, chain_id, resno, ins_code)

def het_group_residues_py(imol):
    r"""
    het_group_residues_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.het_group_residues_py(imol)

def het_group_n_atoms(comp_id):
    r"""
    het_group_n_atoms(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.het_group_n_atoms(comp_id)

def replace_fragment(imol_target, imol_fragment, atom_selection):
    r"""
    replace_fragment(int imol_target, int imol_fragment, char const * atom_selection) -> int

    Parameters
    ----------
    imol_target: int
    imol_fragment: int
    atom_selection: char const *

    """
    return _coot.replace_fragment(imol_target, imol_fragment, atom_selection)

def copy_residue_range(imol_target, chain_id_target, imol_reference, chain_id_reference, resno_range_start, resno_range_end):
    r"""
    copy_residue_range(int imol_target, char const * chain_id_target, int imol_reference, char const * chain_id_reference, int resno_range_start, int resno_range_end) -> int

    Parameters
    ----------
    imol_target: int
    chain_id_target: char const *
    imol_reference: int
    chain_id_reference: char const *
    resno_range_start: int
    resno_range_end: int

    """
    return _coot.copy_residue_range(imol_target, chain_id_target, imol_reference, chain_id_reference, resno_range_start, resno_range_end)

def replace_residues_from_mol_py(imol_target, imol_ref, residue_specs_list_ref_py):
    r"""
    replace_residues_from_mol_py(int imol_target, int imol_ref, PyObject * residue_specs_list_ref_py) -> int

    Parameters
    ----------
    imol_target: int
    imol_ref: int
    residue_specs_list_ref_py: PyObject *

    """
    return _coot.replace_residues_from_mol_py(imol_target, imol_ref, residue_specs_list_ref_py)

def clear_and_update_model_molecule_from_file(molecule_number, file_name):
    r"""
    clear_and_update_model_molecule_from_file(int molecule_number, char const * file_name) -> int

    Parameters
    ----------
    molecule_number: int
    file_name: char const *

    """
    return _coot.clear_and_update_model_molecule_from_file(molecule_number, file_name)

def screendump_image(filename):
    r"""
    screendump_image(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.screendump_image(filename)

def check_for_dark_blue_density():
    r"""check_for_dark_blue_density()"""
    return _coot.check_for_dark_blue_density()

def set_draw_solid_density_surface(imol, state):
    r"""
    set_draw_solid_density_surface(int imol, short state)

    Parameters
    ----------
    imol: int
    state: short

    """
    return _coot.set_draw_solid_density_surface(imol, state)

def set_draw_map_standard_lines(imol, state):
    r"""
    set_draw_map_standard_lines(int imol, short state)

    Parameters
    ----------
    imol: int
    state: short

    """
    return _coot.set_draw_map_standard_lines(imol, state)

def set_solid_density_surface_opacity(imol, opacity):
    r"""
    set_solid_density_surface_opacity(int imol, float opacity)

    Parameters
    ----------
    imol: int
    opacity: float

    """
    return _coot.set_solid_density_surface_opacity(imol, opacity)

def get_solid_density_surface_opacity(imol):
    r"""
    get_solid_density_surface_opacity(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_solid_density_surface_opacity(imol)

def set_flat_shading_for_solid_density_surface(state):
    r"""
    set_flat_shading_for_solid_density_surface(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_flat_shading_for_solid_density_surface(state)

def test_internal_py():
    r"""test_internal_py() -> PyObject *"""
    return _coot.test_internal_py()

def test_internal_single_py():
    r"""test_internal_single_py() -> PyObject *"""
    return _coot.test_internal_single_py()

def set_scroll_by_wheel_mouse(istate):
    r"""
    set_scroll_by_wheel_mouse(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_scroll_by_wheel_mouse(istate)

def scroll_by_wheel_mouse_state():
    r"""scroll_by_wheel_mouse_state() -> int"""
    return _coot.scroll_by_wheel_mouse_state()

def set_auto_recontour_map(state):
    r"""
    set_auto_recontour_map(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_auto_recontour_map(state)

def get_auto_recontour_map():
    r"""get_auto_recontour_map() -> int"""
    return _coot.get_auto_recontour_map()

def set_default_initial_contour_level_for_map(n_sigma):
    r"""
    set_default_initial_contour_level_for_map(float n_sigma)

    Parameters
    ----------
    n_sigma: float

    """
    return _coot.set_default_initial_contour_level_for_map(n_sigma)

def set_default_initial_contour_level_for_difference_map(n_sigma):
    r"""
    set_default_initial_contour_level_for_difference_map(float n_sigma)

    Parameters
    ----------
    n_sigma: float

    """
    return _coot.set_default_initial_contour_level_for_difference_map(n_sigma)

def print_view_matrix():
    r"""print_view_matrix()"""
    return _coot.print_view_matrix()

def get_view_matrix_element(row, col):
    r"""
    get_view_matrix_element(int row, int col) -> float

    Parameters
    ----------
    row: int
    col: int

    """
    return _coot.get_view_matrix_element(row, col)

def get_view_quaternion_internal(element):
    r"""
    get_view_quaternion_internal(int element) -> float

    Parameters
    ----------
    element: int

    """
    return _coot.get_view_quaternion_internal(element)

def set_view_quaternion(i, j, k, l):
    r"""
    set_view_quaternion(float i, float j, float k, float l)

    Parameters
    ----------
    i: float
    j: float
    k: float
    l: float

    """
    return _coot.set_view_quaternion(i, j, k, l)

def apply_ncs_to_view_orientation(imol, current_chain, next_ncs_chain):
    r"""
    apply_ncs_to_view_orientation(int imol, char const * current_chain, char const * next_ncs_chain)

    Parameters
    ----------
    imol: int
    current_chain: char const *
    next_ncs_chain: char const *

    """
    return _coot.apply_ncs_to_view_orientation(imol, current_chain, next_ncs_chain)

def apply_ncs_to_view_orientation_and_screen_centre(imol, current_chain, next_ncs_chain, forward_flag):
    r"""
    apply_ncs_to_view_orientation_and_screen_centre(int imol, char const * current_chain, char const * next_ncs_chain, short forward_flag)

    Parameters
    ----------
    imol: int
    current_chain: char const *
    next_ncs_chain: char const *
    forward_flag: short

    """
    return _coot.apply_ncs_to_view_orientation_and_screen_centre(imol, current_chain, next_ncs_chain, forward_flag)

def set_show_fps(t):
    r"""
    set_show_fps(int t)

    Parameters
    ----------
    t: int

    """
    return _coot.set_show_fps(t)

def set_fps_flag(t):
    r"""
    set_fps_flag(int t)

    Parameters
    ----------
    t: int

    """
    return _coot.set_fps_flag(t)

def get_fps_flag():
    r"""get_fps_flag() -> int"""
    return _coot.get_fps_flag()

def set_show_origin_marker(istate):
    r"""
    set_show_origin_marker(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_show_origin_marker(istate)

def show_origin_marker_state():
    r"""show_origin_marker_state() -> int"""
    return _coot.show_origin_marker_state()

def hide_main_toolbar():
    r"""hide_main_toolbar()"""
    return _coot.hide_main_toolbar()

def show_main_toolbar():
    r"""show_main_toolbar()"""
    return _coot.show_main_toolbar()

def suck_model_fit_dialog():
    r"""suck_model_fit_dialog() -> int"""
    return _coot.suck_model_fit_dialog()

def suck_model_fit_dialog_bl():
    r"""suck_model_fit_dialog_bl() -> int"""
    return _coot.suck_model_fit_dialog_bl()

def set_model_fit_refine_dialog_stays_on_top(istate):
    r"""
    set_model_fit_refine_dialog_stays_on_top(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_model_fit_refine_dialog_stays_on_top(istate)

def model_fit_refine_dialog_stays_on_top_state():
    r"""model_fit_refine_dialog_stays_on_top_state() -> int"""
    return _coot.model_fit_refine_dialog_stays_on_top_state()

def set_accept_reject_dialog_docked(state):
    r"""
    set_accept_reject_dialog_docked(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_accept_reject_dialog_docked(state)

def accept_reject_dialog_docked_state():
    r"""accept_reject_dialog_docked_state() -> int"""
    return _coot.accept_reject_dialog_docked_state()

def set_accept_reject_dialog_docked_show(state):
    r"""
    set_accept_reject_dialog_docked_show(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_accept_reject_dialog_docked_show(state)

def accept_reject_dialog_docked_show_state():
    r"""accept_reject_dialog_docked_show_state() -> int"""
    return _coot.accept_reject_dialog_docked_show_state()

def set_main_toolbar_style(state):
    r"""
    set_main_toolbar_style(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_main_toolbar_style(state)

def main_toolbar_style_state():
    r"""main_toolbar_style_state() -> int"""
    return _coot.main_toolbar_style_state()

def quanta_buttons():
    r"""quanta_buttons()"""
    return _coot.quanta_buttons()

def quanta_like_zoom():
    r"""quanta_like_zoom()"""
    return _coot.quanta_like_zoom()

def set_control_key_for_rotate(state):
    r"""
    set_control_key_for_rotate(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_control_key_for_rotate(state)

def control_key_for_rotate_state():
    r"""control_key_for_rotate_state() -> int"""
    return _coot.control_key_for_rotate_state()

def blob_under_pointer_to_screen_centre():
    r"""blob_under_pointer_to_screen_centre() -> int"""
    return _coot.blob_under_pointer_to_screen_centre()

def select_atom_under_pointer_py():
    r"""select_atom_under_pointer_py() -> PyObject *"""
    return _coot.select_atom_under_pointer_py()

def normal_cursor():
    r"""normal_cursor()"""
    return _coot.normal_cursor()

def fleur_cursor():
    r"""fleur_cursor()"""
    return _coot.fleur_cursor()

def pick_cursor_maybe():
    r"""pick_cursor_maybe()"""
    return _coot.pick_cursor_maybe()

def rotate_cursor():
    r"""rotate_cursor()"""
    return _coot.rotate_cursor()

def set_pick_cursor_index(icursor_index):
    r"""
    set_pick_cursor_index(int icursor_index)

    Parameters
    ----------
    icursor_index: int

    """
    return _coot.set_pick_cursor_index(icursor_index)

def show_select_map_dialog():
    r"""show_select_map_dialog()"""
    return _coot.show_select_map_dialog()

def set_model_fit_refine_rotate_translate_zone_label(txt):
    r"""
    set_model_fit_refine_rotate_translate_zone_label(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.set_model_fit_refine_rotate_translate_zone_label(txt)

def set_model_fit_refine_place_atom_at_pointer_label(txt):
    r"""
    set_model_fit_refine_place_atom_at_pointer_label(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.set_model_fit_refine_place_atom_at_pointer_label(txt)

def set_refinement_move_atoms_with_zero_occupancy(state):
    r"""
    set_refinement_move_atoms_with_zero_occupancy(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refinement_move_atoms_with_zero_occupancy(state)

def refinement_move_atoms_with_zero_occupancy_state():
    r"""refinement_move_atoms_with_zero_occupancy_state() -> int"""
    return _coot.refinement_move_atoms_with_zero_occupancy_state()

def make_backup(imol):
    r"""
    make_backup(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.make_backup(imol)

def turn_off_backup(imol):
    r"""
    turn_off_backup(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.turn_off_backup(imol)

def turn_on_backup(imol):
    r"""
    turn_on_backup(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.turn_on_backup(imol)

def backup_state(imol):
    r"""
    backup_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.backup_state(imol)

def apply_undo():
    r"""apply_undo() -> int"""
    return _coot.apply_undo()

def apply_redo():
    r"""apply_redo() -> int"""
    return _coot.apply_redo()

def set_have_unsaved_changes(imol):
    r"""
    set_have_unsaved_changes(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_have_unsaved_changes(imol)

def have_unsaved_changes_p(imol):
    r"""
    have_unsaved_changes_p(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.have_unsaved_changes_p(imol)

def set_undo_molecule(imol):
    r"""
    set_undo_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_undo_molecule(imol)

def show_set_undo_molecule_chooser():
    r"""show_set_undo_molecule_chooser()"""
    return _coot.show_set_undo_molecule_chooser()

def set_unpathed_backup_file_names(state):
    r"""
    set_unpathed_backup_file_names(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_unpathed_backup_file_names(state)

def unpathed_backup_file_names_state():
    r"""unpathed_backup_file_names_state() -> int"""
    return _coot.unpathed_backup_file_names_state()

def set_decoloned_backup_file_names(state):
    r"""
    set_decoloned_backup_file_names(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_decoloned_backup_file_names(state)

def decoloned_backup_file_names_state():
    r"""decoloned_backup_file_names_state() -> int"""
    return _coot.decoloned_backup_file_names_state()

def backup_compress_files_state():
    r"""backup_compress_files_state() -> int"""
    return _coot.backup_compress_files_state()

def set_backup_compress_files(state):
    r"""
    set_backup_compress_files(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_backup_compress_files(state)

def recover_session():
    r"""recover_session()"""
    return _coot.recover_session()

def calc_phases_generic(mtz_file_name):
    r"""
    calc_phases_generic(char const * mtz_file_name)

    Parameters
    ----------
    mtz_file_name: char const *

    """
    return _coot.calc_phases_generic(mtz_file_name)

def map_from_mtz_by_refmac_calc_phases(mtz_file_name, f_col, sigf_col, imol_coords):
    r"""
    map_from_mtz_by_refmac_calc_phases(char const * mtz_file_name, char const * f_col, char const * sigf_col, int imol_coords) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    sigf_col: char const *
    imol_coords: int

    """
    return _coot.map_from_mtz_by_refmac_calc_phases(mtz_file_name, f_col, sigf_col, imol_coords)

def map_from_mtz_by_calc_phases(mtz_file_name, f_col, sigf_col, imol_coords):
    r"""
    map_from_mtz_by_calc_phases(char const * mtz_file_name, char const * f_col, char const * sigf_col, int imol_coords) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    sigf_col: char const *
    imol_coords: int

    """
    return _coot.map_from_mtz_by_calc_phases(mtz_file_name, f_col, sigf_col, imol_coords)

def calculate_maps_and_stats_py(imol_model, imol_map_with_data_attached, imol_map_2fofc, imol_map_fofc):
    r"""
    calculate_maps_and_stats_py(int imol_model, int imol_map_with_data_attached, int imol_map_2fofc, int imol_map_fofc) -> PyObject *

    Parameters
    ----------
    imol_model: int
    imol_map_with_data_attached: int
    imol_map_2fofc: int
    imol_map_fofc: int

    """
    return _coot.calculate_maps_and_stats_py(imol_model, imol_map_with_data_attached, imol_map_2fofc, imol_map_fofc)

def sfcalc_genmap(imol_model, imol_map_with_data_attached, imol_updating_difference_map):
    r"""
    sfcalc_genmap(int imol_model, int imol_map_with_data_attached, int imol_updating_difference_map)

    Parameters
    ----------
    imol_model: int
    imol_map_with_data_attached: int
    imol_updating_difference_map: int

    """
    return _coot.sfcalc_genmap(imol_model, imol_map_with_data_attached, imol_updating_difference_map)

def set_auto_updating_sfcalc_genmap(imol_model, imol_map_with_data_attached, imol_updating_difference_map):
    r"""
    set_auto_updating_sfcalc_genmap(int imol_model, int imol_map_with_data_attached, int imol_updating_difference_map)

    Parameters
    ----------
    imol_model: int
    imol_map_with_data_attached: int
    imol_updating_difference_map: int

    """
    return _coot.set_auto_updating_sfcalc_genmap(imol_model, imol_map_with_data_attached, imol_updating_difference_map)

def set_auto_updating_sfcalc_genmaps(imol_model, imol_map_with_data_attached, imol_updating_2fofc_map, imol_updating_difference_map):
    r"""
    set_auto_updating_sfcalc_genmaps(int imol_model, int imol_map_with_data_attached, int imol_updating_2fofc_map, int imol_updating_difference_map)

    Parameters
    ----------
    imol_model: int
    imol_map_with_data_attached: int
    imol_updating_2fofc_map: int
    imol_updating_difference_map: int

    """
    return _coot.set_auto_updating_sfcalc_genmaps(imol_model, imol_map_with_data_attached, imol_updating_2fofc_map, imol_updating_difference_map)

def get_map_colour_py(imol):
    r"""
    get_map_colour_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_map_colour_py(imol)

def set_scroll_wheel_map(imap):
    r"""
    set_scroll_wheel_map(int imap)

    Parameters
    ----------
    imap: int

    """
    return _coot.set_scroll_wheel_map(imap)

def set_scrollable_map(imol):
    r"""
    set_scrollable_map(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_scrollable_map(imol)

def scroll_wheel_map():
    r"""scroll_wheel_map() -> int"""
    return _coot.scroll_wheel_map()

def save_previous_map_colour(imol):
    r"""
    save_previous_map_colour(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.save_previous_map_colour(imol)

def restore_previous_map_colour(imol):
    r"""
    restore_previous_map_colour(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.restore_previous_map_colour(imol)

def set_active_map_drag_flag(t):
    r"""
    set_active_map_drag_flag(int t)

    Parameters
    ----------
    t: int

    """
    return _coot.set_active_map_drag_flag(t)

def get_active_map_drag_flag():
    r"""get_active_map_drag_flag() -> short"""
    return _coot.get_active_map_drag_flag()

def set_last_map_colour(f1, f2, f3):
    r"""
    set_last_map_colour(double f1, double f2, double f3)

    Parameters
    ----------
    f1: double
    f2: double
    f3: double

    """
    return _coot.set_last_map_colour(f1, f2, f3)

def set_map_colour(imol, red, green, blue):
    r"""
    set_map_colour(int imol, float red, float green, float blue)

    Parameters
    ----------
    imol: int
    red: float
    green: float
    blue: float

    """
    return _coot.set_map_colour(imol, red, green, blue)

def set_map_hexcolour(imol, hex_colour):
    r"""
    set_map_hexcolour(int imol, char const * hex_colour)

    Parameters
    ----------
    imol: int
    hex_colour: char const *

    """
    return _coot.set_map_hexcolour(imol, hex_colour)

def set_contour_level_absolute(imol_map, level):
    r"""
    set_contour_level_absolute(int imol_map, float level)

    Parameters
    ----------
    imol_map: int
    level: float

    """
    return _coot.set_contour_level_absolute(imol_map, level)

def set_contour_level_in_sigma(imol_map, level):
    r"""
    set_contour_level_in_sigma(int imol_map, float level)

    Parameters
    ----------
    imol_map: int
    level: float

    """
    return _coot.set_contour_level_in_sigma(imol_map, level)

def get_contour_level_absolute(imol):
    r"""
    get_contour_level_absolute(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_contour_level_absolute(imol)

def get_contour_level_in_sigma(imol):
    r"""
    get_contour_level_in_sigma(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_contour_level_in_sigma(imol)

def set_last_map_sigma_step(f):
    r"""
    set_last_map_sigma_step(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_last_map_sigma_step(f)

def set_contour_by_sigma_step_by_mol(imol, f, state):
    r"""
    set_contour_by_sigma_step_by_mol(int imol, float f, short state)

    Parameters
    ----------
    imol: int
    f: float
    state: short

    """
    return _coot.set_contour_by_sigma_step_by_mol(imol, f, state)

def data_resolution(imol):
    r"""
    data_resolution(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.data_resolution(imol)

def model_resolution(imol):
    r"""
    model_resolution(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.model_resolution(imol)

def export_map(imol, filename):
    r"""
    export_map(int imol, char const * filename) -> int

    Parameters
    ----------
    imol: int
    filename: char const *

    """
    return _coot.export_map(imol, filename)

def export_map_fragment(imol, x, y, z, radius, filename):
    r"""
    export_map_fragment(int imol, float x, float y, float z, float radius, char const * filename) -> int

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float
    radius: float
    filename: char const *

    """
    return _coot.export_map_fragment(imol, x, y, z, radius, filename)

def export_map_fragment_with_text_radius(imol, radius_text, filename):
    r"""
    export_map_fragment_with_text_radius(int imol, char const * radius_text, char const * filename)

    Parameters
    ----------
    imol: int
    radius_text: char const *
    filename: char const *

    """
    return _coot.export_map_fragment_with_text_radius(imol, radius_text, filename)

def export_map_fragment_with_origin_shift(imol, x, y, z, radius, filename):
    r"""
    export_map_fragment_with_origin_shift(int imol, float x, float y, float z, float radius, char const * filename) -> int

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float
    radius: float
    filename: char const *

    """
    return _coot.export_map_fragment_with_origin_shift(imol, x, y, z, radius, filename)

def export_map_fragment_to_plain_file(imol, x, y, z, radius, filename):
    r"""
    export_map_fragment_to_plain_file(int imol, float x, float y, float z, float radius, char const * filename) -> int

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float
    radius: float
    filename: char const *

    """
    return _coot.export_map_fragment_to_plain_file(imol, x, y, z, radius, filename)

def transform_map_raw(imol, r00, r01, r02, r10, r11, r12, r20, r21, r22, t0, t1, t2, pt0, pt1, pt2, box_half_size, ref_space_group, cell_a, cell_b, cell_c, alpha, beta, gamma):
    r"""
    transform_map_raw(int imol, double r00, double r01, double r02, double r10, double r11, double r12, double r20, double r21, double r22, double t0, double t1, double t2, double pt0, double pt1, double pt2, double box_half_size, char const * ref_space_group, double cell_a, double cell_b, double cell_c, double alpha, double beta, double gamma) -> int

    Parameters
    ----------
    imol: int
    r00: double
    r01: double
    r02: double
    r10: double
    r11: double
    r12: double
    r20: double
    r21: double
    r22: double
    t0: double
    t1: double
    t2: double
    pt0: double
    pt1: double
    pt2: double
    box_half_size: double
    ref_space_group: char const *
    cell_a: double
    cell_b: double
    cell_c: double
    alpha: double
    beta: double
    gamma: double

    """
    return _coot.transform_map_raw(imol, r00, r01, r02, r10, r11, r12, r20, r21, r22, t0, t1, t2, pt0, pt1, pt2, box_half_size, ref_space_group, cell_a, cell_b, cell_c, alpha, beta, gamma)

def difference_map(imol1, imol2, map_scale):
    r"""
    difference_map(int imol1, int imol2, float map_scale) -> int

    Parameters
    ----------
    imol1: int
    imol2: int
    map_scale: float

    """
    return _coot.difference_map(imol1, imol2, map_scale)

def set_map_has_symmetry(imol, state):
    r"""
    set_map_has_symmetry(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_map_has_symmetry(imol, state)

def reinterp_map(map_no, reference_map_no):
    r"""
    reinterp_map(int map_no, int reference_map_no) -> int

    Parameters
    ----------
    map_no: int
    reference_map_no: int

    """
    return _coot.reinterp_map(map_no, reference_map_no)

def smooth_map(map_no, sampling_multiplier):
    r"""
    smooth_map(int map_no, float sampling_multiplier) -> int

    Parameters
    ----------
    map_no: int
    sampling_multiplier: float

    """
    return _coot.smooth_map(map_no, sampling_multiplier)

def average_map_py(map_number_and_scales):
    r"""
    average_map_py(PyObject * map_number_and_scales) -> int

    Parameters
    ----------
    map_number_and_scales: PyObject *

    """
    return _coot.average_map_py(map_number_and_scales)

def regen_map_py(imol_map, map_number_and_scales):
    r"""
    regen_map_py(int imol_map, PyObject * map_number_and_scales)

    Parameters
    ----------
    imol_map: int
    map_number_and_scales: PyObject *

    """
    return _coot.regen_map_py(imol_map, map_number_and_scales)

def get_text_for_iso_level_increment_entry(imol):
    r"""
    get_text_for_iso_level_increment_entry(int imol) -> char *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_text_for_iso_level_increment_entry(imol)

def get_text_for_diff_map_iso_level_increment_entry(imol):
    r"""
    get_text_for_diff_map_iso_level_increment_entry(int imol) -> char *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_text_for_diff_map_iso_level_increment_entry(imol)

def set_iso_level_increment(val):
    r"""
    set_iso_level_increment(float val)

    Parameters
    ----------
    val: float

    """
    return _coot.set_iso_level_increment(val)

def get_iso_level_increment():
    r"""get_iso_level_increment() -> float"""
    return _coot.get_iso_level_increment()

def set_iso_level_increment_from_text(text, imol):
    r"""
    set_iso_level_increment_from_text(char const * text, int imol)

    Parameters
    ----------
    text: char const *
    imol: int

    """
    return _coot.set_iso_level_increment_from_text(text, imol)

def set_diff_map_iso_level_increment(val):
    r"""
    set_diff_map_iso_level_increment(float val)

    Parameters
    ----------
    val: float

    """
    return _coot.set_diff_map_iso_level_increment(val)

def get_diff_map_iso_level_increment():
    r"""get_diff_map_iso_level_increment() -> float"""
    return _coot.get_diff_map_iso_level_increment()

def set_diff_map_iso_level_increment_from_text(text, imol):
    r"""
    set_diff_map_iso_level_increment_from_text(char const * text, int imol)

    Parameters
    ----------
    text: char const *
    imol: int

    """
    return _coot.set_diff_map_iso_level_increment_from_text(text, imol)

def set_map_sampling_rate_text(text):
    r"""
    set_map_sampling_rate_text(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.set_map_sampling_rate_text(text)

def set_map_sampling_rate(r):
    r"""
    set_map_sampling_rate(float r)

    Parameters
    ----------
    r: float

    """
    return _coot.set_map_sampling_rate(r)

def get_text_for_map_sampling_rate_text():
    r"""get_text_for_map_sampling_rate_text() -> char *"""
    return _coot.get_text_for_map_sampling_rate_text()

def get_map_sampling_rate():
    r"""get_map_sampling_rate() -> float"""
    return _coot.get_map_sampling_rate()

def change_contour_level(is_increment):
    r"""
    change_contour_level(short is_increment)

    Parameters
    ----------
    is_increment: short

    """
    return _coot.change_contour_level(is_increment)

def set_last_map_contour_level(level):
    r"""
    set_last_map_contour_level(float level)

    Parameters
    ----------
    level: float

    """
    return _coot.set_last_map_contour_level(level)

def set_last_map_contour_level_by_sigma(n_sigma):
    r"""
    set_last_map_contour_level_by_sigma(float n_sigma)

    Parameters
    ----------
    n_sigma: float

    """
    return _coot.set_last_map_contour_level_by_sigma(n_sigma)

def set_stop_scroll_diff_map(i):
    r"""
    set_stop_scroll_diff_map(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_stop_scroll_diff_map(i)

def set_stop_scroll_iso_map(i):
    r"""
    set_stop_scroll_iso_map(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_stop_scroll_iso_map(i)

def set_stop_scroll_iso_map_level(f):
    r"""
    set_stop_scroll_iso_map_level(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_stop_scroll_iso_map_level(f)

def set_stop_scroll_diff_map_level(f):
    r"""
    set_stop_scroll_diff_map_level(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_stop_scroll_diff_map_level(f)

def set_residue_density_fit_scale_factor(f):
    r"""
    set_residue_density_fit_scale_factor(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_residue_density_fit_scale_factor(f)

def set_map_line_width(w):
    r"""
    set_map_line_width(int w)

    Parameters
    ----------
    w: int

    """
    return _coot.set_map_line_width(w)

def map_line_width_state():
    r"""map_line_width_state() -> int"""
    return _coot.map_line_width_state()

def make_and_draw_map(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map):
    r"""
    make_and_draw_map(char const * mtz_file_name, char const * f_col, char const * phi_col, char const * weight, int use_weights, int is_diff_map) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    phi_col: char const *
    weight: char const *
    use_weights: int
    is_diff_map: int

    """
    return _coot.make_and_draw_map(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map)

def read_mtz(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map):
    r"""
    read_mtz(char const * mtz_file_name, char const * f_col, char const * phi_col, char const * weight, int use_weights, int is_diff_map) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    phi_col: char const *
    weight: char const *
    use_weights: int
    is_diff_map: int

    """
    return _coot.read_mtz(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map)

def make_and_draw_map_with_refmac_params(mtz_file_name, a, b, weight, use_weights, is_diff_map, have_refmac_params, fobs_col, sigfobs_col, r_free_col, sensible_f_free_col):
    r"""
    make_and_draw_map_with_refmac_params(char const * mtz_file_name, char const * a, char const * b, char const * weight, int use_weights, int is_diff_map, short have_refmac_params, char const * fobs_col, char const * sigfobs_col, char const * r_free_col, short sensible_f_free_col) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    a: char const *
    b: char const *
    weight: char const *
    use_weights: int
    is_diff_map: int
    have_refmac_params: short
    fobs_col: char const *
    sigfobs_col: char const *
    r_free_col: char const *
    sensible_f_free_col: short

    """
    return _coot.make_and_draw_map_with_refmac_params(mtz_file_name, a, b, weight, use_weights, is_diff_map, have_refmac_params, fobs_col, sigfobs_col, r_free_col, sensible_f_free_col)

def make_and_draw_map_with_reso_with_refmac_params(mtz_file_name, a, b, weight, use_weights, is_diff_map, have_refmac_params, fobs_col, sigfobs_col, r_free_col, sensible_f_free_col, is_anomalous, use_reso_limits, low_reso_limit, high_reso_lim):
    r"""
    make_and_draw_map_with_reso_with_refmac_params(char const * mtz_file_name, char const * a, char const * b, char const * weight, int use_weights, int is_diff_map, short have_refmac_params, char const * fobs_col, char const * sigfobs_col, char const * r_free_col, short sensible_f_free_col, short is_anomalous, short use_reso_limits, float low_reso_limit, float high_reso_lim) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    a: char const *
    b: char const *
    weight: char const *
    use_weights: int
    is_diff_map: int
    have_refmac_params: short
    fobs_col: char const *
    sigfobs_col: char const *
    r_free_col: char const *
    sensible_f_free_col: short
    is_anomalous: short
    use_reso_limits: short
    low_reso_limit: float
    high_reso_lim: float

    """
    return _coot.make_and_draw_map_with_reso_with_refmac_params(mtz_file_name, a, b, weight, use_weights, is_diff_map, have_refmac_params, fobs_col, sigfobs_col, r_free_col, sensible_f_free_col, is_anomalous, use_reso_limits, low_reso_limit, high_reso_lim)

def make_updating_map(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map):
    r"""
    make_updating_map(char const * mtz_file_name, char const * f_col, char const * phi_col, char const * weight, int use_weights, int is_diff_map) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    phi_col: char const *
    weight: char const *
    use_weights: int
    is_diff_map: int

    """
    return _coot.make_updating_map(mtz_file_name, f_col, phi_col, weight, use_weights, is_diff_map)

def stop_updating_molecule(imol):
    r"""
    stop_updating_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.stop_updating_molecule(imol)

def refmac_parameters_py(imol):
    r"""
    refmac_parameters_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.refmac_parameters_py(imol)

def mtz_file_has_phases_p(mtz_file_name):
    r"""
    mtz_file_has_phases_p(char const * mtz_file_name) -> int

    Parameters
    ----------
    mtz_file_name: char const *

    """
    return _coot.mtz_file_has_phases_p(mtz_file_name)

def is_mtz_file_p(filename):
    r"""
    is_mtz_file_p(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.is_mtz_file_p(filename)

def cns_file_has_phases_p(cns_file_name):
    r"""
    cns_file_has_phases_p(char const * cns_file_name) -> int

    Parameters
    ----------
    cns_file_name: char const *

    """
    return _coot.cns_file_has_phases_p(cns_file_name)

def wrapped_auto_read_make_and_draw_maps(filename):
    r"""
    wrapped_auto_read_make_and_draw_maps(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.wrapped_auto_read_make_and_draw_maps(filename)

def set_auto_read_do_difference_map_too(i):
    r"""
    set_auto_read_do_difference_map_too(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_auto_read_do_difference_map_too(i)

def auto_read_do_difference_map_too_state():
    r"""auto_read_do_difference_map_too_state() -> int"""
    return _coot.auto_read_do_difference_map_too_state()

def set_auto_read_column_labels(fwt, phwt, is_for_diff_map_flag):
    r"""
    set_auto_read_column_labels(char const * fwt, char const * phwt, int is_for_diff_map_flag)

    Parameters
    ----------
    fwt: char const *
    phwt: char const *
    is_for_diff_map_flag: int

    """
    return _coot.set_auto_read_column_labels(fwt, phwt, is_for_diff_map_flag)

def get_text_for_density_size_widget():
    r"""get_text_for_density_size_widget() -> char *"""
    return _coot.get_text_for_density_size_widget()

def set_density_size_from_widget(text):
    r"""
    set_density_size_from_widget(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.set_density_size_from_widget(text)

def get_text_for_density_size_em_widget():
    r"""get_text_for_density_size_em_widget() -> char *"""
    return _coot.get_text_for_density_size_em_widget()

def set_density_size_em_from_widget(text):
    r"""
    set_density_size_em_from_widget(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.set_density_size_em_from_widget(text)

def set_map_radius(f):
    r"""
    set_map_radius(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_map_radius(f)

def set_map_radius_em(radius):
    r"""
    set_map_radius_em(float radius)

    Parameters
    ----------
    radius: float

    """
    return _coot.set_map_radius_em(radius)

def set_density_size(f):
    r"""
    set_density_size(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_density_size(f)

def set_map_radius_slider_max(f):
    r"""
    set_map_radius_slider_max(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_map_radius_slider_max(f)

def set_display_intro_string(str):
    r"""
    set_display_intro_string(char const * str)

    Parameters
    ----------
    str: char const *

    """
    return _coot.set_display_intro_string(str)

def get_map_radius():
    r"""get_map_radius() -> float"""
    return _coot.get_map_radius()

def set_esoteric_depth_cue(istate):
    r"""
    set_esoteric_depth_cue(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_esoteric_depth_cue(istate)

def esoteric_depth_cue_state():
    r"""esoteric_depth_cue_state() -> int"""
    return _coot.esoteric_depth_cue_state()

def set_swap_difference_map_colours(i):
    r"""
    set_swap_difference_map_colours(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_swap_difference_map_colours(i)

def swap_difference_map_colours_state():
    r"""swap_difference_map_colours_state() -> int"""
    return _coot.swap_difference_map_colours_state()

def set_map_is_difference_map(imol, bool_flag):
    r"""
    set_map_is_difference_map(int imol, short bool_flag) -> int

    Parameters
    ----------
    imol: int
    bool_flag: short

    """
    return _coot.set_map_is_difference_map(imol, bool_flag)

def map_is_difference_map(imol):
    r"""
    map_is_difference_map(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.map_is_difference_map(imol)

def another_level():
    r"""another_level() -> int"""
    return _coot.another_level()

def another_level_from_map_molecule_number(imap):
    r"""
    another_level_from_map_molecule_number(int imap) -> int

    Parameters
    ----------
    imap: int

    """
    return _coot.another_level_from_map_molecule_number(imap)

def residue_density_fit_scale_factor():
    r"""residue_density_fit_scale_factor() -> float"""
    return _coot.residue_density_fit_scale_factor()

def density_at_point(imol_map, x, y, z):
    r"""
    density_at_point(int imol_map, float x, float y, float z) -> float

    Parameters
    ----------
    imol_map: int
    x: float
    y: float
    z: float

    """
    return _coot.density_at_point(imol_map, x, y, z)

def mtz_hklin_for_map(imol_map):
    r"""
    mtz_hklin_for_map(int imol_map) -> char const *

    Parameters
    ----------
    imol_map: int

    """
    return _coot.mtz_hklin_for_map(imol_map)

def mtz_fp_for_map(imol_map):
    r"""
    mtz_fp_for_map(int imol_map) -> char const *

    Parameters
    ----------
    imol_map: int

    """
    return _coot.mtz_fp_for_map(imol_map)

def mtz_phi_for_map(imol_map):
    r"""
    mtz_phi_for_map(int imol_map) -> char const *

    Parameters
    ----------
    imol_map: int

    """
    return _coot.mtz_phi_for_map(imol_map)

def mtz_weight_for_map(imol_map):
    r"""
    mtz_weight_for_map(int imol_map) -> char const *

    Parameters
    ----------
    imol_map: int

    """
    return _coot.mtz_weight_for_map(imol_map)

def mtz_use_weight_for_map(imol_map):
    r"""
    mtz_use_weight_for_map(int imol_map) -> short

    Parameters
    ----------
    imol_map: int

    """
    return _coot.mtz_use_weight_for_map(imol_map)

def map_parameters_py(imol):
    r"""
    map_parameters_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.map_parameters_py(imol)

def cell_py(imol):
    r"""
    cell_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.cell_py(imol)

def write_pdb_file(imol, file_name):
    r"""
    write_pdb_file(int imol, char const * file_name) -> int

    Parameters
    ----------
    imol: int
    file_name: char const *

    """
    return _coot.write_pdb_file(imol, file_name)

def write_cif_file(imol, file_name):
    r"""
    write_cif_file(int imol, char const * file_name) -> int

    Parameters
    ----------
    imol: int
    file_name: char const *

    """
    return _coot.write_cif_file(imol, file_name)

def write_residue_range_to_pdb_file(imol, chainid, resno_start, resno_end, filename):
    r"""
    write_residue_range_to_pdb_file(int imol, char const * chainid, int resno_start, int resno_end, char const * filename) -> int

    Parameters
    ----------
    imol: int
    chainid: char const *
    resno_start: int
    resno_end: int
    filename: char const *

    """
    return _coot.write_residue_range_to_pdb_file(imol, chainid, resno_start, resno_end, filename)

def write_chain_to_pdb_file(imol, chainid, filename):
    r"""
    write_chain_to_pdb_file(int imol, char const * chainid, char const * filename) -> int

    Parameters
    ----------
    imol: int
    chainid: char const *
    filename: char const *

    """
    return _coot.write_chain_to_pdb_file(imol, chainid, filename)

def quick_save():
    r"""quick_save() -> int"""
    return _coot.quick_save()

def get_write_conect_record_state():
    r"""get_write_conect_record_state() -> int"""
    return _coot.get_write_conect_record_state()

def set_write_conect_record_state(state):
    r"""
    set_write_conect_record_state(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_write_conect_record_state(state)

def info_dialog(txt):
    r"""
    info_dialog(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.info_dialog(txt)

def info_dialog_and_text(txt):
    r"""
    info_dialog_and_text(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.info_dialog_and_text(txt)

def info_dialog_with_markup(txt):
    r"""
    info_dialog_with_markup(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.info_dialog_with_markup(txt)

def set_refmac_counter(imol, refmac_count):
    r"""
    set_refmac_counter(int imol, int refmac_count)

    Parameters
    ----------
    imol: int
    refmac_count: int

    """
    return _coot.set_refmac_counter(imol, refmac_count)

def get_refmac_sad_atom_info_py():
    r"""get_refmac_sad_atom_info_py() -> PyObject *"""
    return _coot.get_refmac_sad_atom_info_py()

def swap_map_colours(imol1, imol2):
    r"""
    swap_map_colours(int imol1, int imol2)

    Parameters
    ----------
    imol1: int
    imol2: int

    """
    return _coot.swap_map_colours(imol1, imol2)

def set_keep_map_colour_after_refmac(istate):
    r"""
    set_keep_map_colour_after_refmac(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_keep_map_colour_after_refmac(istate)

def keep_map_colour_after_refmac_state():
    r"""keep_map_colour_after_refmac_state() -> int"""
    return _coot.keep_map_colour_after_refmac_state()

def refmac_runs_with_nolabels():
    r"""refmac_runs_with_nolabels() -> int"""
    return _coot.refmac_runs_with_nolabels()

def get_text_for_symmetry_size_widget():
    r"""get_text_for_symmetry_size_widget() -> char *"""
    return _coot.get_text_for_symmetry_size_widget()

def set_symmetry_size_from_widget(text):
    r"""
    set_symmetry_size_from_widget(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.set_symmetry_size_from_widget(text)

def set_symmetry_size(f):
    r"""
    set_symmetry_size(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_symmetry_size(f)

def get_symmetry_bonds_colour(imol):
    r"""
    get_symmetry_bonds_colour(int imol) -> double *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_symmetry_bonds_colour(imol)

def get_show_symmetry():
    r"""get_show_symmetry() -> short"""
    return _coot.get_show_symmetry()

def set_show_symmetry_master(state):
    r"""
    set_show_symmetry_master(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_show_symmetry_master(state)

def set_show_symmetry_molecule(mol_no, state):
    r"""
    set_show_symmetry_molecule(int mol_no, short state)

    Parameters
    ----------
    mol_no: int
    state: short

    """
    return _coot.set_show_symmetry_molecule(mol_no, state)

def symmetry_as_calphas(mol_no, state):
    r"""
    symmetry_as_calphas(int mol_no, short state)

    Parameters
    ----------
    mol_no: int
    state: short

    """
    return _coot.symmetry_as_calphas(mol_no, state)

def get_symmetry_as_calphas_state(imol):
    r"""
    get_symmetry_as_calphas_state(int imol) -> short

    Parameters
    ----------
    imol: int

    """
    return _coot.get_symmetry_as_calphas_state(imol)

def set_symmetry_molecule_rotate_colour_map(imol, state):
    r"""
    set_symmetry_molecule_rotate_colour_map(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_symmetry_molecule_rotate_colour_map(imol, state)

def symmetry_molecule_rotate_colour_map_state(imol):
    r"""
    symmetry_molecule_rotate_colour_map_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.symmetry_molecule_rotate_colour_map_state(imol)

def set_symmetry_colour_by_symop(imol, state):
    r"""
    set_symmetry_colour_by_symop(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_symmetry_colour_by_symop(imol, state)

def set_symmetry_whole_chain(imol, state):
    r"""
    set_symmetry_whole_chain(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_symmetry_whole_chain(imol, state)

def set_symmetry_atom_labels_expanded(state):
    r"""
    set_symmetry_atom_labels_expanded(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_symmetry_atom_labels_expanded(state)

def has_unit_cell_state(imol):
    r"""
    has_unit_cell_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.has_unit_cell_state(imol)

def add_symmetry_on_to_preferences_and_apply():
    r"""add_symmetry_on_to_preferences_and_apply()"""
    return _coot.add_symmetry_on_to_preferences_and_apply()

def undo_symmetry_view():
    r"""undo_symmetry_view() -> int"""
    return _coot.undo_symmetry_view()

def first_molecule_with_symmetry_displayed():
    r"""first_molecule_with_symmetry_displayed() -> int"""
    return _coot.first_molecule_with_symmetry_displayed()

def save_symmetry_coords(imol, filename, symop_no, shift_a, shift_b, shift_c, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc):
    r"""
    save_symmetry_coords(int imol, char const * filename, int symop_no, int shift_a, int shift_b, int shift_c, int pre_shift_to_origin_na, int pre_shift_to_origin_nb, int pre_shift_to_origin_nc)

    Parameters
    ----------
    imol: int
    filename: char const *
    symop_no: int
    shift_a: int
    shift_b: int
    shift_c: int
    pre_shift_to_origin_na: int
    pre_shift_to_origin_nb: int
    pre_shift_to_origin_nc: int

    """
    return _coot.save_symmetry_coords(imol, filename, symop_no, shift_a, shift_b, shift_c, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc)

def new_molecule_by_symmetry(imol, name, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc):
    r"""
    new_molecule_by_symmetry(int imol, char const * name, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33, double tx, double ty, double tz, int pre_shift_to_origin_na, int pre_shift_to_origin_nb, int pre_shift_to_origin_nc) -> int

    Parameters
    ----------
    imol: int
    name: char const *
    m11: double
    m12: double
    m13: double
    m21: double
    m22: double
    m23: double
    m31: double
    m32: double
    m33: double
    tx: double
    ty: double
    tz: double
    pre_shift_to_origin_na: int
    pre_shift_to_origin_nb: int
    pre_shift_to_origin_nc: int

    """
    return _coot.new_molecule_by_symmetry(imol, name, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc)

def new_molecule_by_symmetry_with_atom_selection(imol, name, mmdb_atom_selection_string, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc):
    r"""
    new_molecule_by_symmetry_with_atom_selection(int imol, char const * name, char const * mmdb_atom_selection_string, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33, double tx, double ty, double tz, int pre_shift_to_origin_na, int pre_shift_to_origin_nb, int pre_shift_to_origin_nc) -> int

    Parameters
    ----------
    imol: int
    name: char const *
    mmdb_atom_selection_string: char const *
    m11: double
    m12: double
    m13: double
    m21: double
    m22: double
    m23: double
    m31: double
    m32: double
    m33: double
    tx: double
    ty: double
    tz: double
    pre_shift_to_origin_na: int
    pre_shift_to_origin_nb: int
    pre_shift_to_origin_nc: int

    """
    return _coot.new_molecule_by_symmetry_with_atom_selection(imol, name, mmdb_atom_selection_string, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc)

def new_molecule_by_symop(imol, symop_string, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc):
    r"""
    new_molecule_by_symop(int imol, char const * symop_string, int pre_shift_to_origin_na, int pre_shift_to_origin_nb, int pre_shift_to_origin_nc) -> int

    Parameters
    ----------
    imol: int
    symop_string: char const *
    pre_shift_to_origin_na: int
    pre_shift_to_origin_nb: int
    pre_shift_to_origin_nc: int

    """
    return _coot.new_molecule_by_symop(imol, symop_string, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc)

def n_symops(imol):
    r"""
    n_symops(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_symops(imol)

def move_reference_chain_to_symm_chain_position():
    r"""move_reference_chain_to_symm_chain_position() -> int"""
    return _coot.move_reference_chain_to_symm_chain_position()

def origin_pre_shift_py(imol):
    r"""
    origin_pre_shift_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.origin_pre_shift_py(imol)

def setup_save_symmetry_coords():
    r"""setup_save_symmetry_coords()"""
    return _coot.setup_save_symmetry_coords()

def set_space_group(imol, spg):
    r"""
    set_space_group(int imol, char const * spg) -> short

    Parameters
    ----------
    imol: int
    spg: char const *

    """
    return _coot.set_space_group(imol, spg)

def set_unit_cell_and_space_group(imol, a, b, c, alpha, beta, gamma, space_group):
    r"""
    set_unit_cell_and_space_group(int imol, float a, float b, float c, float alpha, float beta, float gamma, char const * space_group) -> int

    Parameters
    ----------
    imol: int
    a: float
    b: float
    c: float
    alpha: float
    beta: float
    gamma: float
    space_group: char const *

    """
    return _coot.set_unit_cell_and_space_group(imol, a, b, c, alpha, beta, gamma, space_group)

def set_unit_cell_and_space_group_using_molecule(imol, imol_from):
    r"""
    set_unit_cell_and_space_group_using_molecule(int imol, int imol_from) -> int

    Parameters
    ----------
    imol: int
    imol_from: int

    """
    return _coot.set_unit_cell_and_space_group_using_molecule(imol, imol_from)

def set_symmetry_shift_search_size(shift):
    r"""
    set_symmetry_shift_search_size(int shift)

    Parameters
    ----------
    shift: int

    """
    return _coot.set_symmetry_shift_search_size(shift)

def save_coords_name_suggestion_py(imol):
    r"""
    save_coords_name_suggestion_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.save_coords_name_suggestion_py(imol)

def print_all_history_in_scheme():
    r"""print_all_history_in_scheme()"""
    return _coot.print_all_history_in_scheme()

def print_all_history_in_python():
    r"""print_all_history_in_python()"""
    return _coot.print_all_history_in_python()

def set_console_display_commands_state(istate):
    r"""
    set_console_display_commands_state(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_console_display_commands_state(istate)

def set_console_display_commands_hilights(bold_flag, colour_flag, colour_index):
    r"""
    set_console_display_commands_hilights(short bold_flag, short colour_flag, int colour_index)

    Parameters
    ----------
    bold_flag: short
    colour_flag: short
    colour_index: int

    """
    return _coot.set_console_display_commands_hilights(bold_flag, colour_flag, colour_index)

def save_state():
    r"""save_state()"""
    return _coot.save_state()

def save_state_file(filename):
    r"""
    save_state_file(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.save_state_file(filename)

def save_state_file_py(filename):
    r"""
    save_state_file_py(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.save_state_file_py(filename)

def set_save_state_file_name(filename):
    r"""
    set_save_state_file_name(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.set_save_state_file_name(filename)

def save_state_file_name_py():
    r"""save_state_file_name_py() -> PyObject *"""
    return _coot.save_state_file_name_py()

def save_state_file_name_raw():
    r"""save_state_file_name_raw() -> char const *"""
    return _coot.save_state_file_name_raw()

def set_run_state_file_status(istat):
    r"""
    set_run_state_file_status(short istat)

    Parameters
    ----------
    istat: short

    """
    return _coot.set_run_state_file_status(istat)

def run_state_file():
    r"""run_state_file()"""
    return _coot.run_state_file()

def run_state_file_py():
    r"""run_state_file_py()"""
    return _coot.run_state_file_py()

def run_state_file_maybe():
    r"""run_state_file_maybe()"""
    return _coot.run_state_file_maybe()
VT_FLAT = _coot.VT_FLAT

VT_SPHERICAL = _coot.VT_SPHERICAL


def vt_surface(mode):
    r"""
    vt_surface(int mode)

    Parameters
    ----------
    mode: int

    """
    return _coot.vt_surface(mode)

def vt_surface_status():
    r"""vt_surface_status() -> int"""
    return _coot.vt_surface_status()

def increase_clipping_front():
    r"""increase_clipping_front()"""
    return _coot.increase_clipping_front()

def increase_clipping_back():
    r"""increase_clipping_back()"""
    return _coot.increase_clipping_back()

def decrease_clipping_front():
    r"""decrease_clipping_front()"""
    return _coot.decrease_clipping_front()

def decrease_clipping_back():
    r"""decrease_clipping_back()"""
    return _coot.decrease_clipping_back()

def set_clipping_back(v):
    r"""
    set_clipping_back(float v)

    Parameters
    ----------
    v: float

    """
    return _coot.set_clipping_back(v)

def set_clipping_front(v):
    r"""
    set_clipping_front(float v)

    Parameters
    ----------
    v: float

    """
    return _coot.set_clipping_front(v)

def get_clipping_plane_front():
    r"""get_clipping_plane_front() -> float"""
    return _coot.get_clipping_plane_front()

def get_clipping_plane_back():
    r"""get_clipping_plane_back() -> float"""
    return _coot.get_clipping_plane_back()

def get_show_unit_cell(imol):
    r"""
    get_show_unit_cell(int imol) -> short

    Parameters
    ----------
    imol: int

    """
    return _coot.get_show_unit_cell(imol)

def set_show_unit_cells_all(istate):
    r"""
    set_show_unit_cells_all(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_show_unit_cells_all(istate)

def set_show_unit_cell(imol, istate):
    r"""
    set_show_unit_cell(int imol, short istate)

    Parameters
    ----------
    imol: int
    istate: short

    """
    return _coot.set_show_unit_cell(imol, istate)

def set_unit_cell_colour(red, green, blue):
    r"""
    set_unit_cell_colour(float red, float green, float blue)

    Parameters
    ----------
    red: float
    green: float
    blue: float

    """
    return _coot.set_unit_cell_colour(red, green, blue)

def set_symmetry_colour_merge(v):
    r"""
    set_symmetry_colour_merge(float v)

    Parameters
    ----------
    v: float

    """
    return _coot.set_symmetry_colour_merge(v)

def set_colour_map_rotation_on_read_pdb(f):
    r"""
    set_colour_map_rotation_on_read_pdb(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_colour_map_rotation_on_read_pdb(f)

def set_colour_map_rotation_on_read_pdb_flag(i):
    r"""
    set_colour_map_rotation_on_read_pdb_flag(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.set_colour_map_rotation_on_read_pdb_flag(i)

def set_colour_map_rotation_on_read_pdb_c_only_flag(i):
    r"""
    set_colour_map_rotation_on_read_pdb_c_only_flag(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.set_colour_map_rotation_on_read_pdb_c_only_flag(i)

def set_colour_by_chain(imol):
    r"""
    set_colour_by_chain(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_colour_by_chain(imol)

def set_colour_by_ncs_chain(imol, goodsell_mode):
    r"""
    set_colour_by_ncs_chain(int imol, short goodsell_mode)

    Parameters
    ----------
    imol: int
    goodsell_mode: short

    """
    return _coot.set_colour_by_ncs_chain(imol, goodsell_mode)

def set_colour_by_chain_goodsell_mode(imol):
    r"""
    set_colour_by_chain_goodsell_mode(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_colour_by_chain_goodsell_mode(imol)

def set_goodsell_chain_colour_wheel_step(s):
    r"""
    set_goodsell_chain_colour_wheel_step(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_goodsell_chain_colour_wheel_step(s)

def set_colour_by_molecule(imol):
    r"""
    set_colour_by_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_colour_by_molecule(imol)

def get_colour_map_rotation_on_read_pdb_c_only_flag():
    r"""get_colour_map_rotation_on_read_pdb_c_only_flag() -> int"""
    return _coot.get_colour_map_rotation_on_read_pdb_c_only_flag()

def set_symmetry_colour(r, g, b):
    r"""
    set_symmetry_colour(float r, float g, float b)

    Parameters
    ----------
    r: float
    g: float
    b: float

    """
    return _coot.set_symmetry_colour(r, g, b)

def set_colour_map_rotation_for_map(f):
    r"""
    set_colour_map_rotation_for_map(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_colour_map_rotation_for_map(f)

def set_molecule_bonds_colour_map_rotation(imol, theta):
    r"""
    set_molecule_bonds_colour_map_rotation(int imol, float theta)

    Parameters
    ----------
    imol: int
    theta: float

    """
    return _coot.set_molecule_bonds_colour_map_rotation(imol, theta)

def get_molecule_bonds_colour_map_rotation(imol):
    r"""
    get_molecule_bonds_colour_map_rotation(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_molecule_bonds_colour_map_rotation(imol)

def get_limit_aniso():
    r"""get_limit_aniso() -> float"""
    return _coot.get_limit_aniso()

def get_show_limit_aniso():
    r"""get_show_limit_aniso() -> short"""
    return _coot.get_show_limit_aniso()

def get_show_aniso():
    r"""get_show_aniso() -> short"""
    return _coot.get_show_aniso()

def set_limit_aniso(state):
    r"""
    set_limit_aniso(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_limit_aniso(state)

def set_aniso_limit_size_from_widget(text):
    r"""
    set_aniso_limit_size_from_widget(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.set_aniso_limit_size_from_widget(text)

def set_show_aniso(state):
    r"""
    set_show_aniso(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_aniso(state)

def get_text_for_aniso_limit_radius_entry():
    r"""get_text_for_aniso_limit_radius_entry() -> char *"""
    return _coot.get_text_for_aniso_limit_radius_entry()

def set_aniso_probability(f):
    r"""
    set_aniso_probability(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_aniso_probability(f)

def get_aniso_probability():
    r"""get_aniso_probability() -> float"""
    return _coot.get_aniso_probability()

def set_graphics_window_size(x_size, y_size):
    r"""
    set_graphics_window_size(int x_size, int y_size)

    Parameters
    ----------
    x_size: int
    y_size: int

    """
    return _coot.set_graphics_window_size(x_size, y_size)

def set_graphics_window_position(x_pos, y_pos):
    r"""
    set_graphics_window_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_graphics_window_position(x_pos, y_pos)

def store_graphics_window_position(x_pos, y_pos):
    r"""
    store_graphics_window_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.store_graphics_window_position(x_pos, y_pos)

def graphics_window_size_and_position_to_preferences():
    r"""graphics_window_size_and_position_to_preferences()"""
    return _coot.graphics_window_size_and_position_to_preferences()

def graphics_draw():
    r"""graphics_draw()"""
    return _coot.graphics_draw()

def zalman_stereo_mode():
    r"""zalman_stereo_mode()"""
    return _coot.zalman_stereo_mode()

def hardware_stereo_mode():
    r"""hardware_stereo_mode()"""
    return _coot.hardware_stereo_mode()

def set_stereo_style(mode):
    r"""
    set_stereo_style(int mode)

    Parameters
    ----------
    mode: int

    """
    return _coot.set_stereo_style(mode)

def stereo_mode_state():
    r"""stereo_mode_state() -> int"""
    return _coot.stereo_mode_state()

def mono_mode():
    r"""mono_mode()"""
    return _coot.mono_mode()

def side_by_side_stereo_mode(use_wall_eye_mode):
    r"""
    side_by_side_stereo_mode(short use_wall_eye_mode)

    Parameters
    ----------
    use_wall_eye_mode: short

    """
    return _coot.side_by_side_stereo_mode(use_wall_eye_mode)

def set_dti_stereo_mode(state):
    r"""
    set_dti_stereo_mode(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_dti_stereo_mode(state)

def set_hardware_stereo_angle_factor(f):
    r"""
    set_hardware_stereo_angle_factor(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_hardware_stereo_angle_factor(f)

def hardware_stereo_angle_factor_state():
    r"""hardware_stereo_angle_factor_state() -> float"""
    return _coot.hardware_stereo_angle_factor_state()

def set_model_display_radius(state, radius):
    r"""
    set_model_display_radius(int state, float radius)

    Parameters
    ----------
    state: int
    radius: float

    """
    return _coot.set_model_display_radius(state, radius)

def set_model_fit_refine_dialog_position(x_pos, y_pos):
    r"""
    set_model_fit_refine_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_model_fit_refine_dialog_position(x_pos, y_pos)

def set_display_control_dialog_position(x_pos, y_pos):
    r"""
    set_display_control_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_display_control_dialog_position(x_pos, y_pos)

def set_go_to_atom_window_position(x_pos, y_pos):
    r"""
    set_go_to_atom_window_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_go_to_atom_window_position(x_pos, y_pos)

def set_delete_dialog_position(x_pos, y_pos):
    r"""
    set_delete_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_delete_dialog_position(x_pos, y_pos)

def set_rotate_translate_dialog_position(x_pos, y_pos):
    r"""
    set_rotate_translate_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_rotate_translate_dialog_position(x_pos, y_pos)

def set_accept_reject_dialog_position(x_pos, y_pos):
    r"""
    set_accept_reject_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_accept_reject_dialog_position(x_pos, y_pos)

def set_ramachandran_plot_dialog_position(x_pos, y_pos):
    r"""
    set_ramachandran_plot_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_ramachandran_plot_dialog_position(x_pos, y_pos)

def set_edit_chi_angles_dialog_position(x_pos, y_pos):
    r"""
    set_edit_chi_angles_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_edit_chi_angles_dialog_position(x_pos, y_pos)

def set_rotamer_selection_dialog_position(x_pos, y_pos):
    r"""
    set_rotamer_selection_dialog_position(int x_pos, int y_pos)

    Parameters
    ----------
    x_pos: int
    y_pos: int

    """
    return _coot.set_rotamer_selection_dialog_position(x_pos, y_pos)

def set_smooth_scroll_flag(v):
    r"""
    set_smooth_scroll_flag(int v)

    Parameters
    ----------
    v: int

    """
    return _coot.set_smooth_scroll_flag(v)

def get_smooth_scroll():
    r"""get_smooth_scroll() -> int"""
    return _coot.get_smooth_scroll()

def set_smooth_scroll_steps_str(t):
    r"""
    set_smooth_scroll_steps_str(char const * t)

    Parameters
    ----------
    t: char const *

    """
    return _coot.set_smooth_scroll_steps_str(t)

def set_smooth_scroll_steps(i):
    r"""
    set_smooth_scroll_steps(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_smooth_scroll_steps(i)

def get_text_for_smooth_scroll_steps():
    r"""get_text_for_smooth_scroll_steps() -> char *"""
    return _coot.get_text_for_smooth_scroll_steps()

def set_smooth_scroll_limit_str(t):
    r"""
    set_smooth_scroll_limit_str(char const * t)

    Parameters
    ----------
    t: char const *

    """
    return _coot.set_smooth_scroll_limit_str(t)

def set_smooth_scroll_limit(lim):
    r"""
    set_smooth_scroll_limit(float lim)

    Parameters
    ----------
    lim: float

    """
    return _coot.set_smooth_scroll_limit(lim)

def get_text_for_smooth_scroll_limit():
    r"""get_text_for_smooth_scroll_limit() -> char *"""
    return _coot.get_text_for_smooth_scroll_limit()

def set_font_size(i):
    r"""
    set_font_size(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_font_size(i)

def get_font_size():
    r"""get_font_size() -> int"""
    return _coot.get_font_size()

def set_font_colour(red, green, blue):
    r"""
    set_font_colour(float red, float green, float blue)

    Parameters
    ----------
    red: float
    green: float
    blue: float

    """
    return _coot.set_font_colour(red, green, blue)

def set_use_stroke_characters(state):
    r"""
    set_use_stroke_characters(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_use_stroke_characters(state)

def set_rotation_centre_size_from_widget(text):
    r"""
    set_rotation_centre_size_from_widget(gchar const * text)

    Parameters
    ----------
    text: gchar const *

    """
    return _coot.set_rotation_centre_size_from_widget(text)

def get_text_for_rotation_centre_cube_size():
    r"""get_text_for_rotation_centre_cube_size() -> gchar *"""
    return _coot.get_text_for_rotation_centre_cube_size()

def set_rotation_centre_size(f):
    r"""
    set_rotation_centre_size(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_rotation_centre_size(f)

def recentre_on_read_pdb():
    r"""recentre_on_read_pdb() -> short"""
    return _coot.recentre_on_read_pdb()

def set_recentre_on_read_pdb(arg1):
    r"""
    set_recentre_on_read_pdb(short arg1)

    Parameters
    ----------
    arg1: short

    """
    return _coot.set_recentre_on_read_pdb(arg1)

def set_rotation_centre_internal(x, y, z):
    r"""
    set_rotation_centre_internal(float x, float y, float z)

    Parameters
    ----------
    x: float
    y: float
    z: float

    """
    return _coot.set_rotation_centre_internal(x, y, z)

def rotation_centre_position(axis):
    r"""
    rotation_centre_position(int axis) -> float

    Parameters
    ----------
    axis: int

    """
    return _coot.rotation_centre_position(axis)

def go_to_ligand():
    r"""go_to_ligand()"""
    return _coot.go_to_ligand()

def go_to_ligand_py():
    r"""go_to_ligand_py() -> PyObject *"""
    return _coot.go_to_ligand_py()

def set_go_to_ligand_n_atoms_limit(n_atom_min):
    r"""
    set_go_to_ligand_n_atoms_limit(int n_atom_min)

    Parameters
    ----------
    n_atom_min: int

    """
    return _coot.set_go_to_ligand_n_atoms_limit(n_atom_min)

def set_reorienting_next_residue_mode(state):
    r"""
    set_reorienting_next_residue_mode(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_reorienting_next_residue_mode(state)

def set_draw_axes(i):
    r"""
    set_draw_axes(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_draw_axes(i)

def atom_index(imol, chain_id, iresno, atom_id):
    r"""
    atom_index(int imol, char const * chain_id, int iresno, char const * atom_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    iresno: int
    atom_id: char const *

    """
    return _coot.atom_index(imol, chain_id, iresno, atom_id)

def atom_index_full(imol, chain_id, iresno, inscode, atom_id, altconf):
    r"""
    atom_index_full(int imol, char const * chain_id, int iresno, char const * inscode, char const * atom_id, char const * altconf) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    iresno: int
    inscode: char const *
    atom_id: char const *
    altconf: char const *

    """
    return _coot.atom_index_full(imol, chain_id, iresno, inscode, atom_id, altconf)

def atom_index_first_atom_in_residue(imol, chain_id, iresno, ins_code):
    r"""
    atom_index_first_atom_in_residue(int imol, char const * chain_id, int iresno, char const * ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    iresno: int
    ins_code: char const *

    """
    return _coot.atom_index_first_atom_in_residue(imol, chain_id, iresno, ins_code)

def atom_index_first_atom_in_residue_with_altconf(imol, chain_id, iresno, ins_code, alt_conf):
    r"""
    atom_index_first_atom_in_residue_with_altconf(int imol, char const * chain_id, int iresno, char const * ins_code, char const * alt_conf) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    iresno: int
    ins_code: char const *
    alt_conf: char const *

    """
    return _coot.atom_index_first_atom_in_residue_with_altconf(imol, chain_id, iresno, ins_code, alt_conf)

def min_resno_in_chain(imol, chain_id):
    r"""
    min_resno_in_chain(int imol, char const * chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.min_resno_in_chain(imol, chain_id)

def max_resno_in_chain(imol, chain_id):
    r"""
    max_resno_in_chain(int imol, char const * chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.max_resno_in_chain(imol, chain_id)

def median_temperature_factor(imol):
    r"""
    median_temperature_factor(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.median_temperature_factor(imol)

def average_temperature_factor(imol):
    r"""
    average_temperature_factor(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.average_temperature_factor(imol)

def standard_deviation_temperature_factor(imol):
    r"""
    standard_deviation_temperature_factor(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.standard_deviation_temperature_factor(imol)

def clear_pending_picks():
    r"""clear_pending_picks()"""
    return _coot.clear_pending_picks()

def centre_of_mass_string(imol):
    r"""
    centre_of_mass_string(int imol) -> char *

    Parameters
    ----------
    imol: int

    """
    return _coot.centre_of_mass_string(imol)

def centre_of_mass_string_py(imol):
    r"""
    centre_of_mass_string_py(int imol) -> char *

    Parameters
    ----------
    imol: int

    """
    return _coot.centre_of_mass_string_py(imol)

def set_default_temperature_factor_for_new_atoms(new_b):
    r"""
    set_default_temperature_factor_for_new_atoms(float new_b)

    Parameters
    ----------
    new_b: float

    """
    return _coot.set_default_temperature_factor_for_new_atoms(new_b)

def default_new_atoms_b_factor():
    r"""default_new_atoms_b_factor() -> float"""
    return _coot.default_new_atoms_b_factor()

def set_reset_b_factor_moved_atoms(state):
    r"""
    set_reset_b_factor_moved_atoms(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_reset_b_factor_moved_atoms(state)

def get_reset_b_factor_moved_atoms_state():
    r"""get_reset_b_factor_moved_atoms_state() -> int"""
    return _coot.get_reset_b_factor_moved_atoms_state()

def set_atom_attribute(imol, chain_id, resno, ins_code, atom_name, alt_conf, attribute_name, val):
    r"""
    set_atom_attribute(int imol, char const * chain_id, int resno, char const * ins_code, char const * atom_name, char const * alt_conf, char const * attribute_name, float val) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    atom_name: char const *
    alt_conf: char const *
    attribute_name: char const *
    val: float

    """
    return _coot.set_atom_attribute(imol, chain_id, resno, ins_code, atom_name, alt_conf, attribute_name, val)

def set_atom_string_attribute(imol, chain_id, resno, ins_code, atom_name, alt_conf, attribute_name, attribute_value):
    r"""
    set_atom_string_attribute(int imol, char const * chain_id, int resno, char const * ins_code, char const * atom_name, char const * alt_conf, char const * attribute_name, char const * attribute_value) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    atom_name: char const *
    alt_conf: char const *
    attribute_name: char const *
    attribute_value: char const *

    """
    return _coot.set_atom_string_attribute(imol, chain_id, resno, ins_code, atom_name, alt_conf, attribute_name, attribute_value)

def set_atom_attributes_py(attribute_expression_list):
    r"""
    set_atom_attributes_py(PyObject * attribute_expression_list) -> int

    Parameters
    ----------
    attribute_expression_list: PyObject *

    """
    return _coot.set_atom_attributes_py(attribute_expression_list)

def set_residue_name(imol, chain_id, res_no, ins_code, new_residue_name):
    r"""
    set_residue_name(int imol, char const * chain_id, int res_no, char const * ins_code, char const * new_residue_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    new_residue_name: char const *

    """
    return _coot.set_residue_name(imol, chain_id, res_no, ins_code, new_residue_name)

def skel_greer_on():
    r"""skel_greer_on()"""
    return _coot.skel_greer_on()

def skel_greer_off():
    r"""skel_greer_off()"""
    return _coot.skel_greer_off()

def skeletonize_map(imol, prune_flag):
    r"""
    skeletonize_map(int imol, short prune_flag) -> int

    Parameters
    ----------
    imol: int
    prune_flag: short

    """
    return _coot.skeletonize_map(imol, prune_flag)

def unskeletonize_map(imol):
    r"""
    unskeletonize_map(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.unskeletonize_map(imol)

def set_initial_map_for_skeletonize():
    r"""set_initial_map_for_skeletonize()"""
    return _coot.set_initial_map_for_skeletonize()

def set_max_skeleton_search_depth(v):
    r"""
    set_max_skeleton_search_depth(int v)

    Parameters
    ----------
    v: int

    """
    return _coot.set_max_skeleton_search_depth(v)

def get_text_for_skeletonization_level_entry():
    r"""get_text_for_skeletonization_level_entry() -> gchar *"""
    return _coot.get_text_for_skeletonization_level_entry()

def set_skeletonization_level_from_widget(txt):
    r"""
    set_skeletonization_level_from_widget(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.set_skeletonization_level_from_widget(txt)

def get_text_for_skeleton_box_size_entry():
    r"""get_text_for_skeleton_box_size_entry() -> gchar *"""
    return _coot.get_text_for_skeleton_box_size_entry()

def set_skeleton_box_size_from_widget(txt):
    r"""
    set_skeleton_box_size_from_widget(char const * txt)

    Parameters
    ----------
    txt: char const *

    """
    return _coot.set_skeleton_box_size_from_widget(txt)

def set_skeleton_box_size(f):
    r"""
    set_skeleton_box_size(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_skeleton_box_size(f)

def save_coordinates(imol, filename):
    r"""
    save_coordinates(int imol, char const * filename) -> int

    Parameters
    ----------
    imol: int
    filename: char const *

    """
    return _coot.save_coordinates(imol, filename)

def set_save_coordinates_in_original_directory(i):
    r"""
    set_save_coordinates_in_original_directory(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_save_coordinates_in_original_directory(i)

def save_molecule_number_from_option_menu():
    r"""save_molecule_number_from_option_menu() -> int"""
    return _coot.save_molecule_number_from_option_menu()

def set_save_molecule_number(imol):
    r"""
    set_save_molecule_number(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_save_molecule_number(imol)

def read_phs_and_coords_and_make_map(pdb_filename):
    r"""
    read_phs_and_coords_and_make_map(char const * pdb_filename)

    Parameters
    ----------
    pdb_filename: char const *

    """
    return _coot.read_phs_and_coords_and_make_map(pdb_filename)

def read_phs_and_make_map_using_cell_symm_from_previous_mol(phs_filename):
    r"""
    read_phs_and_make_map_using_cell_symm_from_previous_mol(char const * phs_filename) -> int

    Parameters
    ----------
    phs_filename: char const *

    """
    return _coot.read_phs_and_make_map_using_cell_symm_from_previous_mol(phs_filename)

def read_phs_and_make_map_using_cell_symm_from_mol(phs_filename, imol):
    r"""
    read_phs_and_make_map_using_cell_symm_from_mol(char const * phs_filename, int imol) -> int

    Parameters
    ----------
    phs_filename: char const *
    imol: int

    """
    return _coot.read_phs_and_make_map_using_cell_symm_from_mol(phs_filename, imol)

def read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(imol):
    r"""
    read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(imol)

def read_phs_and_make_map_using_cell_symm(phs_file_name, hm_spacegroup, a, b, c, alpha, beta, gamma):
    r"""
    read_phs_and_make_map_using_cell_symm(char const * phs_file_name, char const * hm_spacegroup, float a, float b, float c, float alpha, float beta, float gamma) -> int

    Parameters
    ----------
    phs_file_name: char const *
    hm_spacegroup: char const *
    a: float
    b: float
    c: float
    alpha: float
    beta: float
    gamma: float

    """
    return _coot.read_phs_and_make_map_using_cell_symm(phs_file_name, hm_spacegroup, a, b, c, alpha, beta, gamma)

def read_phs_and_make_map_with_reso_limits(imol, phs_file_name, reso_lim_low, reso_lim_high):
    r"""
    read_phs_and_make_map_with_reso_limits(int imol, char const * phs_file_name, float reso_lim_low, float reso_lim_high) -> int

    Parameters
    ----------
    imol: int
    phs_file_name: char const *
    reso_lim_low: float
    reso_lim_high: float

    """
    return _coot.read_phs_and_make_map_with_reso_limits(imol, phs_file_name, reso_lim_low, reso_lim_high)

def graphics_store_phs_filename(phs_filename):
    r"""
    graphics_store_phs_filename(gchar const * phs_filename)

    Parameters
    ----------
    phs_filename: gchar const *

    """
    return _coot.graphics_store_phs_filename(phs_filename)

def possible_cell_symm_for_phs_file():
    r"""possible_cell_symm_for_phs_file() -> short"""
    return _coot.possible_cell_symm_for_phs_file()

def get_text_for_phs_cell_chooser(imol, field):
    r"""
    get_text_for_phs_cell_chooser(int imol, char * field) -> gchar *

    Parameters
    ----------
    imol: int
    field: char *

    """
    return _coot.get_text_for_phs_cell_chooser(imol, field)

def undo_last_move():
    r"""undo_last_move()"""
    return _coot.undo_last_move()

def translate_molecule_by(imol, x, y, z):
    r"""
    translate_molecule_by(int imol, float x, float y, float z)

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float

    """
    return _coot.translate_molecule_by(imol, x, y, z)

def transform_molecule_by(imol, m11, m12, m13, m21, m22, m23, m31, m32, m33, x, y, z):
    r"""
    transform_molecule_by(int imol, float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float x, float y, float z)

    Parameters
    ----------
    imol: int
    m11: float
    m12: float
    m13: float
    m21: float
    m22: float
    m23: float
    m31: float
    m32: float
    m33: float
    x: float
    y: float
    z: float

    """
    return _coot.transform_molecule_by(imol, m11, m12, m13, m21, m22, m23, m31, m32, m33, x, y, z)

def transform_zone(imol, chain_id, resno_start, resno_end, ins_code, m11, m12, m13, m21, m22, m23, m31, m32, m33, x, y, z):
    r"""
    transform_zone(int imol, char const * chain_id, int resno_start, int resno_end, char const * ins_code, float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float x, float y, float z)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno_start: int
    resno_end: int
    ins_code: char const *
    m11: float
    m12: float
    m13: float
    m21: float
    m22: float
    m23: float
    m31: float
    m32: float
    m33: float
    x: float
    y: float
    z: float

    """
    return _coot.transform_zone(imol, chain_id, resno_start, resno_end, ins_code, m11, m12, m13, m21, m22, m23, m31, m32, m33, x, y, z)

def post_go_to_atom_window():
    r"""post_go_to_atom_window()"""
    return _coot.post_go_to_atom_window()

def go_to_atom_molecule_number():
    r"""go_to_atom_molecule_number() -> int"""
    return _coot.go_to_atom_molecule_number()

def go_to_atom_chain_id():
    r"""go_to_atom_chain_id() -> char *"""
    return _coot.go_to_atom_chain_id()

def go_to_atom_atom_name():
    r"""go_to_atom_atom_name() -> char *"""
    return _coot.go_to_atom_atom_name()

def go_to_atom_residue_number():
    r"""go_to_atom_residue_number() -> int"""
    return _coot.go_to_atom_residue_number()

def go_to_atom_ins_code():
    r"""go_to_atom_ins_code() -> char *"""
    return _coot.go_to_atom_ins_code()

def go_to_atom_alt_conf():
    r"""go_to_atom_alt_conf() -> char *"""
    return _coot.go_to_atom_alt_conf()

def set_go_to_atom_chain_residue_atom_name(t1_chain_id, iresno, t3_atom_name):
    r"""
    set_go_to_atom_chain_residue_atom_name(char const * t1_chain_id, int iresno, char const * t3_atom_name) -> int

    Parameters
    ----------
    t1_chain_id: char const *
    iresno: int
    t3_atom_name: char const *

    """
    return _coot.set_go_to_atom_chain_residue_atom_name(t1_chain_id, iresno, t3_atom_name)

def set_go_to_atom_chain_residue_atom_name_full(chain_id, resno, ins_code, atom_name, alt_conf):
    r"""
    set_go_to_atom_chain_residue_atom_name_full(char const * chain_id, int resno, char const * ins_code, char const * atom_name, char const * alt_conf) -> int

    Parameters
    ----------
    chain_id: char const *
    resno: int
    ins_code: char const *
    atom_name: char const *
    alt_conf: char const *

    """
    return _coot.set_go_to_atom_chain_residue_atom_name_full(chain_id, resno, ins_code, atom_name, alt_conf)

def set_go_to_atom_chain_residue_atom_name_no_redraw(t1, iresno, t3, make_the_move_flag):
    r"""
    set_go_to_atom_chain_residue_atom_name_no_redraw(char const * t1, int iresno, char const * t3, short make_the_move_flag) -> int

    Parameters
    ----------
    t1: char const *
    iresno: int
    t3: char const *
    make_the_move_flag: short

    """
    return _coot.set_go_to_atom_chain_residue_atom_name_no_redraw(t1, iresno, t3, make_the_move_flag)

def set_go_to_atom_chain_residue_atom_name_strings(t1, t2, txt):
    r"""
    set_go_to_atom_chain_residue_atom_name_strings(gchar const * t1, gchar const * t2, gchar const * txt) -> int

    Parameters
    ----------
    t1: gchar const *
    t2: gchar const *
    txt: gchar const *

    """
    return _coot.set_go_to_atom_chain_residue_atom_name_strings(t1, t2, txt)

def update_go_to_atom_from_current_position():
    r"""update_go_to_atom_from_current_position()"""
    return _coot.update_go_to_atom_from_current_position()

def update_go_to_atom_residue_list(imol):
    r"""
    update_go_to_atom_residue_list(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.update_go_to_atom_residue_list(imol)

def atom_spec_to_atom_index(mol, chain, resno, atom_name):
    r"""
    atom_spec_to_atom_index(int mol, char * chain, int resno, char * atom_name) -> int

    Parameters
    ----------
    mol: int
    chain: char *
    resno: int
    atom_name: char *

    """
    return _coot.atom_spec_to_atom_index(mol, chain, resno, atom_name)

def full_atom_spec_to_atom_index(imol, chain, resno, inscode, atom_name, altloc):
    r"""
    full_atom_spec_to_atom_index(int imol, char const * chain, int resno, char const * inscode, char const * atom_name, char const * altloc) -> int

    Parameters
    ----------
    imol: int
    chain: char const *
    resno: int
    inscode: char const *
    atom_name: char const *
    altloc: char const *

    """
    return _coot.full_atom_spec_to_atom_index(imol, chain, resno, inscode, atom_name, altloc)

def update_go_to_atom_window_on_changed_mol(imol):
    r"""
    update_go_to_atom_window_on_changed_mol(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.update_go_to_atom_window_on_changed_mol(imol)

def update_go_to_atom_window_on_new_mol():
    r"""update_go_to_atom_window_on_new_mol()"""
    return _coot.update_go_to_atom_window_on_new_mol()

def update_go_to_atom_window_on_other_molecule_chosen(imol):
    r"""
    update_go_to_atom_window_on_other_molecule_chosen(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.update_go_to_atom_window_on_other_molecule_chosen(imol)

def set_go_to_atom_molecule(imol):
    r"""
    set_go_to_atom_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_go_to_atom_molecule(imol)

def unset_go_to_atom_widget():
    r"""unset_go_to_atom_widget()"""
    return _coot.unset_go_to_atom_widget()

def autobuild_ca_off():
    r"""autobuild_ca_off()"""
    return _coot.autobuild_ca_off()

def test_fragment():
    r"""test_fragment()"""
    return _coot.test_fragment()

def do_skeleton_prune():
    r"""do_skeleton_prune()"""
    return _coot.do_skeleton_prune()

def test_function(i, j):
    r"""
    test_function(int i, int j) -> int

    Parameters
    ----------
    i: int
    j: int

    """
    return _coot.test_function(i, j)

def test_function_py(i, j):
    r"""
    test_function_py(PyObject * i, PyObject * j) -> PyObject *

    Parameters
    ----------
    i: PyObject *
    j: PyObject *

    """
    return _coot.test_function_py(i, j)

def glyco_tree_test():
    r"""glyco_tree_test()"""
    return _coot.glyco_tree_test()

def glyco_tree_py(imol, active_residue_py):
    r"""
    glyco_tree_py(int imol, PyObject * active_residue_py) -> PyObject *

    Parameters
    ----------
    imol: int
    active_residue_py: PyObject *

    """
    return _coot.glyco_tree_py(imol, active_residue_py)

def glyco_tree_residues_py(imol, active_residue_py):
    r"""
    glyco_tree_residues_py(int imol, PyObject * active_residue_py) -> PyObject *

    Parameters
    ----------
    imol: int
    active_residue_py: PyObject *

    """
    return _coot.glyco_tree_residues_py(imol, active_residue_py)

def glyco_tree_internal_distances_fn_py(imol, residue_spec, file_name):
    r"""
    glyco_tree_internal_distances_fn_py(int imol, PyObject * residue_spec, std::string const & file_name) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *
    file_name: std::string const &

    """
    return _coot.glyco_tree_internal_distances_fn_py(imol, residue_spec, file_name)

def glyco_tree_residue_id_py(imol, residue_spec_py):
    r"""
    glyco_tree_residue_id_py(int imol, PyObject * residue_spec_py) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *

    """
    return _coot.glyco_tree_residue_id_py(imol, residue_spec_py)

def glyco_tree_compare_trees_py(imol_1, res_spec_1, imol_2, res_spec_2):
    r"""
    glyco_tree_compare_trees_py(int imol_1, PyObject * res_spec_1, int imol_2, PyObject * res_spec_2) -> PyObject *

    Parameters
    ----------
    imol_1: int
    res_spec_1: PyObject *
    imol_2: int
    res_spec_2: PyObject *

    """
    return _coot.glyco_tree_compare_trees_py(imol_1, res_spec_1, imol_2, res_spec_2)

def glyco_tree_matched_residue_pairs_py(imol_1, res_spec_1, imol_2, res_spec_2):
    r"""
    glyco_tree_matched_residue_pairs_py(int imol_1, PyObject * res_spec_1, int imol_2, PyObject * res_spec_2) -> PyObject *

    Parameters
    ----------
    imol_1: int
    res_spec_1: PyObject *
    imol_2: int
    res_spec_2: PyObject *

    """
    return _coot.glyco_tree_matched_residue_pairs_py(imol_1, res_spec_1, imol_2, res_spec_2)

def post_display_control_window():
    r"""post_display_control_window()"""
    return _coot.post_display_control_window()

def add_map_display_control_widgets():
    r"""add_map_display_control_widgets()"""
    return _coot.add_map_display_control_widgets()

def add_mol_display_control_widgets():
    r"""add_mol_display_control_widgets()"""
    return _coot.add_mol_display_control_widgets()

def add_map_and_mol_display_control_widgets():
    r"""add_map_and_mol_display_control_widgets()"""
    return _coot.add_map_and_mol_display_control_widgets()

def reset_graphics_display_control_window():
    r"""reset_graphics_display_control_window()"""
    return _coot.reset_graphics_display_control_window()

def close_graphics_display_control_window():
    r"""close_graphics_display_control_window()"""
    return _coot.close_graphics_display_control_window()

def set_map_displayed(imol, state):
    r"""
    set_map_displayed(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_map_displayed(imol, state)

def set_mol_displayed(imol, state):
    r"""
    set_mol_displayed(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_mol_displayed(imol, state)

def set_display_only_model_mol(imol):
    r"""
    set_display_only_model_mol(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_display_only_model_mol(imol)

def set_mol_active(imol, state):
    r"""
    set_mol_active(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_mol_active(imol, state)

def display_maps_py(pyo):
    r"""
    display_maps_py(PyObject * pyo)

    Parameters
    ----------
    pyo: PyObject *

    """
    return _coot.display_maps_py(pyo)

def mol_is_displayed(imol):
    r"""
    mol_is_displayed(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.mol_is_displayed(imol)

def mol_is_active(imol):
    r"""
    mol_is_active(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.mol_is_active(imol)

def map_is_displayed(imol):
    r"""
    map_is_displayed(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.map_is_displayed(imol)

def set_all_maps_displayed(on_or_off):
    r"""
    set_all_maps_displayed(int on_or_off)

    Parameters
    ----------
    on_or_off: int

    """
    return _coot.set_all_maps_displayed(on_or_off)

def set_all_models_displayed_and_active(on_or_off):
    r"""
    set_all_models_displayed_and_active(int on_or_off)

    Parameters
    ----------
    on_or_off: int

    """
    return _coot.set_all_models_displayed_and_active(on_or_off)

def set_only_last_model_molecule_displayed():
    r"""set_only_last_model_molecule_displayed()"""
    return _coot.set_only_last_model_molecule_displayed()

def display_only_active():
    r"""display_only_active()"""
    return _coot.display_only_active()

def space_group_py(imol):
    r"""
    space_group_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.space_group_py(imol)

def show_spacegroup(imol):
    r"""
    show_spacegroup(int imol) -> char *

    Parameters
    ----------
    imol: int

    """
    return _coot.show_spacegroup(imol)

def symmetry_operators_py(imol):
    r"""
    symmetry_operators_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.symmetry_operators_py(imol)

def symmetry_operators_to_xHM_py(symmetry_operators):
    r"""
    symmetry_operators_to_xHM_py(PyObject * symmetry_operators) -> PyObject *

    Parameters
    ----------
    symmetry_operators: PyObject *

    """
    return _coot.symmetry_operators_to_xHM_py(symmetry_operators)

def merge_molecules_py(add_molecules, imol):
    r"""
    merge_molecules_py(PyObject * add_molecules, int imol) -> PyObject *

    Parameters
    ----------
    add_molecules: PyObject *
    imol: int

    """
    return _coot.merge_molecules_py(add_molecules, imol)

def set_merge_molecules_ligand_spec_py(ligand_spec_py):
    r"""
    set_merge_molecules_ligand_spec_py(PyObject * ligand_spec_py)

    Parameters
    ----------
    ligand_spec_py: PyObject *

    """
    return _coot.set_merge_molecules_ligand_spec_py(ligand_spec_py)

def align_and_mutate(imol, chain_id, fasta_maybe, renumber_residues_flag):
    r"""
    align_and_mutate(int imol, char const * chain_id, char const * fasta_maybe, short renumber_residues_flag)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    fasta_maybe: char const *
    renumber_residues_flag: short

    """
    return _coot.align_and_mutate(imol, chain_id, fasta_maybe, renumber_residues_flag)

def set_alignment_gap_and_space_penalty(wgap, wspace):
    r"""
    set_alignment_gap_and_space_penalty(float wgap, float wspace)

    Parameters
    ----------
    wgap: float
    wspace: float

    """
    return _coot.set_alignment_gap_and_space_penalty(wgap, wspace)

def alignment_results_py(imol, chain_id, seq):
    r"""
    alignment_results_py(int imol, char const * chain_id, char const * seq) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    seq: char const *

    """
    return _coot.alignment_results_py(imol, chain_id, seq)

def nearest_residue_by_sequence_py(imol, chain_id, resno, ins_code):
    r"""
    nearest_residue_by_sequence_py(int imol, char const * chain_id, int resno, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.nearest_residue_by_sequence_py(imol, chain_id, resno, ins_code)

def renumber_residue_range(imol, chain_id, start_res, last_res, offset):
    r"""
    renumber_residue_range(int imol, char const * chain_id, int start_res, int last_res, int offset) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    start_res: int
    last_res: int
    offset: int

    """
    return _coot.renumber_residue_range(imol, chain_id, start_res, last_res, offset)

def change_residue_number(imol, chain_id, current_resno, current_inscode, new_resno, new_inscode):
    r"""
    change_residue_number(int imol, char const * chain_id, int current_resno, char const * current_inscode, int new_resno, char const * new_inscode) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    current_resno: int
    current_inscode: char const *
    new_resno: int
    new_inscode: char const *

    """
    return _coot.change_residue_number(imol, chain_id, current_resno, current_inscode, new_resno, new_inscode)

def change_chain_id(imol, from_chain_id, to_chain_id, use_res_range_flag, from_resno, to_resno):
    r"""
    change_chain_id(int imol, char const * from_chain_id, char const * to_chain_id, short use_res_range_flag, int from_resno, int to_resno)

    Parameters
    ----------
    imol: int
    from_chain_id: char const *
    to_chain_id: char const *
    use_res_range_flag: short
    from_resno: int
    to_resno: int

    """
    return _coot.change_chain_id(imol, from_chain_id, to_chain_id, use_res_range_flag, from_resno, to_resno)

def change_chain_id_with_result_py(imol, from_chain_id, to_chain_id, use_res_range_flag, from_resno, to_resno):
    r"""
    change_chain_id_with_result_py(int imol, char const * from_chain_id, char const * to_chain_id, short use_res_range_flag, int from_resno, int to_resno) -> PyObject *

    Parameters
    ----------
    imol: int
    from_chain_id: char const *
    to_chain_id: char const *
    use_res_range_flag: short
    from_resno: int
    to_resno: int

    """
    return _coot.change_chain_id_with_result_py(imol, from_chain_id, to_chain_id, use_res_range_flag, from_resno, to_resno)

def probe_available_p():
    r"""probe_available_p() -> int"""
    return _coot.probe_available_p()

def probe_available_p_py():
    r"""probe_available_p_py() -> int"""
    return _coot.probe_available_p_py()

def post_scripting_window():
    r"""post_scripting_window()"""
    return _coot.post_scripting_window()

def post_scheme_scripting_window():
    r"""post_scheme_scripting_window()"""
    return _coot.post_scheme_scripting_window()

def run_command_line_scripts():
    r"""run_command_line_scripts()"""
    return _coot.run_command_line_scripts()

def set_guile_gui_loaded_flag():
    r"""set_guile_gui_loaded_flag()"""
    return _coot.set_guile_gui_loaded_flag()

def set_python_gui_loaded_flag():
    r"""set_python_gui_loaded_flag()"""
    return _coot.set_python_gui_loaded_flag()

def set_found_coot_gui():
    r"""set_found_coot_gui()"""
    return _coot.set_found_coot_gui()

def set_found_coot_python_gui():
    r"""set_found_coot_python_gui()"""
    return _coot.set_found_coot_python_gui()

def get_monomer_for_molecule_by_index(dict_idx, imol_enc):
    r"""
    get_monomer_for_molecule_by_index(int dict_idx, int imol_enc) -> int

    Parameters
    ----------
    dict_idx: int
    imol_enc: int

    """
    return _coot.get_monomer_for_molecule_by_index(dict_idx, imol_enc)

def run_script(filename):
    r"""
    run_script(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.run_script(filename)

def run_guile_script(filename):
    r"""
    run_guile_script(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.run_guile_script(filename)

def run_python_script(filename):
    r"""
    run_python_script(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.run_python_script(filename)

def import_python_module(module_name, use_namespace):
    r"""
    import_python_module(char const * module_name, int use_namespace) -> int

    Parameters
    ----------
    module_name: char const *
    use_namespace: int

    """
    return _coot.import_python_module(module_name, use_namespace)

def auto_load_dictionary(comp_id):
    r"""
    auto_load_dictionary(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.auto_load_dictionary(comp_id)

def reload_dictionary(comp_id):
    r"""
    reload_dictionary(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.reload_dictionary(comp_id)

def add_non_auto_load_residue_name(s):
    r"""
    add_non_auto_load_residue_name(char const * s)

    Parameters
    ----------
    s: char const *

    """
    return _coot.add_non_auto_load_residue_name(s)

def remove_non_auto_load_residue_name(s):
    r"""
    remove_non_auto_load_residue_name(char const * s)

    Parameters
    ----------
    s: char const *

    """
    return _coot.remove_non_auto_load_residue_name(s)

def matching_compound_names_from_dictionary_py(compound_name_fragment, allow_minimal_descriptions_flag):
    r"""
    matching_compound_names_from_dictionary_py(char const * compound_name_fragment, short allow_minimal_descriptions_flag) -> PyObject *

    Parameters
    ----------
    compound_name_fragment: char const *
    allow_minimal_descriptions_flag: short

    """
    return _coot.matching_compound_names_from_dictionary_py(compound_name_fragment, allow_minimal_descriptions_flag)

def comp_id_to_name_py(comp_id):
    r"""
    comp_id_to_name_py(char const * comp_id) -> PyObject *

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.comp_id_to_name_py(comp_id)

def do_regularize(state):
    r"""
    do_regularize(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_regularize(state)

def do_refine(state):
    r"""
    do_refine(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_refine(state)

def add_planar_peptide_restraints():
    r"""add_planar_peptide_restraints()"""
    return _coot.add_planar_peptide_restraints()

def remove_planar_peptide_restraints():
    r"""remove_planar_peptide_restraints()"""
    return _coot.remove_planar_peptide_restraints()

def make_tight_planar_peptide_restraints():
    r"""make_tight_planar_peptide_restraints()"""
    return _coot.make_tight_planar_peptide_restraints()

def planar_peptide_restraints_state():
    r"""planar_peptide_restraints_state() -> int"""
    return _coot.planar_peptide_restraints_state()

def set_use_trans_peptide_restraints(on_off_state):
    r"""
    set_use_trans_peptide_restraints(short on_off_state)

    Parameters
    ----------
    on_off_state: short

    """
    return _coot.set_use_trans_peptide_restraints(on_off_state)

def add_omega_torsion_restriants():
    r"""add_omega_torsion_restriants()"""
    return _coot.add_omega_torsion_restriants()

def remove_omega_torsion_restriants():
    r"""remove_omega_torsion_restriants()"""
    return _coot.remove_omega_torsion_restriants()

def set_refine_hydrogen_bonds(state):
    r"""
    set_refine_hydrogen_bonds(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refine_hydrogen_bonds(state)

def set_refinement_immediate_replacement(istate):
    r"""
    set_refinement_immediate_replacement(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_refinement_immediate_replacement(istate)

def refinement_immediate_replacement_state():
    r"""refinement_immediate_replacement_state() -> int"""
    return _coot.refinement_immediate_replacement_state()

def set_refine_use_noughties_physics(state):
    r"""
    set_refine_use_noughties_physics(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_refine_use_noughties_physics(state)

def set_residue_selection_flash_frames_number(i):
    r"""
    set_residue_selection_flash_frames_number(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_residue_selection_flash_frames_number(i)

def c_accept_moving_atoms():
    r"""c_accept_moving_atoms()"""
    return _coot.c_accept_moving_atoms()

def accept_regularizement():
    r"""accept_regularizement()"""
    return _coot.accept_regularizement()

def clear_up_moving_atoms():
    r"""clear_up_moving_atoms()"""
    return _coot.clear_up_moving_atoms()

def clear_moving_atoms_object():
    r"""clear_moving_atoms_object()"""
    return _coot.clear_moving_atoms_object()

def refinement_already_ongoing_p():
    r"""refinement_already_ongoing_p() -> short"""
    return _coot.refinement_already_ongoing_p()

def refine_residues_py(imol, r):
    r"""
    refine_residues_py(int imol, PyObject * r) -> PyObject *

    Parameters
    ----------
    imol: int
    r: PyObject *

    """
    return _coot.refine_residues_py(imol, r)

def refine_residues_with_modes_with_alt_conf_py(imol, r, alt_conf, mode_1, mode_2, mode_3):
    r"""
    refine_residues_with_modes_with_alt_conf_py(int imol, PyObject * r, char const * alt_conf, PyObject * mode_1, PyObject * mode_2, PyObject * mode_3) -> PyObject *

    Parameters
    ----------
    imol: int
    r: PyObject *
    alt_conf: char const *
    mode_1: PyObject *
    mode_2: PyObject *
    mode_3: PyObject *

    """
    return _coot.refine_residues_with_modes_with_alt_conf_py(imol, r, alt_conf, mode_1, mode_2, mode_3)

def refine_residues_with_alt_conf_py(imol, r, alt_conf):
    r"""
    refine_residues_with_alt_conf_py(int imol, PyObject * r, char const * alt_conf) -> PyObject *

    Parameters
    ----------
    imol: int
    r: PyObject *
    alt_conf: char const *

    """
    return _coot.refine_residues_with_alt_conf_py(imol, r, alt_conf)

def regularize_residues_py(imol, r):
    r"""
    regularize_residues_py(int imol, PyObject * r) -> PyObject *

    Parameters
    ----------
    imol: int
    r: PyObject *

    """
    return _coot.regularize_residues_py(imol, r)

def regularize_residues_with_alt_conf_py(imol, r, alt_conf):
    r"""
    regularize_residues_with_alt_conf_py(int imol, PyObject * r, char const * alt_conf) -> PyObject *

    Parameters
    ----------
    imol: int
    r: PyObject *
    alt_conf: char const *

    """
    return _coot.regularize_residues_with_alt_conf_py(imol, r, alt_conf)

def stop_refinement_internal():
    r"""stop_refinement_internal()"""
    return _coot.stop_refinement_internal()

def set_refinement_use_soft_mode_nbc_restraints(flag):
    r"""
    set_refinement_use_soft_mode_nbc_restraints(short flag)

    Parameters
    ----------
    flag: short

    """
    return _coot.set_refinement_use_soft_mode_nbc_restraints(flag)

def shiftfield_b_factor_refinement(imol):
    r"""
    shiftfield_b_factor_refinement(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.shiftfield_b_factor_refinement(imol)

def shiftfield_xyz_factor_refinement(imol):
    r"""
    shiftfield_xyz_factor_refinement(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.shiftfield_xyz_factor_refinement(imol)

def set_refine_with_torsion_restraints(istate):
    r"""
    set_refine_with_torsion_restraints(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_refine_with_torsion_restraints(istate)

def refine_with_torsion_restraints_state():
    r"""refine_with_torsion_restraints_state() -> int"""
    return _coot.refine_with_torsion_restraints_state()

def set_matrix(f):
    r"""
    set_matrix(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_matrix(f)

def matrix_state():
    r"""matrix_state() -> float"""
    return _coot.matrix_state()

def get_map_weight():
    r"""get_map_weight() -> float"""
    return _coot.get_map_weight()

def estimate_map_weight(imol_map):
    r"""
    estimate_map_weight(int imol_map) -> float

    Parameters
    ----------
    imol_map: int

    """
    return _coot.estimate_map_weight(imol_map)

def set_refine_auto_range_step(i):
    r"""
    set_refine_auto_range_step(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_refine_auto_range_step(i)

def set_refine_max_residues(n):
    r"""
    set_refine_max_residues(int n)

    Parameters
    ----------
    n: int

    """
    return _coot.set_refine_max_residues(n)

def refine_zone_atom_index_define(imol, ind1, ind2):
    r"""
    refine_zone_atom_index_define(int imol, int ind1, int ind2)

    Parameters
    ----------
    imol: int
    ind1: int
    ind2: int

    """
    return _coot.refine_zone_atom_index_define(imol, ind1, ind2)

def refine_zone(imol, chain_id, resno1, resno2, altconf):
    r"""
    refine_zone(int imol, char const * chain_id, int resno1, int resno2, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    resno2: int
    altconf: char const *

    """
    return _coot.refine_zone(imol, chain_id, resno1, resno2, altconf)

def repeat_refine_zone():
    r"""repeat_refine_zone()"""
    return _coot.repeat_refine_zone()

def refine_zone_with_score_py(imol, chain_id, resno1, resno2, altconf):
    r"""
    refine_zone_with_score_py(int imol, char const * chain_id, int resno1, int resno2, char const * altconf) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    resno2: int
    altconf: char const *

    """
    return _coot.refine_zone_with_score_py(imol, chain_id, resno1, resno2, altconf)

def regularize_zone_with_score_py(imol, chain_id, resno1, resno2, altconf):
    r"""
    regularize_zone_with_score_py(int imol, char const * chain_id, int resno1, int resno2, char const * altconf) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    resno2: int
    altconf: char const *

    """
    return _coot.regularize_zone_with_score_py(imol, chain_id, resno1, resno2, altconf)

def refine_auto_range(imol, chain_id, resno1, altconf):
    r"""
    refine_auto_range(int imol, char const * chain_id, int resno1, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    altconf: char const *

    """
    return _coot.refine_auto_range(imol, chain_id, resno1, altconf)

def regularize_zone(imol, chain_id, resno1, resno2, altconf):
    r"""
    regularize_zone(int imol, char const * chain_id, int resno1, int resno2, char const * altconf) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    resno2: int
    altconf: char const *

    """
    return _coot.regularize_zone(imol, chain_id, resno1, resno2, altconf)

def set_dragged_refinement_steps_per_frame(v):
    r"""
    set_dragged_refinement_steps_per_frame(int v)

    Parameters
    ----------
    v: int

    """
    return _coot.set_dragged_refinement_steps_per_frame(v)

def dragged_refinement_steps_per_frame():
    r"""dragged_refinement_steps_per_frame() -> int"""
    return _coot.dragged_refinement_steps_per_frame()

def set_refinement_refine_per_frame(istate):
    r"""
    set_refinement_refine_per_frame(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_refinement_refine_per_frame(istate)

def refinement_refine_per_frame_state():
    r"""refinement_refine_per_frame_state() -> int"""
    return _coot.refinement_refine_per_frame_state()

def set_refinement_drag_elasticity(e):
    r"""
    set_refinement_drag_elasticity(float e)

    Parameters
    ----------
    e: float

    """
    return _coot.set_refinement_drag_elasticity(e)

def set_refine_ramachandran_angles(state):
    r"""
    set_refine_ramachandran_angles(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refine_ramachandran_angles(state)

def set_refine_ramachandran_torsion_angles(state):
    r"""
    set_refine_ramachandran_torsion_angles(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refine_ramachandran_torsion_angles(state)

def set_refine_ramachandran_restraints_type(type):
    r"""
    set_refine_ramachandran_restraints_type(int type)

    Parameters
    ----------
    type: int

    """
    return _coot.set_refine_ramachandran_restraints_type(type)

def set_refine_ramachandran_restraints_weight(w):
    r"""
    set_refine_ramachandran_restraints_weight(float w)

    Parameters
    ----------
    w: float

    """
    return _coot.set_refine_ramachandran_restraints_weight(w)

def refine_ramachandran_restraints_weight():
    r"""refine_ramachandran_restraints_weight() -> float"""
    return _coot.refine_ramachandran_restraints_weight()

def set_torsion_restraints_weight(w):
    r"""
    set_torsion_restraints_weight(double w)

    Parameters
    ----------
    w: double

    """
    return _coot.set_torsion_restraints_weight(w)

def set_refine_rotamers(state):
    r"""
    set_refine_rotamers(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refine_rotamers(state)

def set_refinement_geman_mcclure_alpha_from_text(combobox_item_idx, t):
    r"""
    set_refinement_geman_mcclure_alpha_from_text(int combobox_item_idx, char const * t)

    Parameters
    ----------
    combobox_item_idx: int
    t: char const *

    """
    return _coot.set_refinement_geman_mcclure_alpha_from_text(combobox_item_idx, t)

def set_refinement_lennard_jones_epsilon_from_text(combobox_item_idx, t):
    r"""
    set_refinement_lennard_jones_epsilon_from_text(int combobox_item_idx, char const * t)

    Parameters
    ----------
    combobox_item_idx: int
    t: char const *

    """
    return _coot.set_refinement_lennard_jones_epsilon_from_text(combobox_item_idx, t)

def set_refinement_ramachandran_restraints_weight_from_text(combobox_item_idx, t):
    r"""
    set_refinement_ramachandran_restraints_weight_from_text(int combobox_item_idx, char const * t)

    Parameters
    ----------
    combobox_item_idx: int
    t: char const *

    """
    return _coot.set_refinement_ramachandran_restraints_weight_from_text(combobox_item_idx, t)

def set_refinement_overall_weight_from_text(t):
    r"""
    set_refinement_overall_weight_from_text(char const * t)

    Parameters
    ----------
    t: char const *

    """
    return _coot.set_refinement_overall_weight_from_text(t)

def set_refinement_torsion_weight_from_text(combobox_item_index, t):
    r"""
    set_refinement_torsion_weight_from_text(int combobox_item_index, char const * t)

    Parameters
    ----------
    combobox_item_index: int
    t: char const *

    """
    return _coot.set_refinement_torsion_weight_from_text(combobox_item_index, t)

def set_refine_params_dialog_more_control_frame_is_active(state):
    r"""
    set_refine_params_dialog_more_control_frame_is_active(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_refine_params_dialog_more_control_frame_is_active(state)

def refine_ramachandran_angles_state():
    r"""refine_ramachandran_angles_state() -> int"""
    return _coot.refine_ramachandran_angles_state()

def set_numerical_gradients(istate):
    r"""
    set_numerical_gradients(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_numerical_gradients(istate)

def set_debug_refinement(state):
    r"""
    set_debug_refinement(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_debug_refinement(state)

def set_fix_chiral_volumes_before_refinement(istate):
    r"""
    set_fix_chiral_volumes_before_refinement(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_fix_chiral_volumes_before_refinement(istate)

def check_chiral_volumes(imol):
    r"""
    check_chiral_volumes(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.check_chiral_volumes(imol)

def chiral_volume_errors_py(imol):
    r"""
    chiral_volume_errors_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.chiral_volume_errors_py(imol)

def set_show_chiral_volume_errors_dialog(istate):
    r"""
    set_show_chiral_volume_errors_dialog(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_show_chiral_volume_errors_dialog(istate)

def set_secondary_structure_restraints_type(itype):
    r"""
    set_secondary_structure_restraints_type(int itype)

    Parameters
    ----------
    itype: int

    """
    return _coot.set_secondary_structure_restraints_type(itype)

def secondary_structure_restraints_type():
    r"""secondary_structure_restraints_type() -> int"""
    return _coot.secondary_structure_restraints_type()

def imol_refinement_map():
    r"""imol_refinement_map() -> int"""
    return _coot.imol_refinement_map()

def set_imol_refinement_map(imol):
    r"""
    set_imol_refinement_map(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.set_imol_refinement_map(imol)

def does_residue_exist_p(imol, chain_id, resno, inscode):
    r"""
    does_residue_exist_p(int imol, char * chain_id, int resno, char * inscode) -> int

    Parameters
    ----------
    imol: int
    chain_id: char *
    resno: int
    inscode: char *

    """
    return _coot.does_residue_exist_p(imol, chain_id, resno, inscode)

def delete_restraints(comp_id):
    r"""
    delete_restraints(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.delete_restraints(comp_id)

def add_extra_bond_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, bond_dist, esd):
    r"""
    add_extra_bond_restraint(int imol, char const * chain_id_1, int res_no_1, char const * ins_code_1, char const * atom_name_1, char const * alt_conf_1, char const * chain_id_2, int res_no_2, char const * ins_code_2, char const * atom_name_2, char const * alt_conf_2, double bond_dist, double esd) -> int

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    res_no_1: int
    ins_code_1: char const *
    atom_name_1: char const *
    alt_conf_1: char const *
    chain_id_2: char const *
    res_no_2: int
    ins_code_2: char const *
    atom_name_2: char const *
    alt_conf_2: char const *
    bond_dist: double
    esd: double

    """
    return _coot.add_extra_bond_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, bond_dist, esd)

def add_extra_geman_mcclure_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, bond_dist, esd):
    r"""
    add_extra_geman_mcclure_restraint(int imol, char const * chain_id_1, int res_no_1, char const * ins_code_1, char const * atom_name_1, char const * alt_conf_1, char const * chain_id_2, int res_no_2, char const * ins_code_2, char const * atom_name_2, char const * alt_conf_2, double bond_dist, double esd) -> int

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    res_no_1: int
    ins_code_1: char const *
    atom_name_1: char const *
    alt_conf_1: char const *
    chain_id_2: char const *
    res_no_2: int
    ins_code_2: char const *
    atom_name_2: char const *
    alt_conf_2: char const *
    bond_dist: double
    esd: double

    """
    return _coot.add_extra_geman_mcclure_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, bond_dist, esd)

def add_extra_bond_restraints_py(imol, extra_bond_restraints_py):
    r"""
    add_extra_bond_restraints_py(int imol, PyObject * extra_bond_restraints_py) -> int

    Parameters
    ----------
    imol: int
    extra_bond_restraints_py: PyObject *

    """
    return _coot.add_extra_bond_restraints_py(imol, extra_bond_restraints_py)

def set_show_extra_distance_restraints(state):
    r"""
    set_show_extra_distance_restraints(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_show_extra_distance_restraints(state)

def add_extra_angle_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, chain_id_3, res_no_3, ins_code_3, atom_name_3, alt_conf_3, torsion_angle, esd):
    r"""
    add_extra_angle_restraint(int imol, char const * chain_id_1, int res_no_1, char const * ins_code_1, char const * atom_name_1, char const * alt_conf_1, char const * chain_id_2, int res_no_2, char const * ins_code_2, char const * atom_name_2, char const * alt_conf_2, char const * chain_id_3, int res_no_3, char const * ins_code_3, char const * atom_name_3, char const * alt_conf_3, double torsion_angle, double esd) -> int

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    res_no_1: int
    ins_code_1: char const *
    atom_name_1: char const *
    alt_conf_1: char const *
    chain_id_2: char const *
    res_no_2: int
    ins_code_2: char const *
    atom_name_2: char const *
    alt_conf_2: char const *
    chain_id_3: char const *
    res_no_3: int
    ins_code_3: char const *
    atom_name_3: char const *
    alt_conf_3: char const *
    torsion_angle: double
    esd: double

    """
    return _coot.add_extra_angle_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, chain_id_3, res_no_3, ins_code_3, atom_name_3, alt_conf_3, torsion_angle, esd)

def add_extra_torsion_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, chain_id_3, res_no_3, ins_code_3, atom_name_3, alt_conf_3, chain_id_4, res_no_4, ins_code_4, atom_name_4, alt_conf_4, torsion_angle, esd, period):
    r"""
    add_extra_torsion_restraint(int imol, char const * chain_id_1, int res_no_1, char const * ins_code_1, char const * atom_name_1, char const * alt_conf_1, char const * chain_id_2, int res_no_2, char const * ins_code_2, char const * atom_name_2, char const * alt_conf_2, char const * chain_id_3, int res_no_3, char const * ins_code_3, char const * atom_name_3, char const * alt_conf_3, char const * chain_id_4, int res_no_4, char const * ins_code_4, char const * atom_name_4, char const * alt_conf_4, double torsion_angle, double esd, int period) -> int

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    res_no_1: int
    ins_code_1: char const *
    atom_name_1: char const *
    alt_conf_1: char const *
    chain_id_2: char const *
    res_no_2: int
    ins_code_2: char const *
    atom_name_2: char const *
    alt_conf_2: char const *
    chain_id_3: char const *
    res_no_3: int
    ins_code_3: char const *
    atom_name_3: char const *
    alt_conf_3: char const *
    chain_id_4: char const *
    res_no_4: int
    ins_code_4: char const *
    atom_name_4: char const *
    alt_conf_4: char const *
    torsion_angle: double
    esd: double
    period: int

    """
    return _coot.add_extra_torsion_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, chain_id_2, res_no_2, ins_code_2, atom_name_2, alt_conf_2, chain_id_3, res_no_3, ins_code_3, atom_name_3, alt_conf_3, chain_id_4, res_no_4, ins_code_4, atom_name_4, alt_conf_4, torsion_angle, esd, period)

def add_extra_start_pos_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, esd):
    r"""
    add_extra_start_pos_restraint(int imol, char const * chain_id_1, int res_no_1, char const * ins_code_1, char const * atom_name_1, char const * alt_conf_1, double esd) -> int

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    res_no_1: int
    ins_code_1: char const *
    atom_name_1: char const *
    alt_conf_1: char const *
    esd: double

    """
    return _coot.add_extra_start_pos_restraint(imol, chain_id_1, res_no_1, ins_code_1, atom_name_1, alt_conf_1, esd)

def add_extra_target_position_restraint(imol, chain_id, res_no, ins_code, atom_name, alt_conf, x, y, z, weight):
    r"""
    add_extra_target_position_restraint(int imol, char const * chain_id, int res_no, char const * ins_code, char const * atom_name, char const * alt_conf, float x, float y, float z, float weight) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    atom_name: char const *
    alt_conf: char const *
    x: float
    y: float
    z: float
    weight: float

    """
    return _coot.add_extra_target_position_restraint(imol, chain_id, res_no, ins_code, atom_name, alt_conf, x, y, z, weight)

def delete_all_extra_restraints(imol):
    r"""
    delete_all_extra_restraints(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.delete_all_extra_restraints(imol)

def delete_extra_restraints_for_residue(imol, chain_id, res_no, ins_code):
    r"""
    delete_extra_restraints_for_residue(int imol, char const * chain_id, int res_no, char const * ins_code)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *

    """
    return _coot.delete_extra_restraints_for_residue(imol, chain_id, res_no, ins_code)

def delete_extra_restraints_for_residue_spec_py(imol, residue_spec_in_py):
    r"""
    delete_extra_restraints_for_residue_spec_py(int imol, PyObject * residue_spec_in_py)

    Parameters
    ----------
    imol: int
    residue_spec_in_py: PyObject *

    """
    return _coot.delete_extra_restraints_for_residue_spec_py(imol, residue_spec_in_py)

def delete_extra_restraints_worse_than(imol, n_sigma):
    r"""
    delete_extra_restraints_worse_than(int imol, float n_sigma)

    Parameters
    ----------
    imol: int
    n_sigma: float

    """
    return _coot.delete_extra_restraints_worse_than(imol, n_sigma)

def add_refmac_extra_restraints(imol, file_name):
    r"""
    add_refmac_extra_restraints(int imol, char const * file_name)

    Parameters
    ----------
    imol: int
    file_name: char const *

    """
    return _coot.add_refmac_extra_restraints(imol, file_name)

def set_show_extra_restraints(imol, state):
    r"""
    set_show_extra_restraints(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_show_extra_restraints(imol, state)

def extra_restraints_are_shown(imol):
    r"""
    extra_restraints_are_shown(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.extra_restraints_are_shown(imol)

def set_extra_restraints_prosmart_sigma_limits(imol, limit_high, limit_low):
    r"""
    set_extra_restraints_prosmart_sigma_limits(int imol, double limit_high, double limit_low)

    Parameters
    ----------
    imol: int
    limit_high: double
    limit_low: double

    """
    return _coot.set_extra_restraints_prosmart_sigma_limits(imol, limit_high, limit_low)

def generate_local_self_restraints(imol, chain_id, local_dist_max):
    r"""
    generate_local_self_restraints(int imol, char const * chain_id, float local_dist_max)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    local_dist_max: float

    """
    return _coot.generate_local_self_restraints(imol, chain_id, local_dist_max)

def generate_self_restraints(imol, local_dist_max):
    r"""
    generate_self_restraints(int imol, float local_dist_max)

    Parameters
    ----------
    imol: int
    local_dist_max: float

    """
    return _coot.generate_self_restraints(imol, local_dist_max)

def generate_local_self_restraints_by_residues_py(imol, residue_specs, local_dist_max):
    r"""
    generate_local_self_restraints_by_residues_py(int imol, PyObject * residue_specs, float local_dist_max)

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *
    local_dist_max: float

    """
    return _coot.generate_local_self_restraints_by_residues_py(imol, residue_specs, local_dist_max)

def write_interpolated_extra_restraints(imol_1, imol_2, n_steps, file_name_stub):
    r"""
    write_interpolated_extra_restraints(int imol_1, int imol_2, int n_steps, char * file_name_stub)

    Parameters
    ----------
    imol_1: int
    imol_2: int
    n_steps: int
    file_name_stub: char *

    """
    return _coot.write_interpolated_extra_restraints(imol_1, imol_2, n_steps, file_name_stub)

def write_interpolated_models_and_extra_restraints(imol_1, imol_2, n_steps, file_name_stub, interpolation_mode):
    r"""
    write_interpolated_models_and_extra_restraints(int imol_1, int imol_2, int n_steps, char * file_name_stub, int interpolation_mode)

    Parameters
    ----------
    imol_1: int
    imol_2: int
    n_steps: int
    file_name_stub: char *
    interpolation_mode: int

    """
    return _coot.write_interpolated_models_and_extra_restraints(imol_1, imol_2, n_steps, file_name_stub, interpolation_mode)

def set_show_parallel_plane_restraints(imol, state):
    r"""
    set_show_parallel_plane_restraints(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_show_parallel_plane_restraints(imol, state)

def parallel_plane_restraints_are_shown(imol):
    r"""
    parallel_plane_restraints_are_shown(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.parallel_plane_restraints_are_shown(imol)

def add_parallel_plane_restraint(imol, chain_id_1, re_no_1, ins_code_1, chain_id_2, re_no_2, ins_code_2):
    r"""
    add_parallel_plane_restraint(int imol, char const * chain_id_1, int re_no_1, char const * ins_code_1, char const * chain_id_2, int re_no_2, char const * ins_code_2)

    Parameters
    ----------
    imol: int
    chain_id_1: char const *
    re_no_1: int
    ins_code_1: char const *
    chain_id_2: char const *
    re_no_2: int
    ins_code_2: char const *

    """
    return _coot.add_parallel_plane_restraint(imol, chain_id_1, re_no_1, ins_code_1, chain_id_2, re_no_2, ins_code_2)

def set_extra_restraints_representation_for_bonds_go_to_CA(imol, state):
    r"""
    set_extra_restraints_representation_for_bonds_go_to_CA(int imol, short state)

    Parameters
    ----------
    imol: int
    state: short

    """
    return _coot.set_extra_restraints_representation_for_bonds_go_to_CA(imol, state)

def delete_extra_restraint_py(imol, restraint_spec):
    r"""
    delete_extra_restraint_py(int imol, PyObject * restraint_spec)

    Parameters
    ----------
    imol: int
    restraint_spec: PyObject *

    """
    return _coot.delete_extra_restraint_py(imol, restraint_spec)

def list_extra_restraints_py(imol):
    r"""
    list_extra_restraints_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.list_extra_restraints_py(imol)

def set_use_only_extra_torsion_restraints_for_torsions(state):
    r"""
    set_use_only_extra_torsion_restraints_for_torsions(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_only_extra_torsion_restraints_for_torsions(state)

def use_only_extra_torsion_restraints_for_torsions_state():
    r"""use_only_extra_torsion_restraints_for_torsions_state() -> int"""
    return _coot.use_only_extra_torsion_restraints_for_torsions_state()

def clear_all_atom_pull_restraints():
    r"""clear_all_atom_pull_restraints()"""
    return _coot.clear_all_atom_pull_restraints()

def set_auto_clear_atom_pull_restraint(state):
    r"""
    set_auto_clear_atom_pull_restraint(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_auto_clear_atom_pull_restraint(state)

def get_auto_clear_atom_pull_restraint_state():
    r"""get_auto_clear_atom_pull_restraint_state() -> int"""
    return _coot.get_auto_clear_atom_pull_restraint_state()

def increase_proportional_editing_radius():
    r"""increase_proportional_editing_radius()"""
    return _coot.increase_proportional_editing_radius()

def decrease_proportional_editing_radius():
    r"""decrease_proportional_editing_radius()"""
    return _coot.decrease_proportional_editing_radius()

def fit_residue_range_to_map_by_simplex(res1, res2, altloc, chain_id, imol, imol_for_map):
    r"""
    fit_residue_range_to_map_by_simplex(int res1, int res2, char * altloc, char * chain_id, int imol, int imol_for_map)

    Parameters
    ----------
    res1: int
    res2: int
    altloc: char *
    chain_id: char *
    imol: int
    imol_for_map: int

    """
    return _coot.fit_residue_range_to_map_by_simplex(res1, res2, altloc, chain_id, imol, imol_for_map)

def score_residue_range_fit_to_map(res1, res2, altloc, chain_id, imol, imol_for_map):
    r"""
    score_residue_range_fit_to_map(int res1, int res2, char * altloc, char * chain_id, int imol, int imol_for_map) -> float

    Parameters
    ----------
    res1: int
    res2: int
    altloc: char *
    chain_id: char *
    imol: int
    imol_for_map: int

    """
    return _coot.score_residue_range_fit_to_map(res1, res2, altloc, chain_id, imol, imol_for_map)

def fix_nomenclature_errors(imol):
    r"""
    fix_nomenclature_errors(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.fix_nomenclature_errors(imol)

def set_nomenclature_errors_on_read(mode):
    r"""
    set_nomenclature_errors_on_read(char const * mode)

    Parameters
    ----------
    mode: char const *

    """
    return _coot.set_nomenclature_errors_on_read(mode)

def output_atom_info_as_text(imol, chain_id, resno, ins_code, atname, altconf):
    r"""
    output_atom_info_as_text(int imol, char const * chain_id, int resno, char const * ins_code, char const * atname, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    atname: char const *
    altconf: char const *

    """
    return _coot.output_atom_info_as_text(imol, chain_id, resno, ins_code, atname, altconf)

def do_residue_info_dialog():
    r"""do_residue_info_dialog()"""
    return _coot.do_residue_info_dialog()

def output_residue_info_dialog(imol, atom_index):
    r"""
    output_residue_info_dialog(int imol, int atom_index)

    Parameters
    ----------
    imol: int
    atom_index: int

    """
    return _coot.output_residue_info_dialog(imol, atom_index)

def residue_info_dialog(imol, chain_id, resno, ins_code):
    r"""
    residue_info_dialog(int imol, char const * chain_id, int resno, char const * ins_code)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.residue_info_dialog(imol, chain_id, resno, ins_code)

def residue_info_dialog_is_displayed():
    r"""residue_info_dialog_is_displayed() -> int"""
    return _coot.residue_info_dialog_is_displayed()

def output_residue_info_as_text(atom_index, imol):
    r"""
    output_residue_info_as_text(int atom_index, int imol)

    Parameters
    ----------
    atom_index: int
    imol: int

    """
    return _coot.output_residue_info_as_text(atom_index, imol)

def do_distance_define():
    r"""do_distance_define()"""
    return _coot.do_distance_define()

def do_angle_define():
    r"""do_angle_define()"""
    return _coot.do_angle_define()

def do_torsion_define():
    r"""do_torsion_define()"""
    return _coot.do_torsion_define()

def residue_info_apply_all_checkbutton_toggled():
    r"""residue_info_apply_all_checkbutton_toggled()"""
    return _coot.residue_info_apply_all_checkbutton_toggled()

def clear_residue_info_edit_list():
    r"""clear_residue_info_edit_list()"""
    return _coot.clear_residue_info_edit_list()

def unset_residue_info_widget():
    r"""unset_residue_info_widget()"""
    return _coot.unset_residue_info_widget()

def clear_measure_distances():
    r"""clear_measure_distances()"""
    return _coot.clear_measure_distances()

def clear_last_measure_distance():
    r"""clear_last_measure_distance()"""
    return _coot.clear_last_measure_distance()

def do_edit_copy_molecule():
    r"""do_edit_copy_molecule()"""
    return _coot.do_edit_copy_molecule()

def do_edit_copy_fragment():
    r"""do_edit_copy_fragment()"""
    return _coot.do_edit_copy_fragment()

def do_edit_replace_fragment():
    r"""do_edit_replace_fragment()"""
    return _coot.do_edit_replace_fragment()

def set_show_environment_distances(state):
    r"""
    set_show_environment_distances(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_environment_distances(state)

def set_show_environment_distances_bumps(state):
    r"""
    set_show_environment_distances_bumps(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_environment_distances_bumps(state)

def set_show_environment_distances_h_bonds(state):
    r"""
    set_show_environment_distances_h_bonds(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_environment_distances_h_bonds(state)

def show_environment_distances_state():
    r"""show_environment_distances_state() -> int"""
    return _coot.show_environment_distances_state()

def set_environment_distances_distance_limits(min_dist, max_dist):
    r"""
    set_environment_distances_distance_limits(float min_dist, float max_dist)

    Parameters
    ----------
    min_dist: float
    max_dist: float

    """
    return _coot.set_environment_distances_distance_limits(min_dist, max_dist)

def set_show_environment_distances_as_solid(state):
    r"""
    set_show_environment_distances_as_solid(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_environment_distances_as_solid(state)

def set_environment_distances_label_atom(state):
    r"""
    set_environment_distances_label_atom(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_environment_distances_label_atom(state)

def label_neighbours():
    r"""label_neighbours()"""
    return _coot.label_neighbours()

def label_atoms_in_residue():
    r"""label_atoms_in_residue()"""
    return _coot.label_atoms_in_residue()

def add_geometry_distance(imol_1, x_1, y_1, z_1, imol_2, x_2, y_2, z_2):
    r"""
    add_geometry_distance(int imol_1, float x_1, float y_1, float z_1, int imol_2, float x_2, float y_2, float z_2) -> double

    Parameters
    ----------
    imol_1: int
    x_1: float
    y_1: float
    z_1: float
    imol_2: int
    x_2: float
    y_2: float
    z_2: float

    """
    return _coot.add_geometry_distance(imol_1, x_1, y_1, z_1, imol_2, x_2, y_2, z_2)

def add_atom_geometry_distance_py(imol_1, atom_spec_1, imol_2, atom_spec_2):
    r"""
    add_atom_geometry_distance_py(int imol_1, PyObject * atom_spec_1, int imol_2, PyObject * atom_spec_2) -> double

    Parameters
    ----------
    imol_1: int
    atom_spec_1: PyObject *
    imol_2: int
    atom_spec_2: PyObject *

    """
    return _coot.add_atom_geometry_distance_py(imol_1, atom_spec_1, imol_2, atom_spec_2)

def get_pointer_position_frac_py():
    r"""get_pointer_position_frac_py() -> PyObject *"""
    return _coot.get_pointer_position_frac_py()

def set_show_pointer_distances(istate):
    r"""
    set_show_pointer_distances(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_show_pointer_distances(istate)

def show_pointer_distances_state():
    r"""show_pointer_distances_state() -> int"""
    return _coot.show_pointer_distances_state()

def scale_zoom(f):
    r"""
    scale_zoom(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.scale_zoom(f)

def scale_zoom_internal(f):
    r"""
    scale_zoom_internal(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.scale_zoom_internal(f)

def zoom_factor():
    r"""zoom_factor() -> float"""
    return _coot.zoom_factor()

def set_smooth_scroll_do_zoom(i):
    r"""
    set_smooth_scroll_do_zoom(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_smooth_scroll_do_zoom(i)

def smooth_scroll_do_zoom():
    r"""smooth_scroll_do_zoom() -> int"""
    return _coot.smooth_scroll_do_zoom()

def smooth_scroll_zoom_limit():
    r"""smooth_scroll_zoom_limit() -> float"""
    return _coot.smooth_scroll_zoom_limit()

def set_smooth_scroll_zoom_limit(f):
    r"""
    set_smooth_scroll_zoom_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_smooth_scroll_zoom_limit(f)

def set_zoom(f):
    r"""
    set_zoom(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_zoom(f)

def handle_cns_data_file(filename, imol):
    r"""
    handle_cns_data_file(char const * filename, int imol) -> int

    Parameters
    ----------
    filename: char const *
    imol: int

    """
    return _coot.handle_cns_data_file(filename, imol)

def handle_cns_data_file_with_cell(filename, imol, a, b, c, alpha, beta, gamma, spg_info):
    r"""
    handle_cns_data_file_with_cell(char const * filename, int imol, float a, float b, float c, float alpha, float beta, float gamma, char const * spg_info) -> int

    Parameters
    ----------
    filename: char const *
    imol: int
    a: float
    b: float
    c: float
    alpha: float
    beta: float
    gamma: float
    spg_info: char const *

    """
    return _coot.handle_cns_data_file_with_cell(filename, imol, a, b, c, alpha, beta, gamma, spg_info)

def auto_read_cif_data_with_phases(filename):
    r"""
    auto_read_cif_data_with_phases(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.auto_read_cif_data_with_phases(filename)

def read_cif_data_with_phases_sigmaa(filename):
    r"""
    read_cif_data_with_phases_sigmaa(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_data_with_phases_sigmaa(filename)

def read_cif_data_with_phases_diff_sigmaa(filename):
    r"""
    read_cif_data_with_phases_diff_sigmaa(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_data_with_phases_diff_sigmaa(filename)

def read_cif_data(filename, imol_coords):
    r"""
    read_cif_data(char const * filename, int imol_coords) -> int

    Parameters
    ----------
    filename: char const *
    imol_coords: int

    """
    return _coot.read_cif_data(filename, imol_coords)

def read_cif_data_2fofc_map(filename, imol_coords):
    r"""
    read_cif_data_2fofc_map(char const * filename, int imol_coords) -> int

    Parameters
    ----------
    filename: char const *
    imol_coords: int

    """
    return _coot.read_cif_data_2fofc_map(filename, imol_coords)

def read_cif_data_fofc_map(filename, imol_coords):
    r"""
    read_cif_data_fofc_map(char const * filename, int imol_coords) -> int

    Parameters
    ----------
    filename: char const *
    imol_coords: int

    """
    return _coot.read_cif_data_fofc_map(filename, imol_coords)

def read_cif_data_with_phases_fo_fc(filename):
    r"""
    read_cif_data_with_phases_fo_fc(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_data_with_phases_fo_fc(filename)

def read_cif_data_with_phases_2fo_fc(filename):
    r"""
    read_cif_data_with_phases_2fo_fc(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_data_with_phases_2fo_fc(filename)

def read_cif_data_with_phases_nfo_fc(filename, map_type):
    r"""
    read_cif_data_with_phases_nfo_fc(char const * filename, int map_type) -> int

    Parameters
    ----------
    filename: char const *
    map_type: int

    """
    return _coot.read_cif_data_with_phases_nfo_fc(filename, map_type)

def read_cif_data_with_phases_fo_alpha_calc(filename):
    r"""
    read_cif_data_with_phases_fo_alpha_calc(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_data_with_phases_fo_alpha_calc(filename)

def handle_cif_dictionary(filename):
    r"""
    handle_cif_dictionary(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.handle_cif_dictionary(filename)

def read_cif_dictionary(filename):
    r"""
    read_cif_dictionary(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.read_cif_dictionary(filename)

def handle_cif_dictionary_for_molecule(filename, imol_enc, new_molecule_from_dictionary_cif_checkbutton_state):
    r"""
    handle_cif_dictionary_for_molecule(char const * filename, int imol_enc, short new_molecule_from_dictionary_cif_checkbutton_state) -> int

    Parameters
    ----------
    filename: char const *
    imol_enc: int
    new_molecule_from_dictionary_cif_checkbutton_state: short

    """
    return _coot.handle_cif_dictionary_for_molecule(filename, imol_enc, new_molecule_from_dictionary_cif_checkbutton_state)

def write_connectivity(monomer_name, filename):
    r"""
    write_connectivity(char const * monomer_name, char const * filename) -> int

    Parameters
    ----------
    monomer_name: char const *
    filename: char const *

    """
    return _coot.write_connectivity(monomer_name, filename)

def open_cif_dictionary_file_selector_dialog():
    r"""open_cif_dictionary_file_selector_dialog()"""
    return _coot.open_cif_dictionary_file_selector_dialog()

def non_standard_residue_names_py(imol):
    r"""
    non_standard_residue_names_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.non_standard_residue_names_py(imol)

def import_all_refmac_cifs():
    r"""import_all_refmac_cifs()"""
    return _coot.import_all_refmac_cifs()

def read_small_molecule_cif(file_name):
    r"""
    read_small_molecule_cif(char const * file_name) -> int

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.read_small_molecule_cif(file_name)

def read_small_molecule_data_cif(file_name):
    r"""
    read_small_molecule_data_cif(char const * file_name) -> int

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.read_small_molecule_data_cif(file_name)

def read_small_molecule_data_cif_and_make_map_using_coords(file_name, imol_coords):
    r"""
    read_small_molecule_data_cif_and_make_map_using_coords(char const * file_name, int imol_coords) -> int

    Parameters
    ----------
    file_name: char const *
    imol_coords: int

    """
    return _coot.read_small_molecule_data_cif_and_make_map_using_coords(file_name, imol_coords)

def deviant_geometry(imol):
    r"""
    deviant_geometry(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.deviant_geometry(imol)

def is_valid_model_molecule(imol):
    r"""
    is_valid_model_molecule(int imol) -> short

    Parameters
    ----------
    imol: int

    """
    return _coot.is_valid_model_molecule(imol)

def is_valid_map_molecule(imol):
    r"""
    is_valid_map_molecule(int imol) -> short

    Parameters
    ----------
    imol: int

    """
    return _coot.is_valid_map_molecule(imol)

def difference_map_peaks(imol, imol_coords, level, max_closeness, do_positive_level_flag, do_negative_level_flag, around_model_only_flag):
    r"""
    difference_map_peaks(int imol, int imol_coords, float level, float max_closeness, int do_positive_level_flag, int do_negative_level_flag, int around_model_only_flag)

    Parameters
    ----------
    imol: int
    imol_coords: int
    level: float
    max_closeness: float
    do_positive_level_flag: int
    do_negative_level_flag: int
    around_model_only_flag: int

    """
    return _coot.difference_map_peaks(imol, imol_coords, level, max_closeness, do_positive_level_flag, do_negative_level_flag, around_model_only_flag)

def set_difference_map_peaks_max_closeness(m):
    r"""
    set_difference_map_peaks_max_closeness(float m)

    Parameters
    ----------
    m: float

    """
    return _coot.set_difference_map_peaks_max_closeness(m)

def difference_map_peaks_max_closeness():
    r"""difference_map_peaks_max_closeness() -> float"""
    return _coot.difference_map_peaks_max_closeness()

def clear_diff_map_peaks():
    r"""clear_diff_map_peaks()"""
    return _coot.clear_diff_map_peaks()

def gln_asn_b_factor_outliers(imol):
    r"""
    gln_asn_b_factor_outliers(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.gln_asn_b_factor_outliers(imol)

def gln_asn_b_factor_outliers_py(imol):
    r"""
    gln_asn_b_factor_outliers_py(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.gln_asn_b_factor_outliers_py(imol)

def map_peaks_py(imol_map, n_sigma):
    r"""
    map_peaks_py(int imol_map, float n_sigma) -> PyObject *

    Parameters
    ----------
    imol_map: int
    n_sigma: float

    """
    return _coot.map_peaks_py(imol_map, n_sigma)

def map_peaks_near_point_py(imol_map, n_sigma, x, y, z, radius):
    r"""
    map_peaks_near_point_py(int imol_map, float n_sigma, float x, float y, float z, float radius) -> PyObject *

    Parameters
    ----------
    imol_map: int
    n_sigma: float
    x: float
    y: float
    z: float
    radius: float

    """
    return _coot.map_peaks_near_point_py(imol_map, n_sigma, x, y, z, radius)

def map_peaks_near_point_from_list_py(imol_map, peak_list, x, y, z, radius):
    r"""
    map_peaks_near_point_from_list_py(int imol_map, PyObject * peak_list, float x, float y, float z, float radius) -> PyObject *

    Parameters
    ----------
    imol_map: int
    peak_list: PyObject *
    x: float
    y: float
    z: float
    radius: float

    """
    return _coot.map_peaks_near_point_from_list_py(imol_map, peak_list, x, y, z, radius)

def map_peaks_around_molecule_py(imol_map, sigma, negative_also_flag, imol_coords):
    r"""
    map_peaks_around_molecule_py(int imol_map, float sigma, int negative_also_flag, int imol_coords) -> PyObject *

    Parameters
    ----------
    imol_map: int
    sigma: float
    negative_also_flag: int
    imol_coords: int

    """
    return _coot.map_peaks_around_molecule_py(imol_map, sigma, negative_also_flag, imol_coords)

def screen_vectors_py():
    r"""screen_vectors_py() -> PyObject *"""
    return _coot.screen_vectors_py()

def get_torsion_py(imol, atom_spec_1, atom_spec_2, atom_spec_3, atom_spec_4):
    r"""
    get_torsion_py(int imol, PyObject * atom_spec_1, PyObject * atom_spec_2, PyObject * atom_spec_3, PyObject * atom_spec_4) -> PyObject *

    Parameters
    ----------
    imol: int
    atom_spec_1: PyObject *
    atom_spec_2: PyObject *
    atom_spec_3: PyObject *
    atom_spec_4: PyObject *

    """
    return _coot.get_torsion_py(imol, atom_spec_1, atom_spec_2, atom_spec_3, atom_spec_4)

def set_torsion_py(imol, chain_id, res_no, insertion_code, alt_conf, atom_name_1, atom_name_2, atom_name_3, atom_name_4, tors):
    r"""
    set_torsion_py(int imol, char const * chain_id, int res_no, char const * insertion_code, char const * alt_conf, char const * atom_name_1, char const * atom_name_2, char const * atom_name_3, char const * atom_name_4, double tors) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    insertion_code: char const *
    alt_conf: char const *
    atom_name_1: char const *
    atom_name_2: char const *
    atom_name_3: char const *
    atom_name_4: char const *
    tors: double

    """
    return _coot.set_torsion_py(imol, chain_id, res_no, insertion_code, alt_conf, atom_name_1, atom_name_2, atom_name_3, atom_name_4, tors)

def multi_residue_torsion_py(imol, residues_specs_py):
    r"""
    multi_residue_torsion_py(int imol, PyObject * residues_specs_py)

    Parameters
    ----------
    imol: int
    residues_specs_py: PyObject *

    """
    return _coot.multi_residue_torsion_py(imol, residues_specs_py)

def clear_multi_residue_torsion_mode():
    r"""clear_multi_residue_torsion_mode()"""
    return _coot.clear_multi_residue_torsion_mode()

def set_multi_residue_torsion_reverse_mode(mode):
    r"""
    set_multi_residue_torsion_reverse_mode(short mode)

    Parameters
    ----------
    mode: short

    """
    return _coot.set_multi_residue_torsion_reverse_mode(mode)

def show_multi_residue_torsion_dialog():
    r"""show_multi_residue_torsion_dialog()"""
    return _coot.show_multi_residue_torsion_dialog()

def setup_multi_residue_torsion():
    r"""setup_multi_residue_torsion()"""
    return _coot.setup_multi_residue_torsion()

def atom_overlap_score(imol):
    r"""
    atom_overlap_score(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.atom_overlap_score(imol)

def set_show_chiral_volume_outliers(imol, state):
    r"""
    set_show_chiral_volume_outliers(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_show_chiral_volume_outliers(imol, state)

def do_ramachandran_plot(imol):
    r"""
    do_ramachandran_plot(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.do_ramachandran_plot(imol)

def set_kleywegt_plot_n_diffs(n_diffs):
    r"""
    set_kleywegt_plot_n_diffs(int n_diffs)

    Parameters
    ----------
    n_diffs: int

    """
    return _coot.set_kleywegt_plot_n_diffs(n_diffs)

def set_ramachandran_plot_contour_levels(level_prefered, level_allowed):
    r"""
    set_ramachandran_plot_contour_levels(float level_prefered, float level_allowed)

    Parameters
    ----------
    level_prefered: float
    level_allowed: float

    """
    return _coot.set_ramachandran_plot_contour_levels(level_prefered, level_allowed)

def set_ramachandran_plot_background_block_size(blocksize):
    r"""
    set_ramachandran_plot_background_block_size(float blocksize)

    Parameters
    ----------
    blocksize: float

    """
    return _coot.set_ramachandran_plot_background_block_size(blocksize)

def set_ramachandran_psi_axis_mode(mode):
    r"""
    set_ramachandran_psi_axis_mode(int mode)

    Parameters
    ----------
    mode: int

    """
    return _coot.set_ramachandran_psi_axis_mode(mode)

def ramachandran_psi_axis_mode():
    r"""ramachandran_psi_axis_mode() -> int"""
    return _coot.ramachandran_psi_axis_mode()

def set_moving_atoms(phi, psi):
    r"""
    set_moving_atoms(double phi, double psi)

    Parameters
    ----------
    phi: double
    psi: double

    """
    return _coot.set_moving_atoms(phi, psi)

def accept_phi_psi_moving_atoms():
    r"""accept_phi_psi_moving_atoms()"""
    return _coot.accept_phi_psi_moving_atoms()

def setup_edit_phi_psi(state):
    r"""
    setup_edit_phi_psi(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_edit_phi_psi(state)

def setup_dynamic_distances(state):
    r"""
    setup_dynamic_distances(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_dynamic_distances(state)

def destroy_edit_backbone_rama_plot():
    r"""destroy_edit_backbone_rama_plot()"""
    return _coot.destroy_edit_backbone_rama_plot()

def ramachandran_plot_differences(imol1, imol2):
    r"""
    ramachandran_plot_differences(int imol1, int imol2)

    Parameters
    ----------
    imol1: int
    imol2: int

    """
    return _coot.ramachandran_plot_differences(imol1, imol2)

def ramachandran_plot_differences_by_chain(imol1, imol2, a_chain, b_chain):
    r"""
    ramachandran_plot_differences_by_chain(int imol1, int imol2, char const * a_chain, char const * b_chain)

    Parameters
    ----------
    imol1: int
    imol2: int
    a_chain: char const *
    b_chain: char const *

    """
    return _coot.ramachandran_plot_differences_by_chain(imol1, imol2, a_chain, b_chain)

def sequence_view(imol):
    r"""
    sequence_view(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.sequence_view(imol)

def do_sequence_view(imol):
    r"""
    do_sequence_view(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.do_sequence_view(imol)

def update_sequence_view_current_position_highlight_from_active_atom():
    r"""update_sequence_view_current_position_highlight_from_active_atom()"""
    return _coot.update_sequence_view_current_position_highlight_from_active_atom()

def change_peptide_carbonyl_by(angle):
    r"""
    change_peptide_carbonyl_by(double angle)

    Parameters
    ----------
    angle: double

    """
    return _coot.change_peptide_carbonyl_by(angle)

def change_peptide_peptide_by(angle):
    r"""
    change_peptide_peptide_by(double angle)

    Parameters
    ----------
    angle: double

    """
    return _coot.change_peptide_peptide_by(angle)

def execute_setup_backbone_torsion_edit(imol, atom_index):
    r"""
    execute_setup_backbone_torsion_edit(int imol, int atom_index)

    Parameters
    ----------
    imol: int
    atom_index: int

    """
    return _coot.execute_setup_backbone_torsion_edit(imol, atom_index)

def setup_backbone_torsion_edit(state):
    r"""
    setup_backbone_torsion_edit(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_backbone_torsion_edit(state)

def set_backbone_torsion_peptide_button_start_pos(ix, iy):
    r"""
    set_backbone_torsion_peptide_button_start_pos(int ix, int iy)

    Parameters
    ----------
    ix: int
    iy: int

    """
    return _coot.set_backbone_torsion_peptide_button_start_pos(ix, iy)

def change_peptide_peptide_by_current_button_pos(ix, iy):
    r"""
    change_peptide_peptide_by_current_button_pos(int ix, int iy)

    Parameters
    ----------
    ix: int
    iy: int

    """
    return _coot.change_peptide_peptide_by_current_button_pos(ix, iy)

def set_backbone_torsion_carbonyl_button_start_pos(ix, iy):
    r"""
    set_backbone_torsion_carbonyl_button_start_pos(int ix, int iy)

    Parameters
    ----------
    ix: int
    iy: int

    """
    return _coot.set_backbone_torsion_carbonyl_button_start_pos(ix, iy)

def change_peptide_carbonyl_by_current_button_pos(ix, iy):
    r"""
    change_peptide_carbonyl_by_current_button_pos(int ix, int iy)

    Parameters
    ----------
    ix: int
    iy: int

    """
    return _coot.change_peptide_carbonyl_by_current_button_pos(ix, iy)

def add_atom_label(imol, chain_id, iresno, atom_id):
    r"""
    add_atom_label(int imol, char * chain_id, int iresno, char * atom_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char *
    iresno: int
    atom_id: char *

    """
    return _coot.add_atom_label(imol, chain_id, iresno, atom_id)

def remove_atom_label(imol, chain_id, iresno, atom_id):
    r"""
    remove_atom_label(int imol, char * chain_id, int iresno, char * atom_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: char *
    iresno: int
    atom_id: char *

    """
    return _coot.remove_atom_label(imol, chain_id, iresno, atom_id)

def remove_all_atom_labels():
    r"""remove_all_atom_labels()"""
    return _coot.remove_all_atom_labels()

def set_label_on_recentre_flag(i):
    r"""
    set_label_on_recentre_flag(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_label_on_recentre_flag(i)

def centre_atom_label_status():
    r"""centre_atom_label_status() -> int"""
    return _coot.centre_atom_label_status()

def set_brief_atom_labels(istat):
    r"""
    set_brief_atom_labels(int istat)

    Parameters
    ----------
    istat: int

    """
    return _coot.set_brief_atom_labels(istat)

def brief_atom_labels_state():
    r"""brief_atom_labels_state() -> int"""
    return _coot.brief_atom_labels_state()

def set_seg_ids_in_atom_labels(istat):
    r"""
    set_seg_ids_in_atom_labels(int istat)

    Parameters
    ----------
    istat: int

    """
    return _coot.set_seg_ids_in_atom_labels(istat)

def rotate_y_scene(nsteps, stepsize):
    r"""
    rotate_y_scene(int nsteps, float stepsize)

    Parameters
    ----------
    nsteps: int
    stepsize: float

    """
    return _coot.rotate_y_scene(nsteps, stepsize)

def rotate_x_scene(nsteps, stepsize):
    r"""
    rotate_x_scene(int nsteps, float stepsize)

    Parameters
    ----------
    nsteps: int
    stepsize: float

    """
    return _coot.rotate_x_scene(nsteps, stepsize)

def rotate_z_scene(nsteps, stepsize):
    r"""
    rotate_z_scene(int nsteps, float stepsize)

    Parameters
    ----------
    nsteps: int
    stepsize: float

    """
    return _coot.rotate_z_scene(nsteps, stepsize)

def spin_zoom_trans(axis, nstep, stepsize, zoom_by, x_rel, y_rel, z_rel):
    r"""
    spin_zoom_trans(int axis, int nstep, float stepsize, float zoom_by, float x_rel, float y_rel, float z_rel)

    Parameters
    ----------
    axis: int
    nstep: int
    stepsize: float
    zoom_by: float
    x_rel: float
    y_rel: float
    z_rel: float

    """
    return _coot.spin_zoom_trans(axis, nstep, stepsize, zoom_by, x_rel, y_rel, z_rel)

def translate_scene_x(nsteps):
    r"""
    translate_scene_x(int nsteps)

    Parameters
    ----------
    nsteps: int

    """
    return _coot.translate_scene_x(nsteps)

def translate_scene_y(nsteps):
    r"""
    translate_scene_y(int nsteps)

    Parameters
    ----------
    nsteps: int

    """
    return _coot.translate_scene_y(nsteps)

def translate_scene_z(nsteps):
    r"""
    translate_scene_z(int nsteps)

    Parameters
    ----------
    nsteps: int

    """
    return _coot.translate_scene_z(nsteps)

def add_view_here(view_name):
    r"""
    add_view_here(char const * view_name) -> int

    Parameters
    ----------
    view_name: char const *

    """
    return _coot.add_view_here(view_name)

def add_view_raw(rcx, rcy, rcz, quat1, quat2, quat3, quat4, zoom, view_name):
    r"""
    add_view_raw(float rcx, float rcy, float rcz, float quat1, float quat2, float quat3, float quat4, float zoom, char const * view_name) -> int

    Parameters
    ----------
    rcx: float
    rcy: float
    rcz: float
    quat1: float
    quat2: float
    quat3: float
    quat4: float
    zoom: float
    view_name: char const *

    """
    return _coot.add_view_raw(rcx, rcy, rcz, quat1, quat2, quat3, quat4, zoom, view_name)

def play_views():
    r"""play_views()"""
    return _coot.play_views()

def remove_this_view():
    r"""remove_this_view()"""
    return _coot.remove_this_view()

def remove_named_view(view_name):
    r"""
    remove_named_view(char const * view_name) -> int

    Parameters
    ----------
    view_name: char const *

    """
    return _coot.remove_named_view(view_name)

def remove_view(view_number):
    r"""
    remove_view(int view_number)

    Parameters
    ----------
    view_number: int

    """
    return _coot.remove_view(view_number)

def go_to_first_view(snap_to_view_flag):
    r"""
    go_to_first_view(int snap_to_view_flag) -> int

    Parameters
    ----------
    snap_to_view_flag: int

    """
    return _coot.go_to_first_view(snap_to_view_flag)

def go_to_view_number(view_number, snap_to_view_flag):
    r"""
    go_to_view_number(int view_number, int snap_to_view_flag) -> int

    Parameters
    ----------
    view_number: int
    snap_to_view_flag: int

    """
    return _coot.go_to_view_number(view_number, snap_to_view_flag)

def add_spin_view(view_name, n_steps, degrees_total):
    r"""
    add_spin_view(char const * view_name, int n_steps, float degrees_total) -> int

    Parameters
    ----------
    view_name: char const *
    n_steps: int
    degrees_total: float

    """
    return _coot.add_spin_view(view_name, n_steps, degrees_total)

def add_view_description(view_number, description):
    r"""
    add_view_description(int view_number, char const * description)

    Parameters
    ----------
    view_number: int
    description: char const *

    """
    return _coot.add_view_description(view_number, description)

def add_action_view(view_name, action_function):
    r"""
    add_action_view(char const * view_name, char const * action_function) -> int

    Parameters
    ----------
    view_name: char const *
    action_function: char const *

    """
    return _coot.add_action_view(view_name, action_function)

def insert_action_view_after_view(view_number, view_name, action_function):
    r"""
    insert_action_view_after_view(int view_number, char const * view_name, char const * action_function) -> int

    Parameters
    ----------
    view_number: int
    view_name: char const *
    action_function: char const *

    """
    return _coot.insert_action_view_after_view(view_number, view_name, action_function)

def n_views():
    r"""n_views() -> int"""
    return _coot.n_views()

def save_views(view_file_name):
    r"""
    save_views(char const * view_file_name)

    Parameters
    ----------
    view_file_name: char const *

    """
    return _coot.save_views(view_file_name)

def views_play_speed():
    r"""views_play_speed() -> float"""
    return _coot.views_play_speed()

def set_views_play_speed(f):
    r"""
    set_views_play_speed(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_views_play_speed(f)

def view_name_py(view_number):
    r"""
    view_name_py(int view_number) -> PyObject *

    Parameters
    ----------
    view_number: int

    """
    return _coot.view_name_py(view_number)

def view_description_py(view_number):
    r"""
    view_description_py(int view_number) -> PyObject *

    Parameters
    ----------
    view_number: int

    """
    return _coot.view_description_py(view_number)

def go_to_view_py(view):
    r"""
    go_to_view_py(PyObject * view)

    Parameters
    ----------
    view: PyObject *

    """
    return _coot.go_to_view_py(view)

def clear_all_views():
    r"""clear_all_views()"""
    return _coot.clear_all_views()

def set_movie_file_name_prefix(file_name):
    r"""
    set_movie_file_name_prefix(char const * file_name)

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.set_movie_file_name_prefix(file_name)

def set_movie_frame_number(frame_number):
    r"""
    set_movie_frame_number(int frame_number)

    Parameters
    ----------
    frame_number: int

    """
    return _coot.set_movie_frame_number(frame_number)

def movie_file_name_prefix_py():
    r"""movie_file_name_prefix_py() -> PyObject *"""
    return _coot.movie_file_name_prefix_py()

def movie_frame_number():
    r"""movie_frame_number() -> int"""
    return _coot.movie_frame_number()

def set_make_movie_mode(make_movies_flag):
    r"""
    set_make_movie_mode(int make_movies_flag)

    Parameters
    ----------
    make_movies_flag: int

    """
    return _coot.set_make_movie_mode(make_movies_flag)

def set_background_colour(red, green, blue):
    r"""
    set_background_colour(double red, double green, double blue)

    Parameters
    ----------
    red: double
    green: double
    blue: double

    """
    return _coot.set_background_colour(red, green, blue)

def redraw_background():
    r"""redraw_background()"""
    return _coot.redraw_background()

def background_is_black_p():
    r"""background_is_black_p() -> int"""
    return _coot.background_is_black_p()

def set_ligand_acceptable_fit_fraction(f):
    r"""
    set_ligand_acceptable_fit_fraction(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_ligand_acceptable_fit_fraction(f)

def set_ligand_cluster_sigma_level(f):
    r"""
    set_ligand_cluster_sigma_level(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_ligand_cluster_sigma_level(f)

def set_ligand_flexible_ligand_n_samples(i):
    r"""
    set_ligand_flexible_ligand_n_samples(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_ligand_flexible_ligand_n_samples(i)

def set_ligand_verbose_reporting(i):
    r"""
    set_ligand_verbose_reporting(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_ligand_verbose_reporting(i)

def set_find_ligand_n_top_ligands(n):
    r"""
    set_find_ligand_n_top_ligands(int n)

    Parameters
    ----------
    n: int

    """
    return _coot.set_find_ligand_n_top_ligands(n)

def set_find_ligand_do_real_space_refinement(state):
    r"""
    set_find_ligand_do_real_space_refinement(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_find_ligand_do_real_space_refinement(state)

def set_find_ligand_multi_solutions_per_cluster(lim_1, lim_2):
    r"""
    set_find_ligand_multi_solutions_per_cluster(float lim_1, float lim_2)

    Parameters
    ----------
    lim_1: float
    lim_2: float

    """
    return _coot.set_find_ligand_multi_solutions_per_cluster(lim_1, lim_2)

def set_find_ligand_mask_waters(istate):
    r"""
    set_find_ligand_mask_waters(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_find_ligand_mask_waters(istate)

def set_ligand_search_protein_molecule(imol):
    r"""
    set_ligand_search_protein_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_ligand_search_protein_molecule(imol)

def set_ligand_search_map_molecule(imol_map):
    r"""
    set_ligand_search_map_molecule(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.set_ligand_search_map_molecule(imol_map)

def add_ligand_search_ligand_molecule(imol_ligand):
    r"""
    add_ligand_search_ligand_molecule(int imol_ligand)

    Parameters
    ----------
    imol_ligand: int

    """
    return _coot.add_ligand_search_ligand_molecule(imol_ligand)

def add_ligand_search_wiggly_ligand_molecule(imol_ligand):
    r"""
    add_ligand_search_wiggly_ligand_molecule(int imol_ligand)

    Parameters
    ----------
    imol_ligand: int

    """
    return _coot.add_ligand_search_wiggly_ligand_molecule(imol_ligand)

def set_find_ligand_here_cluster(state):
    r"""
    set_find_ligand_here_cluster(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_find_ligand_here_cluster(state)

def execute_ligand_search():
    r"""execute_ligand_search()"""
    return _coot.execute_ligand_search()

def execute_ligand_search_py():
    r"""execute_ligand_search_py() -> PyObject *"""
    return _coot.execute_ligand_search_py()

def add_ligand_clear_ligands():
    r"""add_ligand_clear_ligands()"""
    return _coot.add_ligand_clear_ligands()

def ligand_expert():
    r"""ligand_expert()"""
    return _coot.ligand_expert()

def do_find_ligands_dialog():
    r"""do_find_ligands_dialog()"""
    return _coot.do_find_ligands_dialog()

def match_ligand_torsions(imol_ligand, imol_ref, chain_id_ref, resno_ref):
    r"""
    match_ligand_torsions(int imol_ligand, int imol_ref, char const * chain_id_ref, int resno_ref)

    Parameters
    ----------
    imol_ligand: int
    imol_ref: int
    chain_id_ref: char const *
    resno_ref: int

    """
    return _coot.match_ligand_torsions(imol_ligand, imol_ref, chain_id_ref, resno_ref)

def overlap_ligands_py(imol_ligand, imol_ref, chain_id_ref, resno_ref):
    r"""
    overlap_ligands_py(int imol_ligand, int imol_ref, char const * chain_id_ref, int resno_ref) -> PyObject *

    Parameters
    ----------
    imol_ligand: int
    imol_ref: int
    chain_id_ref: char const *
    resno_ref: int

    """
    return _coot.overlap_ligands_py(imol_ligand, imol_ref, chain_id_ref, resno_ref)

def analyse_ligand_differences_py(imol_ligand, imol_ref, chain_id_ref, resno_ref):
    r"""
    analyse_ligand_differences_py(int imol_ligand, int imol_ref, char const * chain_id_ref, int resno_ref) -> PyObject *

    Parameters
    ----------
    imol_ligand: int
    imol_ref: int
    chain_id_ref: char const *
    resno_ref: int

    """
    return _coot.analyse_ligand_differences_py(imol_ligand, imol_ref, chain_id_ref, resno_ref)

def compare_ligand_atom_types_py(imol_ligand, imol_ref, chain_id_ref, resno_ref):
    r"""
    compare_ligand_atom_types_py(int imol_ligand, int imol_ref, char const * chain_id_ref, int resno_ref) -> PyObject *

    Parameters
    ----------
    imol_ligand: int
    imol_ref: int
    chain_id_ref: char const *
    resno_ref: int

    """
    return _coot.compare_ligand_atom_types_py(imol_ligand, imol_ref, chain_id_ref, resno_ref)

def match_ligand_atom_names(imol_ligand, chain_id_ligand, resno_ligand, ins_code_ligand, imol_reference, chain_id_reference, resno_reference, ins_code_reference):
    r"""
    match_ligand_atom_names(int imol_ligand, char const * chain_id_ligand, int resno_ligand, char const * ins_code_ligand, int imol_reference, char const * chain_id_reference, int resno_reference, char const * ins_code_reference)

    Parameters
    ----------
    imol_ligand: int
    chain_id_ligand: char const *
    resno_ligand: int
    ins_code_ligand: char const *
    imol_reference: int
    chain_id_reference: char const *
    resno_reference: int
    ins_code_reference: char const *

    """
    return _coot.match_ligand_atom_names(imol_ligand, chain_id_ligand, resno_ligand, ins_code_ligand, imol_reference, chain_id_reference, resno_reference, ins_code_reference)

def match_ligand_atom_names_to_comp_id(imol_ligand, chain_id_ligand, resno_ligand, ins_code_ligand, comp_id_ref):
    r"""
    match_ligand_atom_names_to_comp_id(int imol_ligand, char const * chain_id_ligand, int resno_ligand, char const * ins_code_ligand, char const * comp_id_ref)

    Parameters
    ----------
    imol_ligand: int
    chain_id_ligand: char const *
    resno_ligand: int
    ins_code_ligand: char const *
    comp_id_ref: char const *

    """
    return _coot.match_ligand_atom_names_to_comp_id(imol_ligand, chain_id_ligand, resno_ligand, ins_code_ligand, comp_id_ref)

def exchange_ligand(imol_lig, chain_id_lig, resno_lig, ins_code_lig):
    r"""
    exchange_ligand(int imol_lig, char const * chain_id_lig, int resno_lig, char const * ins_code_lig) -> int

    Parameters
    ----------
    imol_lig: int
    chain_id_lig: char const *
    resno_lig: int
    ins_code_lig: char const *

    """
    return _coot.exchange_ligand(imol_lig, chain_id_lig, resno_lig, ins_code_lig)

def flip_ligand(imol, chain_id, resno):
    r"""
    flip_ligand(int imol, char const * chain_id, int resno)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int

    """
    return _coot.flip_ligand(imol, chain_id, resno)

def jed_flip(imol, chain_id, res_no, ins_code, atom_name, alt_conf, invert_selection):
    r"""
    jed_flip(int imol, char const * chain_id, int res_no, char const * ins_code, char const * atom_name, char const * alt_conf, short invert_selection)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    atom_name: char const *
    alt_conf: char const *
    invert_selection: short

    """
    return _coot.jed_flip(imol, chain_id, res_no, ins_code, atom_name, alt_conf, invert_selection)

def show_create_find_waters_dialog():
    r"""show_create_find_waters_dialog()"""
    return _coot.show_create_find_waters_dialog()

def renumber_waters(imol):
    r"""
    renumber_waters(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.renumber_waters(imol)

def execute_find_waters_real(imol_for_map, imol_for_protein, new_waters_mol_flag, rmsd_cut_off):
    r"""
    execute_find_waters_real(int imol_for_map, int imol_for_protein, short new_waters_mol_flag, float rmsd_cut_off)

    Parameters
    ----------
    imol_for_map: int
    imol_for_protein: int
    new_waters_mol_flag: short
    rmsd_cut_off: float

    """
    return _coot.execute_find_waters_real(imol_for_map, imol_for_protein, new_waters_mol_flag, rmsd_cut_off)

def find_waters(imol_for_map, imol_for_protein, new_waters_mol_flag, rmsd_cut_off, show_blobs_dialog):
    r"""
    find_waters(int imol_for_map, int imol_for_protein, short new_waters_mol_flag, float rmsd_cut_off, short show_blobs_dialog)

    Parameters
    ----------
    imol_for_map: int
    imol_for_protein: int
    new_waters_mol_flag: short
    rmsd_cut_off: float
    show_blobs_dialog: short

    """
    return _coot.find_waters(imol_for_map, imol_for_protein, new_waters_mol_flag, rmsd_cut_off, show_blobs_dialog)

def move_waters_to_around_protein(imol):
    r"""
    move_waters_to_around_protein(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.move_waters_to_around_protein(imol)

def move_hetgroups_to_around_protein(imol):
    r"""
    move_hetgroups_to_around_protein(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.move_hetgroups_to_around_protein(imol)

def max_water_distance(imol):
    r"""
    max_water_distance(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.max_water_distance(imol)

def get_text_for_find_waters_sigma_cut_off():
    r"""get_text_for_find_waters_sigma_cut_off() -> char *"""
    return _coot.get_text_for_find_waters_sigma_cut_off()

def set_value_for_find_waters_sigma_cut_off(f):
    r"""
    set_value_for_find_waters_sigma_cut_off(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_value_for_find_waters_sigma_cut_off(f)

def set_water_check_spherical_variance_limit(f):
    r"""
    set_water_check_spherical_variance_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_water_check_spherical_variance_limit(f)

def set_ligand_water_to_protein_distance_limits(f1, f2):
    r"""
    set_ligand_water_to_protein_distance_limits(float f1, float f2)

    Parameters
    ----------
    f1: float
    f2: float

    """
    return _coot.set_ligand_water_to_protein_distance_limits(f1, f2)

def set_ligand_water_n_cycles(i):
    r"""
    set_ligand_water_n_cycles(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_ligand_water_n_cycles(i)

def set_write_peaksearched_waters():
    r"""set_write_peaksearched_waters()"""
    return _coot.set_write_peaksearched_waters()

def execute_find_blobs(imol_model, imol_for_map, cut_off, interactive_flag):
    r"""
    execute_find_blobs(int imol_model, int imol_for_map, float cut_off, short interactive_flag)

    Parameters
    ----------
    imol_model: int
    imol_for_map: int
    cut_off: float
    interactive_flag: short

    """
    return _coot.execute_find_blobs(imol_model, imol_for_map, cut_off, interactive_flag)

def split_water(imol, chain_id, res_no, ins_code):
    r"""
    split_water(int imol, char const * chain_id, int res_no, char const * ins_code)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *

    """
    return _coot.split_water(imol, chain_id, res_no, ins_code)

def set_default_bond_thickness(t):
    r"""
    set_default_bond_thickness(int t)

    Parameters
    ----------
    t: int

    """
    return _coot.set_default_bond_thickness(t)

def set_bond_thickness(imol, t):
    r"""
    set_bond_thickness(int imol, float t)

    Parameters
    ----------
    imol: int
    t: float

    """
    return _coot.set_bond_thickness(imol, t)

def set_bond_thickness_intermediate_atoms(t):
    r"""
    set_bond_thickness_intermediate_atoms(float t)

    Parameters
    ----------
    t: float

    """
    return _coot.set_bond_thickness_intermediate_atoms(t)

def set_use_variable_bond_thickness(state):
    r"""
    set_use_variable_bond_thickness(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_variable_bond_thickness(state)

def set_bond_colour_rotation_for_molecule(imol, f):
    r"""
    set_bond_colour_rotation_for_molecule(int imol, float f)

    Parameters
    ----------
    imol: int
    f: float

    """
    return _coot.set_bond_colour_rotation_for_molecule(imol, f)

def set_draw_stick_mode_atoms_default(state):
    r"""
    set_draw_stick_mode_atoms_default(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_stick_mode_atoms_default(state)

def get_bond_colour_rotation_for_molecule(imol):
    r"""
    get_bond_colour_rotation_for_molecule(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_bond_colour_rotation_for_molecule(imol)

def set_unbonded_atom_star_size(f):
    r"""
    set_unbonded_atom_star_size(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_unbonded_atom_star_size(f)

def set_default_representation_type(type):
    r"""
    set_default_representation_type(int type)

    Parameters
    ----------
    type: int

    """
    return _coot.set_default_representation_type(type)

def get_default_bond_thickness():
    r"""get_default_bond_thickness() -> int"""
    return _coot.get_default_bond_thickness()

def set_draw_zero_occ_markers(status):
    r"""
    set_draw_zero_occ_markers(int status)

    Parameters
    ----------
    status: int

    """
    return _coot.set_draw_zero_occ_markers(status)

def set_draw_cis_peptide_markups(status):
    r"""
    set_draw_cis_peptide_markups(int status)

    Parameters
    ----------
    status: int

    """
    return _coot.set_draw_cis_peptide_markups(status)

def set_draw_hydrogens(imol, istat):
    r"""
    set_draw_hydrogens(int imol, int istat)

    Parameters
    ----------
    imol: int
    istat: int

    """
    return _coot.set_draw_hydrogens(imol, istat)

def draw_hydrogens_state(imol):
    r"""
    draw_hydrogens_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.draw_hydrogens_state(imol)

def set_draw_stick_mode_atoms(imol, state):
    r"""
    set_draw_stick_mode_atoms(int imol, short state)

    Parameters
    ----------
    imol: int
    state: short

    """
    return _coot.set_draw_stick_mode_atoms(imol, state)

def set_draw_missing_residues_loops(state):
    r"""
    set_draw_missing_residues_loops(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_missing_residues_loops(state)

def graphics_to_ca_representation(imol):
    r"""
    graphics_to_ca_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_ca_representation(imol)

def graphics_to_colour_by_chain(imol):
    r"""
    graphics_to_colour_by_chain(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_colour_by_chain(imol)

def graphics_to_ca_plus_ligands_representation(imol):
    r"""
    graphics_to_ca_plus_ligands_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_ca_plus_ligands_representation(imol)

def graphics_to_ca_plus_ligands_and_sidechains_representation(imol):
    r"""
    graphics_to_ca_plus_ligands_and_sidechains_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_ca_plus_ligands_and_sidechains_representation(imol)

def graphics_to_bonds_no_waters_representation(imol):
    r"""
    graphics_to_bonds_no_waters_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_bonds_no_waters_representation(imol)

def graphics_to_bonds_representation(mol):
    r"""
    graphics_to_bonds_representation(int mol)

    Parameters
    ----------
    mol: int

    """
    return _coot.graphics_to_bonds_representation(mol)

def graphics_to_colour_by_molecule(imol):
    r"""
    graphics_to_colour_by_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_colour_by_molecule(imol)

def graphics_to_ca_plus_ligands_sec_struct_representation(imol):
    r"""
    graphics_to_ca_plus_ligands_sec_struct_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_ca_plus_ligands_sec_struct_representation(imol)

def graphics_to_sec_struct_bonds_representation(imol):
    r"""
    graphics_to_sec_struct_bonds_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_sec_struct_bonds_representation(imol)

def graphics_to_rainbow_representation(imol):
    r"""
    graphics_to_rainbow_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_rainbow_representation(imol)

def graphics_to_b_factor_representation(imol):
    r"""
    graphics_to_b_factor_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_b_factor_representation(imol)

def graphics_to_b_factor_cas_representation(imol):
    r"""
    graphics_to_b_factor_cas_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_b_factor_cas_representation(imol)

def graphics_to_occupancy_representation(imol):
    r"""
    graphics_to_occupancy_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_occupancy_representation(imol)

def graphics_to_user_defined_atom_colours_representation(imol):
    r"""
    graphics_to_user_defined_atom_colours_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_user_defined_atom_colours_representation(imol)

def graphics_to_user_defined_atom_colours_all_atoms_representation(imol):
    r"""
    graphics_to_user_defined_atom_colours_all_atoms_representation(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.graphics_to_user_defined_atom_colours_all_atoms_representation(imol)

def get_graphics_molecule_bond_type(imol):
    r"""
    get_graphics_molecule_bond_type(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.get_graphics_molecule_bond_type(imol)

def set_b_factor_bonds_scale_factor(imol, f):
    r"""
    set_b_factor_bonds_scale_factor(int imol, float f) -> int

    Parameters
    ----------
    imol: int
    f: float

    """
    return _coot.set_b_factor_bonds_scale_factor(imol, f)

def change_model_molecule_representation_mode(up_or_down):
    r"""
    change_model_molecule_representation_mode(int up_or_down)

    Parameters
    ----------
    up_or_down: int

    """
    return _coot.change_model_molecule_representation_mode(up_or_down)

def set_use_grey_carbons_for_molecule(imol, state):
    r"""
    set_use_grey_carbons_for_molecule(int imol, short state)

    Parameters
    ----------
    imol: int
    state: short

    """
    return _coot.set_use_grey_carbons_for_molecule(imol, state)

def set_grey_carbon_colour(imol, r, g, b):
    r"""
    set_grey_carbon_colour(int imol, float r, float g, float b)

    Parameters
    ----------
    imol: int
    r: float
    g: float
    b: float

    """
    return _coot.set_grey_carbon_colour(imol, r, g, b)

def set_draw_moving_atoms_restraints(state):
    r"""
    set_draw_moving_atoms_restraints(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_draw_moving_atoms_restraints(state)

def get_draw_moving_atoms_restraints():
    r"""get_draw_moving_atoms_restraints() -> short"""
    return _coot.get_draw_moving_atoms_restraints()

def make_ball_and_stick(imol, atom_selection_str, bond_thickness, sphere_size, do_spheres_flag):
    r"""
    make_ball_and_stick(int imol, char const * atom_selection_str, float bond_thickness, float sphere_size, int do_spheres_flag) -> int

    Parameters
    ----------
    imol: int
    atom_selection_str: char const *
    bond_thickness: float
    sphere_size: float
    do_spheres_flag: int

    """
    return _coot.make_ball_and_stick(imol, atom_selection_str, bond_thickness, sphere_size, do_spheres_flag)

def clear_ball_and_stick(imol):
    r"""
    clear_ball_and_stick(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.clear_ball_and_stick(imol)

def set_model_molecule_representation_style(imol, mode):
    r"""
    set_model_molecule_representation_style(int imol, unsigned int mode)

    Parameters
    ----------
    imol: int
    mode: unsigned int

    """
    return _coot.set_model_molecule_representation_style(imol, mode)

def set_show_molecular_representation(imol, mesh_index, state):
    r"""
    set_show_molecular_representation(int imol, int mesh_index, short state)

    Parameters
    ----------
    imol: int
    mesh_index: int
    state: short

    """
    return _coot.set_show_molecular_representation(imol, mesh_index, state)

def set_show_additional_representation(imol, representation_number, on_off_flag):
    r"""
    set_show_additional_representation(int imol, int representation_number, int on_off_flag)

    Parameters
    ----------
    imol: int
    representation_number: int
    on_off_flag: int

    """
    return _coot.set_show_additional_representation(imol, representation_number, on_off_flag)

def set_show_all_additional_representations(imol, on_off_flag):
    r"""
    set_show_all_additional_representations(int imol, int on_off_flag)

    Parameters
    ----------
    imol: int
    on_off_flag: int

    """
    return _coot.set_show_all_additional_representations(imol, on_off_flag)

def all_additional_representations_off_except(imol, representation_number, ball_and_sticks_off_too_flag):
    r"""
    all_additional_representations_off_except(int imol, int representation_number, short ball_and_sticks_off_too_flag)

    Parameters
    ----------
    imol: int
    representation_number: int
    ball_and_sticks_off_too_flag: short

    """
    return _coot.all_additional_representations_off_except(imol, representation_number, ball_and_sticks_off_too_flag)

def delete_additional_representation(imol, representation_number):
    r"""
    delete_additional_representation(int imol, int representation_number)

    Parameters
    ----------
    imol: int
    representation_number: int

    """
    return _coot.delete_additional_representation(imol, representation_number)

def additional_representation_by_string(imol, atom_selection, representation_type, bonds_box_type, bond_width, draw_hydrogens_flag):
    r"""
    additional_representation_by_string(int imol, char const * atom_selection, int representation_type, int bonds_box_type, float bond_width, int draw_hydrogens_flag) -> int

    Parameters
    ----------
    imol: int
    atom_selection: char const *
    representation_type: int
    bonds_box_type: int
    bond_width: float
    draw_hydrogens_flag: int

    """
    return _coot.additional_representation_by_string(imol, atom_selection, representation_type, bonds_box_type, bond_width, draw_hydrogens_flag)

def additional_representation_by_attributes(imol, chain_id, resno_start, resno_end, ins_code, representation_type, bonds_box_type, bond_width, draw_hydrogens_flag):
    r"""
    additional_representation_by_attributes(int imol, char const * chain_id, int resno_start, int resno_end, char const * ins_code, int representation_type, int bonds_box_type, float bond_width, int draw_hydrogens_flag) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno_start: int
    resno_end: int
    ins_code: char const *
    representation_type: int
    bonds_box_type: int
    bond_width: float
    draw_hydrogens_flag: int

    """
    return _coot.additional_representation_by_attributes(imol, chain_id, resno_start, resno_end, ins_code, representation_type, bonds_box_type, bond_width, draw_hydrogens_flag)

def additional_representation_info_py(imol):
    r"""
    additional_representation_info_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.additional_representation_info_py(imol)

def set_flev_idle_ligand_interactions(state):
    r"""
    set_flev_idle_ligand_interactions(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_flev_idle_ligand_interactions(state)

def toggle_flev_idle_ligand_interactions():
    r"""toggle_flev_idle_ligand_interactions()"""
    return _coot.toggle_flev_idle_ligand_interactions()

def calculate_hydrogen_bonds(imol):
    r"""
    calculate_hydrogen_bonds(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.calculate_hydrogen_bonds(imol)

def set_draw_hydrogen_bonds(state):
    r"""
    set_draw_hydrogen_bonds(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_draw_hydrogen_bonds(state)

def dots(imol, atom_selection_str, dots_object_name, dot_density, sphere_size_scale):
    r"""
    dots(int imol, char const * atom_selection_str, char const * dots_object_name, float dot_density, float sphere_size_scale) -> int

    Parameters
    ----------
    imol: int
    atom_selection_str: char const *
    dots_object_name: char const *
    dot_density: float
    sphere_size_scale: float

    """
    return _coot.dots(imol, atom_selection_str, dots_object_name, dot_density, sphere_size_scale)

def set_dots_colour(imol, r, g, b):
    r"""
    set_dots_colour(int imol, float r, float g, float b)

    Parameters
    ----------
    imol: int
    r: float
    g: float
    b: float

    """
    return _coot.set_dots_colour(imol, r, g, b)

def unset_dots_colour(imol):
    r"""
    unset_dots_colour(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.unset_dots_colour(imol)

def clear_dots(imol, dots_handle):
    r"""
    clear_dots(int imol, int dots_handle)

    Parameters
    ----------
    imol: int
    dots_handle: int

    """
    return _coot.clear_dots(imol, dots_handle)

def clear_dots_by_name(imol, dots_object_name):
    r"""
    clear_dots_by_name(int imol, char const * dots_object_name)

    Parameters
    ----------
    imol: int
    dots_object_name: char const *

    """
    return _coot.clear_dots_by_name(imol, dots_object_name)

def n_dots_sets(imol):
    r"""
    n_dots_sets(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.n_dots_sets(imol)

def do_pepflip(state):
    r"""
    do_pepflip(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_pepflip(state)

def pepflip(imol, chain_id, resno, inscode, altconf):
    r"""
    pepflip(int imol, char const * chain_id, int resno, char const * inscode, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    inscode: char const *
    altconf: char const *

    """
    return _coot.pepflip(imol, chain_id, resno, inscode, altconf)

def pepflip_intermediate_atoms():
    r"""pepflip_intermediate_atoms() -> int"""
    return _coot.pepflip_intermediate_atoms()

def pepflip_intermediate_atoms_other_peptide():
    r"""pepflip_intermediate_atoms_other_peptide() -> int"""
    return _coot.pepflip_intermediate_atoms_other_peptide()

def pepflip_using_difference_map_py(imol_coords, imol_difference_map, n_sigma):
    r"""
    pepflip_using_difference_map_py(int imol_coords, int imol_difference_map, float n_sigma) -> PyObject *

    Parameters
    ----------
    imol_coords: int
    imol_difference_map: int
    n_sigma: float

    """
    return _coot.pepflip_using_difference_map_py(imol_coords, imol_difference_map, n_sigma)

def do_rigid_body_refine(state):
    r"""
    do_rigid_body_refine(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_rigid_body_refine(state)

def rigid_body_refine_zone(imol, chain_id, reso_start, resno_end):
    r"""
    rigid_body_refine_zone(int imol, char const * chain_id, int reso_start, int resno_end)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    reso_start: int
    resno_end: int

    """
    return _coot.rigid_body_refine_zone(imol, chain_id, reso_start, resno_end)

def rigid_body_refine_by_atom_selection(imol, atom_selection_string):
    r"""
    rigid_body_refine_by_atom_selection(int imol, char const * atom_selection_string)

    Parameters
    ----------
    imol: int
    atom_selection_string: char const *

    """
    return _coot.rigid_body_refine_by_atom_selection(imol, atom_selection_string)

def rigid_body_refine_by_residue_ranges_py(imol, residue_ranges):
    r"""
    rigid_body_refine_by_residue_ranges_py(int imol, PyObject * residue_ranges) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_ranges: PyObject *

    """
    return _coot.rigid_body_refine_by_residue_ranges_py(imol, residue_ranges)

def execute_rigid_body_refine(auto_range_flag):
    r"""
    execute_rigid_body_refine(short auto_range_flag)

    Parameters
    ----------
    auto_range_flag: short

    """
    return _coot.execute_rigid_body_refine(auto_range_flag)

def set_rigid_body_fit_acceptable_fit_fraction(f):
    r"""
    set_rigid_body_fit_acceptable_fit_fraction(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_rigid_body_fit_acceptable_fit_fraction(f)

def toggle_dynamic_map_display_size():
    r"""toggle_dynamic_map_display_size()"""
    return _coot.toggle_dynamic_map_display_size()

def toggle_dynamic_map_sampling():
    r"""toggle_dynamic_map_sampling()"""
    return _coot.toggle_dynamic_map_sampling()

def set_dynamic_map_size_display_on():
    r"""set_dynamic_map_size_display_on()"""
    return _coot.set_dynamic_map_size_display_on()

def set_dynamic_map_size_display_off():
    r"""set_dynamic_map_size_display_off()"""
    return _coot.set_dynamic_map_size_display_off()

def get_dynamic_map_size_display():
    r"""get_dynamic_map_size_display() -> int"""
    return _coot.get_dynamic_map_size_display()

def set_dynamic_map_sampling_on():
    r"""set_dynamic_map_sampling_on()"""
    return _coot.set_dynamic_map_sampling_on()

def set_dynamic_map_sampling_off():
    r"""set_dynamic_map_sampling_off()"""
    return _coot.set_dynamic_map_sampling_off()

def get_dynamic_map_sampling():
    r"""get_dynamic_map_sampling() -> int"""
    return _coot.get_dynamic_map_sampling()

def set_dynamic_map_zoom_offset(i):
    r"""
    set_dynamic_map_zoom_offset(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_dynamic_map_zoom_offset(i)

def do_add_terminal_residue(state):
    r"""
    do_add_terminal_residue(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_add_terminal_residue(state)

def set_add_terminal_residue_n_phi_psi_trials(n):
    r"""
    set_add_terminal_residue_n_phi_psi_trials(int n)

    Parameters
    ----------
    n: int

    """
    return _coot.set_add_terminal_residue_n_phi_psi_trials(n)

def set_add_terminal_residue_add_other_residue_flag(i):
    r"""
    set_add_terminal_residue_add_other_residue_flag(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_add_terminal_residue_add_other_residue_flag(i)

def set_add_terminal_residue_do_rigid_body_refine(v):
    r"""
    set_add_terminal_residue_do_rigid_body_refine(short v)

    Parameters
    ----------
    v: short

    """
    return _coot.set_add_terminal_residue_do_rigid_body_refine(v)

def set_terminal_residue_do_rigid_body_refine(v):
    r"""
    set_terminal_residue_do_rigid_body_refine(short v)

    Parameters
    ----------
    v: short

    """
    return _coot.set_terminal_residue_do_rigid_body_refine(v)

def set_add_terminal_residue_debug_trials(debug_state):
    r"""
    set_add_terminal_residue_debug_trials(short debug_state)

    Parameters
    ----------
    debug_state: short

    """
    return _coot.set_add_terminal_residue_debug_trials(debug_state)

def add_terminal_residue_immediate_addition_state():
    r"""add_terminal_residue_immediate_addition_state() -> int"""
    return _coot.add_terminal_residue_immediate_addition_state()

def set_add_terminal_residue_immediate_addition(i):
    r"""
    set_add_terminal_residue_immediate_addition(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_add_terminal_residue_immediate_addition(i)

def add_terminal_residue(imol, chain_id, residue_number, residue_type, immediate_add):
    r"""
    add_terminal_residue(int imol, char const * chain_id, int residue_number, char const * residue_type, int immediate_add) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    residue_number: int
    residue_type: char const *
    immediate_add: int

    """
    return _coot.add_terminal_residue(imol, chain_id, residue_number, residue_type, immediate_add)

def add_nucleotide(imol, chain_id, res_no):
    r"""
    add_nucleotide(int imol, char const * chain_id, int res_no) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int

    """
    return _coot.add_nucleotide(imol, chain_id, res_no)

def add_terminal_residue_using_phi_psi(imol, chain_id, res_no, residue_type, phi, psi):
    r"""
    add_terminal_residue_using_phi_psi(int imol, char const * chain_id, int res_no, char const * residue_type, float phi, float psi) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    residue_type: char const *
    phi: float
    psi: float

    """
    return _coot.add_terminal_residue_using_phi_psi(imol, chain_id, res_no, residue_type, phi, psi)

def set_add_terminal_residue_default_residue_type(type):
    r"""
    set_add_terminal_residue_default_residue_type(char const * type)

    Parameters
    ----------
    type: char const *

    """
    return _coot.set_add_terminal_residue_default_residue_type(type)

def set_add_terminal_residue_do_post_refine(istat):
    r"""
    set_add_terminal_residue_do_post_refine(short istat)

    Parameters
    ----------
    istat: short

    """
    return _coot.set_add_terminal_residue_do_post_refine(istat)

def add_terminal_residue_do_post_refine_state():
    r"""add_terminal_residue_do_post_refine_state() -> int"""
    return _coot.add_terminal_residue_do_post_refine_state()

def find_terminal_residue_type_py(imol, chain_id, resno):
    r"""
    find_terminal_residue_type_py(int imol, char const * chain_id, int resno) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int

    """
    return _coot.find_terminal_residue_type_py(imol, chain_id, resno)

def add_residue_with_atoms_py(imol, residue_spec, res_name, list_of_atoms):
    r"""
    add_residue_with_atoms_py(int imol, PyObject * residue_spec, std::string const & res_name, PyObject * list_of_atoms) -> int

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *
    res_name: std::string const &
    list_of_atoms: PyObject *

    """
    return _coot.add_residue_with_atoms_py(imol, residue_spec, res_name, list_of_atoms)

def delete_atom_by_atom_index(imol, index, do_delete_dialog):
    r"""
    delete_atom_by_atom_index(int imol, int index, short do_delete_dialog)

    Parameters
    ----------
    imol: int
    index: int
    do_delete_dialog: short

    """
    return _coot.delete_atom_by_atom_index(imol, index, do_delete_dialog)

def delete_residue_by_atom_index(imol, index, do_delete_dialog):
    r"""
    delete_residue_by_atom_index(int imol, int index, short do_delete_dialog)

    Parameters
    ----------
    imol: int
    index: int
    do_delete_dialog: short

    """
    return _coot.delete_residue_by_atom_index(imol, index, do_delete_dialog)

def delete_residue_hydrogens_by_atom_index(imol, index, do_delete_dialog):
    r"""
    delete_residue_hydrogens_by_atom_index(int imol, int index, short do_delete_dialog)

    Parameters
    ----------
    imol: int
    index: int
    do_delete_dialog: short

    """
    return _coot.delete_residue_hydrogens_by_atom_index(imol, index, do_delete_dialog)

def delete_residue_range(imol, chain_id, resno_start, end_resno):
    r"""
    delete_residue_range(int imol, char const * chain_id, int resno_start, int end_resno)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno_start: int
    end_resno: int

    """
    return _coot.delete_residue_range(imol, chain_id, resno_start, end_resno)

def delete_residue(imol, chain_id, resno, inscode):
    r"""
    delete_residue(int imol, char const * chain_id, int resno, char const * inscode)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    inscode: char const *

    """
    return _coot.delete_residue(imol, chain_id, resno, inscode)

def delete_residue_with_full_spec(imol, imodel, chain_id, resno, inscode, altloc):
    r"""
    delete_residue_with_full_spec(int imol, int imodel, char const * chain_id, int resno, char const * inscode, char const * altloc)

    Parameters
    ----------
    imol: int
    imodel: int
    chain_id: char const *
    resno: int
    inscode: char const *
    altloc: char const *

    """
    return _coot.delete_residue_with_full_spec(imol, imodel, chain_id, resno, inscode, altloc)

def delete_residues_py(imol, residue_specs_py):
    r"""
    delete_residues_py(int imol, PyObject * residue_specs_py)

    Parameters
    ----------
    imol: int
    residue_specs_py: PyObject *

    """
    return _coot.delete_residues_py(imol, residue_specs_py)

def delete_residue_hydrogens(imol, chain_id, resno, inscode, altloc):
    r"""
    delete_residue_hydrogens(int imol, char const * chain_id, int resno, char const * inscode, char const * altloc)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    inscode: char const *
    altloc: char const *

    """
    return _coot.delete_residue_hydrogens(imol, chain_id, resno, inscode, altloc)

def delete_atom(imol, chain_id, resno, ins_code, at_name, altloc):
    r"""
    delete_atom(int imol, char const * chain_id, int resno, char const * ins_code, char const * at_name, char const * altloc)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    at_name: char const *
    altloc: char const *

    """
    return _coot.delete_atom(imol, chain_id, resno, ins_code, at_name, altloc)

def delete_residue_sidechain(imol, chain_id, resno, ins_code, do_delete_dialog):
    r"""
    delete_residue_sidechain(int imol, char const * chain_id, int resno, char const * ins_code, short do_delete_dialog)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    do_delete_dialog: short

    """
    return _coot.delete_residue_sidechain(imol, chain_id, resno, ins_code, do_delete_dialog)

def delete_hydrogen_atoms(imol):
    r"""
    delete_hydrogen_atoms(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.delete_hydrogen_atoms(imol)

def delete_hydrogens(imol):
    r"""
    delete_hydrogens(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.delete_hydrogens(imol)

def delete_waters(imol):
    r"""
    delete_waters(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.delete_waters(imol)

def post_delete_item_dialog():
    r"""post_delete_item_dialog()"""
    return _coot.post_delete_item_dialog()

def set_delete_atom_mode():
    r"""set_delete_atom_mode()"""
    return _coot.set_delete_atom_mode()

def set_delete_residue_mode():
    r"""set_delete_residue_mode()"""
    return _coot.set_delete_residue_mode()

def set_delete_residue_zone_mode():
    r"""set_delete_residue_zone_mode()"""
    return _coot.set_delete_residue_zone_mode()

def set_delete_residue_hydrogens_mode():
    r"""set_delete_residue_hydrogens_mode()"""
    return _coot.set_delete_residue_hydrogens_mode()

def set_delete_water_mode():
    r"""set_delete_water_mode()"""
    return _coot.set_delete_water_mode()

def set_delete_sidechain_mode():
    r"""set_delete_sidechain_mode()"""
    return _coot.set_delete_sidechain_mode()

def set_delete_sidechain_range_mode():
    r"""set_delete_sidechain_range_mode()"""
    return _coot.set_delete_sidechain_range_mode()

def set_delete_chain_mode():
    r"""set_delete_chain_mode()"""
    return _coot.set_delete_chain_mode()

def delete_item_mode_is_atom_p():
    r"""delete_item_mode_is_atom_p() -> short"""
    return _coot.delete_item_mode_is_atom_p()

def delete_item_mode_is_residue_p():
    r"""delete_item_mode_is_residue_p() -> short"""
    return _coot.delete_item_mode_is_residue_p()

def delete_item_mode_is_water_p():
    r"""delete_item_mode_is_water_p() -> short"""
    return _coot.delete_item_mode_is_water_p()

def delete_item_mode_is_sidechain_p():
    r"""delete_item_mode_is_sidechain_p() -> short"""
    return _coot.delete_item_mode_is_sidechain_p()

def delete_item_mode_is_sidechain_range_p():
    r"""delete_item_mode_is_sidechain_range_p() -> short"""
    return _coot.delete_item_mode_is_sidechain_range_p()

def delete_item_mode_is_chain_p():
    r"""delete_item_mode_is_chain_p() -> short"""
    return _coot.delete_item_mode_is_chain_p()

def clear_pending_delete_item():
    r"""clear_pending_delete_item()"""
    return _coot.clear_pending_delete_item()

def do_rot_trans_setup(state):
    r"""
    do_rot_trans_setup(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_rot_trans_setup(state)

def rot_trans_reset_previous():
    r"""rot_trans_reset_previous()"""
    return _coot.rot_trans_reset_previous()

def set_rotate_translate_zone_rotates_about_zone_centre(istate):
    r"""
    set_rotate_translate_zone_rotates_about_zone_centre(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_rotate_translate_zone_rotates_about_zone_centre(istate)

def set_rot_trans_object_type(rt_type):
    r"""
    set_rot_trans_object_type(short rt_type)

    Parameters
    ----------
    rt_type: short

    """
    return _coot.set_rot_trans_object_type(rt_type)

def get_rot_trans_object_type():
    r"""get_rot_trans_object_type() -> int"""
    return _coot.get_rot_trans_object_type()

def do_cis_trans_conversion_setup(istate):
    r"""
    do_cis_trans_conversion_setup(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.do_cis_trans_conversion_setup(istate)

def cis_trans_convert(imol, chain_id, resno, altconf):
    r"""
    cis_trans_convert(int imol, char const * chain_id, int resno, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    altconf: char const *

    """
    return _coot.cis_trans_convert(imol, chain_id, resno, altconf)

def cis_peptides_py(imol):
    r"""
    cis_peptides_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.cis_peptides_py(imol)

def twisted_trans_peptides_py(imol):
    r"""
    twisted_trans_peptides_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.twisted_trans_peptides_py(imol)

def cis_trans_convert_intermediate_atoms():
    r"""cis_trans_convert_intermediate_atoms() -> int"""
    return _coot.cis_trans_convert_intermediate_atoms()

def do_db_main(state):
    r"""
    do_db_main(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.do_db_main(state)

def db_mainchain(imol, chain_id, iresno_start, iresno_end, direction):
    r"""
    db_mainchain(int imol, char const * chain_id, int iresno_start, int iresno_end, char const * direction) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    iresno_start: int
    iresno_end: int
    direction: char const *

    """
    return _coot.db_mainchain(imol, chain_id, iresno_start, iresno_end, direction)

def db_mainchains_fragment(imol, chain_id, res_no):
    r"""
    db_mainchains_fragment(int imol, char const * chain_id, int res_no) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int

    """
    return _coot.db_mainchains_fragment(imol, chain_id, res_no)

def close_molecule(imol):
    r"""
    close_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.close_molecule(imol)

def set_rotamer_search_mode(mode):
    r"""
    set_rotamer_search_mode(int mode)

    Parameters
    ----------
    mode: int

    """
    return _coot.set_rotamer_search_mode(mode)

def rotamer_search_mode_state():
    r"""rotamer_search_mode_state() -> int"""
    return _coot.rotamer_search_mode_state()

def setup_rotamers(state):
    r"""
    setup_rotamers(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_rotamers(state)

def do_rotamers(atom_index, imol):
    r"""
    do_rotamers(int atom_index, int imol)

    Parameters
    ----------
    atom_index: int
    imol: int

    """
    return _coot.do_rotamers(atom_index, imol)

def show_rotamers_dialog(imol, chain_id, resno, ins_code, altconf):
    r"""
    show_rotamers_dialog(int imol, char const * chain_id, int resno, char const * ins_code, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    altconf: char const *

    """
    return _coot.show_rotamers_dialog(imol, chain_id, resno, ins_code, altconf)

def set_rotamer_lowest_probability(f):
    r"""
    set_rotamer_lowest_probability(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_rotamer_lowest_probability(f)

def set_rotamer_check_clashes(i):
    r"""
    set_rotamer_check_clashes(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_rotamer_check_clashes(i)

def auto_fit_best_rotamer(imol_coords, chain_id, resno, insertion_code, altloc, imol_map, clash_flag, lowest_probability):
    r"""
    auto_fit_best_rotamer(int imol_coords, char const * chain_id, int resno, char const * insertion_code, char const * altloc, int imol_map, int clash_flag, float lowest_probability) -> float

    Parameters
    ----------
    imol_coords: int
    chain_id: char const *
    resno: int
    insertion_code: char const *
    altloc: char const *
    imol_map: int
    clash_flag: int
    lowest_probability: float

    """
    return _coot.auto_fit_best_rotamer(imol_coords, chain_id, resno, insertion_code, altloc, imol_map, clash_flag, lowest_probability)

def auto_fit_rotamer_active_residue():
    r"""auto_fit_rotamer_active_residue() -> float"""
    return _coot.auto_fit_rotamer_active_residue()

def set_auto_fit_best_rotamer_clash_flag(i):
    r"""
    set_auto_fit_best_rotamer_clash_flag(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_auto_fit_best_rotamer_clash_flag(i)

def rotamer_score(imol, chain_id, res_no, insertion_code, alt_conf):
    r"""
    rotamer_score(int imol, char const * chain_id, int res_no, char const * insertion_code, char const * alt_conf) -> float

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    insertion_code: char const *
    alt_conf: char const *

    """
    return _coot.rotamer_score(imol, chain_id, res_no, insertion_code, alt_conf)

def setup_auto_fit_rotamer(state):
    r"""
    setup_auto_fit_rotamer(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_auto_fit_rotamer(state)

def n_rotamers(imol, chain_id, resno, ins_code):
    r"""
    n_rotamers(int imol, char const * chain_id, int resno, char const * ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.n_rotamers(imol, chain_id, resno, ins_code)

def set_residue_to_rotamer_number(imol, chain_id, resno, ins_code, alt_conf, rotamer_number):
    r"""
    set_residue_to_rotamer_number(int imol, char const * chain_id, int resno, char const * ins_code, char const * alt_conf, int rotamer_number) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    alt_conf: char const *
    rotamer_number: int

    """
    return _coot.set_residue_to_rotamer_number(imol, chain_id, resno, ins_code, alt_conf, rotamer_number)

def set_residue_to_rotamer_name(imol, chain_id, resno, ins_code, alt_conf, rotamer_name):
    r"""
    set_residue_to_rotamer_name(int imol, char const * chain_id, int resno, char const * ins_code, char const * alt_conf, char const * rotamer_name) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    alt_conf: char const *
    rotamer_name: char const *

    """
    return _coot.set_residue_to_rotamer_name(imol, chain_id, resno, ins_code, alt_conf, rotamer_name)

def get_rotamer_name_py(imol, chain_id, resno, ins_code):
    r"""
    get_rotamer_name_py(int imol, char const * chain_id, int resno, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.get_rotamer_name_py(imol, chain_id, resno, ins_code)

def fill_partial_residues(imol):
    r"""
    fill_partial_residues(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.fill_partial_residues(imol)

def fill_partial_residue(imol, chain_id, resno, inscode):
    r"""
    fill_partial_residue(int imol, char const * chain_id, int resno, char const * inscode)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    inscode: char const *

    """
    return _coot.fill_partial_residue(imol, chain_id, resno, inscode)

def simple_fill_partial_residues(imol):
    r"""
    simple_fill_partial_residues(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.simple_fill_partial_residues(imol)

def missing_atom_info_py(imol):
    r"""
    missing_atom_info_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.missing_atom_info_py(imol)

def rotamer_graphs_py(imol):
    r"""
    rotamer_graphs_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.rotamer_graphs_py(imol)

def do_180_degree_side_chain_flip(imol, chain_id, resno, inscode, altconf):
    r"""
    do_180_degree_side_chain_flip(int imol, char const * chain_id, int resno, char const * inscode, char const * altconf)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    inscode: char const *
    altconf: char const *

    """
    return _coot.do_180_degree_side_chain_flip(imol, chain_id, resno, inscode, altconf)

def setup_180_degree_flip(state):
    r"""
    setup_180_degree_flip(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_180_degree_flip(state)

def side_chain_flip_180_intermediate_atoms():
    r"""side_chain_flip_180_intermediate_atoms() -> int"""
    return _coot.side_chain_flip_180_intermediate_atoms()

def setup_mutate(state):
    r"""
    setup_mutate(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_mutate(state)

def setup_mutate_auto_fit(state):
    r"""
    setup_mutate_auto_fit(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_mutate_auto_fit(state)

def do_mutation(type, is_stub_flag):
    r"""
    do_mutation(char const * type, short is_stub_flag)

    Parameters
    ----------
    type: char const *
    is_stub_flag: short

    """
    return _coot.do_mutation(type, is_stub_flag)

def mutate_active_residue():
    r"""mutate_active_residue()"""
    return _coot.mutate_active_residue()

def progressive_residues_in_chain_check(chain_id, imol):
    r"""
    progressive_residues_in_chain_check(char const * chain_id, int imol) -> short

    Parameters
    ----------
    chain_id: char const *
    imol: int

    """
    return _coot.progressive_residues_in_chain_check(chain_id, imol)

def mutate(imol, chain_id, ires, inscode, target_res_type):
    r"""
    mutate(int imol, char const * chain_id, int ires, char const * inscode, char const * target_res_type) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires: int
    inscode: char const *
    target_res_type: char const *

    """
    return _coot.mutate(imol, chain_id, ires, inscode, target_res_type)

def mutate_base(imol, chain_id, res_no, ins_code, res_type):
    r"""
    mutate_base(int imol, char const * chain_id, int res_no, char const * ins_code, char const * res_type) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    res_type: char const *

    """
    return _coot.mutate_base(imol, chain_id, res_no, ins_code, res_type)

def nudge_residue_sequence(imol, chain_id, res_no_range_start, res_no_range_end, nudge_by, nudge_residue_numbers_also):
    r"""
    nudge_residue_sequence(int imol, char * chain_id, int res_no_range_start, int res_no_range_end, int nudge_by, short nudge_residue_numbers_also) -> int

    Parameters
    ----------
    imol: int
    chain_id: char *
    res_no_range_start: int
    res_no_range_end: int
    nudge_by: int
    nudge_residue_numbers_also: short

    """
    return _coot.nudge_residue_sequence(imol, chain_id, res_no_range_start, res_no_range_end, nudge_by, nudge_residue_numbers_also)

def set_mutate_auto_fit_do_post_refine(istate):
    r"""
    set_mutate_auto_fit_do_post_refine(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_mutate_auto_fit_do_post_refine(istate)

def mutate_auto_fit_do_post_refine_state():
    r"""mutate_auto_fit_do_post_refine_state() -> int"""
    return _coot.mutate_auto_fit_do_post_refine_state()

def set_rotamer_auto_fit_do_post_refine(istate):
    r"""
    set_rotamer_auto_fit_do_post_refine(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_rotamer_auto_fit_do_post_refine(istate)

def rotamer_auto_fit_do_post_refine_state():
    r"""rotamer_auto_fit_do_post_refine_state() -> int"""
    return _coot.rotamer_auto_fit_do_post_refine_state()

def mutate_single_residue_by_serial_number(ires_ser, chain_id, imol, target_res_type):
    r"""
    mutate_single_residue_by_serial_number(int ires_ser, char const * chain_id, int imol, char target_res_type) -> int

    Parameters
    ----------
    ires_ser: int
    chain_id: char const *
    imol: int
    target_res_type: char

    """
    return _coot.mutate_single_residue_by_serial_number(ires_ser, chain_id, imol, target_res_type)

def mutate_single_residue_by_seqno(imol, chain_id, ires, inscode, target_res_type):
    r"""
    mutate_single_residue_by_seqno(int imol, char const * chain_id, int ires, char const * inscode, char target_res_type) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires: int
    inscode: char const *
    target_res_type: char

    """
    return _coot.mutate_single_residue_by_seqno(imol, chain_id, ires, inscode, target_res_type)

def mutate_and_autofit_residue_range(imol, chain_id, start_res_no, stop_res_no, sequence):
    r"""
    mutate_and_autofit_residue_range(int imol, char const * chain_id, int start_res_no, int stop_res_no, char const * sequence) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    start_res_no: int
    stop_res_no: int
    sequence: char const *

    """
    return _coot.mutate_and_autofit_residue_range(imol, chain_id, start_res_no, stop_res_no, sequence)

def do_base_mutation(type):
    r"""
    do_base_mutation(char const * type)

    Parameters
    ----------
    type: char const *

    """
    return _coot.do_base_mutation(type)

def set_residue_type_chooser_stub_state(istat):
    r"""
    set_residue_type_chooser_stub_state(short istat)

    Parameters
    ----------
    istat: short

    """
    return _coot.set_residue_type_chooser_stub_state(istat)

def handle_residue_type_chooser_entry_chose_type(entry_text, stub_mode):
    r"""
    handle_residue_type_chooser_entry_chose_type(char const * entry_text, short stub_mode)

    Parameters
    ----------
    entry_text: char const *
    stub_mode: short

    """
    return _coot.handle_residue_type_chooser_entry_chose_type(entry_text, stub_mode)

def alt_conf_split_type_number():
    r"""alt_conf_split_type_number() -> short"""
    return _coot.alt_conf_split_type_number()

def set_add_alt_conf_split_type_number(i):
    r"""
    set_add_alt_conf_split_type_number(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.set_add_alt_conf_split_type_number(i)

def add_alt_conf_py(imol, chain_id, res_no, ins_code, alt_conf, rotamer_number):
    r"""
    add_alt_conf_py(int imol, char const * chain_id, int res_no, char const * ins_code, char const * alt_conf, int rotamer_number) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    alt_conf: char const *
    rotamer_number: int

    """
    return _coot.add_alt_conf_py(imol, chain_id, res_no, ins_code, alt_conf, rotamer_number)

def unset_add_alt_conf_dialog():
    r"""unset_add_alt_conf_dialog()"""
    return _coot.unset_add_alt_conf_dialog()

def unset_add_alt_conf_define():
    r"""unset_add_alt_conf_define()"""
    return _coot.unset_add_alt_conf_define()

def altconf():
    r"""altconf()"""
    return _coot.altconf()

def set_add_alt_conf_new_atoms_occupancy(f):
    r"""
    set_add_alt_conf_new_atoms_occupancy(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_add_alt_conf_new_atoms_occupancy(f)

def get_add_alt_conf_new_atoms_occupancy():
    r"""get_add_alt_conf_new_atoms_occupancy() -> float"""
    return _coot.get_add_alt_conf_new_atoms_occupancy()

def set_show_alt_conf_intermediate_atoms(i):
    r"""
    set_show_alt_conf_intermediate_atoms(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_show_alt_conf_intermediate_atoms(i)

def show_alt_conf_intermediate_atoms_state():
    r"""show_alt_conf_intermediate_atoms_state() -> int"""
    return _coot.show_alt_conf_intermediate_atoms_state()

def zero_occupancy_residue_range(imol, chain_id, ires1, ires2):
    r"""
    zero_occupancy_residue_range(int imol, char const * chain_id, int ires1, int ires2)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires1: int
    ires2: int

    """
    return _coot.zero_occupancy_residue_range(imol, chain_id, ires1, ires2)

def fill_occupancy_residue_range(imol, chain_id, ires1, ires2):
    r"""
    fill_occupancy_residue_range(int imol, char const * chain_id, int ires1, int ires2)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires1: int
    ires2: int

    """
    return _coot.fill_occupancy_residue_range(imol, chain_id, ires1, ires2)

def set_occupancy_residue_range(imol, chain_id, ires1, ires2, occ):
    r"""
    set_occupancy_residue_range(int imol, char const * chain_id, int ires1, int ires2, float occ)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires1: int
    ires2: int
    occ: float

    """
    return _coot.set_occupancy_residue_range(imol, chain_id, ires1, ires2, occ)

def set_b_factor_residue_range(imol, chain_id, ires1, ires2, bval):
    r"""
    set_b_factor_residue_range(int imol, char const * chain_id, int ires1, int ires2, float bval)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires1: int
    ires2: int
    bval: float

    """
    return _coot.set_b_factor_residue_range(imol, chain_id, ires1, ires2, bval)

def reset_b_factor_residue_range(imol, chain_id, ires1, ires2):
    r"""
    reset_b_factor_residue_range(int imol, char const * chain_id, int ires1, int ires2)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    ires1: int
    ires2: int

    """
    return _coot.reset_b_factor_residue_range(imol, chain_id, ires1, ires2)

def place_atom_at_pointer():
    r"""place_atom_at_pointer()"""
    return _coot.place_atom_at_pointer()

def place_atom_at_pointer_by_window():
    r"""place_atom_at_pointer_by_window()"""
    return _coot.place_atom_at_pointer_by_window()

def place_typed_atom_at_pointer(type):
    r"""
    place_typed_atom_at_pointer(char const * type)

    Parameters
    ----------
    type: char const *

    """
    return _coot.place_typed_atom_at_pointer(type)

def set_pointer_atom_is_dummy(i):
    r"""
    set_pointer_atom_is_dummy(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_pointer_atom_is_dummy(i)

def display_where_is_pointer():
    r"""display_where_is_pointer()"""
    return _coot.display_where_is_pointer()

def create_pointer_atom_molecule_maybe():
    r"""create_pointer_atom_molecule_maybe() -> int"""
    return _coot.create_pointer_atom_molecule_maybe()

def pointer_atom_molecule():
    r"""pointer_atom_molecule() -> int"""
    return _coot.pointer_atom_molecule()

def set_pointer_atom_molecule(imol):
    r"""
    set_pointer_atom_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.set_pointer_atom_molecule(imol)

def set_baton_mode(i):
    r"""
    set_baton_mode(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.set_baton_mode(i)

def try_set_draw_baton(i):
    r"""
    try_set_draw_baton(short i) -> int

    Parameters
    ----------
    i: short

    """
    return _coot.try_set_draw_baton(i)

def accept_baton_position():
    r"""accept_baton_position()"""
    return _coot.accept_baton_position()

def baton_tip_try_another():
    r"""baton_tip_try_another()"""
    return _coot.baton_tip_try_another()

def baton_tip_previous():
    r"""baton_tip_previous()"""
    return _coot.baton_tip_previous()

def shorten_baton():
    r"""shorten_baton()"""
    return _coot.shorten_baton()

def lengthen_baton():
    r"""lengthen_baton()"""
    return _coot.lengthen_baton()

def baton_build_delete_last_residue():
    r"""baton_build_delete_last_residue()"""
    return _coot.baton_build_delete_last_residue()

def set_baton_build_params(istart_resno, chain_id, direction):
    r"""
    set_baton_build_params(int istart_resno, char const * chain_id, char const * direction)

    Parameters
    ----------
    istart_resno: int
    chain_id: char const *
    direction: char const *

    """
    return _coot.set_baton_build_params(istart_resno, chain_id, direction)

def reverse_direction_of_fragment(imol, chain_id, resno):
    r"""
    reverse_direction_of_fragment(int imol, char const * chain_id, int resno)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int

    """
    return _coot.reverse_direction_of_fragment(imol, chain_id, resno)

def setup_reverse_direction(i):
    r"""
    setup_reverse_direction(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.setup_reverse_direction(i)

def add_OXT_to_residue(imol, chain_id, reso, insertion_code):
    r"""
    add_OXT_to_residue(int imol, char const * chain_id, int reso, char const * insertion_code) -> short

    Parameters
    ----------
    imol: int
    chain_id: char const *
    reso: int
    insertion_code: char const *

    """
    return _coot.add_OXT_to_residue(imol, chain_id, reso, insertion_code)

def set_draw_crosshairs(i):
    r"""
    set_draw_crosshairs(short i)

    Parameters
    ----------
    i: short

    """
    return _coot.set_draw_crosshairs(i)

def draw_crosshairs_state():
    r"""draw_crosshairs_state() -> short"""
    return _coot.draw_crosshairs_state()

def setup_edit_chi_angles(state):
    r"""
    setup_edit_chi_angles(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_edit_chi_angles(state)

def rotate_chi(am):
    r"""
    rotate_chi(float am)

    Parameters
    ----------
    am: float

    """
    return _coot.rotate_chi(am)

def set_find_hydrogen_torsions(state):
    r"""
    set_find_hydrogen_torsions(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_find_hydrogen_torsions(state)

def set_graphics_edit_current_chi(ichi):
    r"""
    set_graphics_edit_current_chi(int ichi)

    Parameters
    ----------
    ichi: int

    """
    return _coot.set_graphics_edit_current_chi(ichi)

def unset_moving_atom_move_chis():
    r"""unset_moving_atom_move_chis()"""
    return _coot.unset_moving_atom_move_chis()

def set_moving_atom_move_chis():
    r"""set_moving_atom_move_chis()"""
    return _coot.set_moving_atom_move_chis()

def edit_chi_angles(imol, chain_id, resno, ins_code, altconf):
    r"""
    edit_chi_angles(int imol, char const * chain_id, int resno, char const * ins_code, char const * altconf) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    altconf: char const *

    """
    return _coot.edit_chi_angles(imol, chain_id, resno, ins_code, altconf)

def set_show_chi_angle_bond(imode):
    r"""
    set_show_chi_angle_bond(int imode) -> int

    Parameters
    ----------
    imode: int

    """
    return _coot.set_show_chi_angle_bond(imode)

def set_edit_chi_angles_reverse_fragment_state(istate):
    r"""
    set_edit_chi_angles_reverse_fragment_state(short istate)

    Parameters
    ----------
    istate: short

    """
    return _coot.set_edit_chi_angles_reverse_fragment_state(istate)

def setup_torsion_general(state):
    r"""
    setup_torsion_general(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_torsion_general(state)

def toggle_torsion_general_reverse():
    r"""toggle_torsion_general_reverse()"""
    return _coot.toggle_torsion_general_reverse()

def setup_residue_partial_alt_locs(state):
    r"""
    setup_residue_partial_alt_locs(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.setup_residue_partial_alt_locs(state)

def backrub_rotamer(imol, chain_id, res_no, ins_code, alt_conf):
    r"""
    backrub_rotamer(int imol, char const * chain_id, int res_no, char const * ins_code, char const * alt_conf) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    alt_conf: char const *

    """
    return _coot.backrub_rotamer(imol, chain_id, res_no, ins_code, alt_conf)

def backrub_rotamer_intermediate_atoms():
    r"""backrub_rotamer_intermediate_atoms() -> int"""
    return _coot.backrub_rotamer_intermediate_atoms()

def mask_map_by_molecule(map_mol_no, coord_mol_no, invert_flag):
    r"""
    mask_map_by_molecule(int map_mol_no, int coord_mol_no, short invert_flag) -> int

    Parameters
    ----------
    map_mol_no: int
    coord_mol_no: int
    invert_flag: short

    """
    return _coot.mask_map_by_molecule(map_mol_no, coord_mol_no, invert_flag)

def mask_map_by_atom_selection(map_mol_no, coords_mol_no, mmdb_atom_selection, invert_flag):
    r"""
    mask_map_by_atom_selection(int map_mol_no, int coords_mol_no, char const * mmdb_atom_selection, short invert_flag) -> int

    Parameters
    ----------
    map_mol_no: int
    coords_mol_no: int
    mmdb_atom_selection: char const *
    invert_flag: short

    """
    return _coot.mask_map_by_atom_selection(map_mol_no, coords_mol_no, mmdb_atom_selection, invert_flag)

def make_masked_maps_split_by_chain(imol, imol_map):
    r"""
    make_masked_maps_split_by_chain(int imol, int imol_map) -> int

    Parameters
    ----------
    imol: int
    imol_map: int

    """
    return _coot.make_masked_maps_split_by_chain(imol, imol_map)

def set_map_mask_atom_radius(rad):
    r"""
    set_map_mask_atom_radius(float rad)

    Parameters
    ----------
    rad: float

    """
    return _coot.set_map_mask_atom_radius(rad)

def map_mask_atom_radius():
    r"""map_mask_atom_radius() -> float"""
    return _coot.map_mask_atom_radius()

def set_check_waters_b_factor_limit(f):
    r"""
    set_check_waters_b_factor_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_check_waters_b_factor_limit(f)

def set_check_waters_map_sigma_limit(f):
    r"""
    set_check_waters_map_sigma_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_check_waters_map_sigma_limit(f)

def set_check_waters_min_dist_limit(f):
    r"""
    set_check_waters_min_dist_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_check_waters_min_dist_limit(f)

def set_check_waters_max_dist_limit(f):
    r"""
    set_check_waters_max_dist_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_check_waters_max_dist_limit(f)

def delete_checked_waters_baddies(imol, b_factor_lim, map_sigma_lim, min_dist, max_dist, part_occ_contact_flag, zero_occ_flag, logical_operator_and_or_flag):
    r"""
    delete_checked_waters_baddies(int imol, float b_factor_lim, float map_sigma_lim, float min_dist, float max_dist, short part_occ_contact_flag, short zero_occ_flag, short logical_operator_and_or_flag)

    Parameters
    ----------
    imol: int
    b_factor_lim: float
    map_sigma_lim: float
    min_dist: float
    max_dist: float
    part_occ_contact_flag: short
    zero_occ_flag: short
    logical_operator_and_or_flag: short

    """
    return _coot.delete_checked_waters_baddies(imol, b_factor_lim, map_sigma_lim, min_dist, max_dist, part_occ_contact_flag, zero_occ_flag, logical_operator_and_or_flag)

def check_waters_by_difference_map(imol_waters, imol_diff_map, interactive_flag):
    r"""
    check_waters_by_difference_map(int imol_waters, int imol_diff_map, int interactive_flag)

    Parameters
    ----------
    imol_waters: int
    imol_diff_map: int
    interactive_flag: int

    """
    return _coot.check_waters_by_difference_map(imol_waters, imol_diff_map, interactive_flag)

def check_waters_by_difference_map_sigma_level_state():
    r"""check_waters_by_difference_map_sigma_level_state() -> float"""
    return _coot.check_waters_by_difference_map_sigma_level_state()

def set_check_waters_by_difference_map_sigma_level(f):
    r"""
    set_check_waters_by_difference_map_sigma_level(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_check_waters_by_difference_map_sigma_level(f)

def highly_coordinated_waters_py(imol, coordination_number, dist_max):
    r"""
    highly_coordinated_waters_py(int imol, int coordination_number, float dist_max) -> PyObject *

    Parameters
    ----------
    imol: int
    coordination_number: int
    dist_max: float

    """
    return _coot.highly_coordinated_waters_py(imol, coordination_number, dist_max)

def metal_coordination_py(imol, dist_max):
    r"""
    metal_coordination_py(int imol, float dist_max) -> PyObject *

    Parameters
    ----------
    imol: int
    dist_max: float

    """
    return _coot.metal_coordination_py(imol, dist_max)

def clear_lsq_matches():
    r"""clear_lsq_matches()"""
    return _coot.clear_lsq_matches()

def add_lsq_match(reference_resno_start, reference_resno_end, chain_id_reference, moving_resno_start, moving_resno_end, chain_id_moving, match_type):
    r"""
    add_lsq_match(int reference_resno_start, int reference_resno_end, char const * chain_id_reference, int moving_resno_start, int moving_resno_end, char const * chain_id_moving, int match_type)

    Parameters
    ----------
    reference_resno_start: int
    reference_resno_end: int
    chain_id_reference: char const *
    moving_resno_start: int
    moving_resno_end: int
    chain_id_moving: char const *
    match_type: int

    """
    return _coot.add_lsq_match(reference_resno_start, reference_resno_end, chain_id_reference, moving_resno_start, moving_resno_end, chain_id_moving, match_type)

def add_lsq_atom_pair_py(atom_spec_ref, atom_spec_moving):
    r"""
    add_lsq_atom_pair_py(PyObject * atom_spec_ref, PyObject * atom_spec_moving)

    Parameters
    ----------
    atom_spec_ref: PyObject *
    atom_spec_moving: PyObject *

    """
    return _coot.add_lsq_atom_pair_py(atom_spec_ref, atom_spec_moving)

def apply_lsq_matches_py(imol_reference, imol_moving):
    r"""
    apply_lsq_matches_py(int imol_reference, int imol_moving) -> PyObject *

    Parameters
    ----------
    imol_reference: int
    imol_moving: int

    """
    return _coot.apply_lsq_matches_py(imol_reference, imol_moving)

def get_lsq_matrix_py(imol_reference, imol_moving):
    r"""
    get_lsq_matrix_py(int imol_reference, int imol_moving) -> PyObject *

    Parameters
    ----------
    imol_reference: int
    imol_moving: int

    """
    return _coot.get_lsq_matrix_py(imol_reference, imol_moving)

def apply_lsq_matches_simple(imol_reference, imol_moving):
    r"""
    apply_lsq_matches_simple(int imol_reference, int imol_moving) -> int

    Parameters
    ----------
    imol_reference: int
    imol_moving: int

    """
    return _coot.apply_lsq_matches_simple(imol_reference, imol_moving)

def setup_lsq_deviation(state):
    r"""
    setup_lsq_deviation(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.setup_lsq_deviation(state)

def setup_lsq_plane_define(state):
    r"""
    setup_lsq_plane_define(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.setup_lsq_plane_define(state)

def unset_lsq_plane_dialog():
    r"""unset_lsq_plane_dialog()"""
    return _coot.unset_lsq_plane_dialog()

def remove_last_lsq_plane_atom():
    r"""remove_last_lsq_plane_atom()"""
    return _coot.remove_last_lsq_plane_atom()

def trim_molecule_by_map(imol_coords, imol_map, map_level, delete_or_zero_occ_flag):
    r"""
    trim_molecule_by_map(int imol_coords, int imol_map, float map_level, int delete_or_zero_occ_flag)

    Parameters
    ----------
    imol_coords: int
    imol_map: int
    map_level: float
    delete_or_zero_occ_flag: int

    """
    return _coot.trim_molecule_by_map(imol_coords, imol_map, map_level, delete_or_zero_occ_flag)

def trim_molecule_by_b_factor(imol, limit, keep_higher):
    r"""
    trim_molecule_by_b_factor(int imol, float limit, short keep_higher)

    Parameters
    ----------
    imol: int
    limit: float
    keep_higher: short

    """
    return _coot.trim_molecule_by_b_factor(imol, limit, keep_higher)

def pLDDT_to_b_factor(imol):
    r"""
    pLDDT_to_b_factor(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.pLDDT_to_b_factor(imol)

def raster3d(rd3_filename):
    r"""
    raster3d(char const * rd3_filename)

    Parameters
    ----------
    rd3_filename: char const *

    """
    return _coot.raster3d(rd3_filename)

def povray(filename):
    r"""
    povray(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.povray(filename)

def renderman(rib_filename):
    r"""
    renderman(char const * rib_filename)

    Parameters
    ----------
    rib_filename: char const *

    """
    return _coot.renderman(rib_filename)

def make_image_raster3d(filename):
    r"""
    make_image_raster3d(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.make_image_raster3d(filename)

def make_image_povray(filename):
    r"""
    make_image_povray(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.make_image_povray(filename)

def make_image_raster3d_py(filename):
    r"""
    make_image_raster3d_py(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.make_image_raster3d_py(filename)

def make_image_povray_py(filename):
    r"""
    make_image_povray_py(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.make_image_povray_py(filename)

def set_raster3d_bond_thickness(f):
    r"""
    set_raster3d_bond_thickness(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_raster3d_bond_thickness(f)

def set_raster3d_atom_radius(f):
    r"""
    set_raster3d_atom_radius(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_raster3d_atom_radius(f)

def set_raster3d_density_thickness(f):
    r"""
    set_raster3d_density_thickness(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_raster3d_density_thickness(f)

def set_renderer_show_atoms(istate):
    r"""
    set_renderer_show_atoms(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_renderer_show_atoms(istate)

def set_raster3d_bone_thickness(f):
    r"""
    set_raster3d_bone_thickness(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_raster3d_bone_thickness(f)

def set_raster3d_shadows_enabled(state):
    r"""
    set_raster3d_shadows_enabled(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_raster3d_shadows_enabled(state)

def set_raster3d_water_sphere(istate):
    r"""
    set_raster3d_water_sphere(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_raster3d_water_sphere(istate)

def set_raster3d_font_size(size_in):
    r"""
    set_raster3d_font_size(char const * size_in)

    Parameters
    ----------
    size_in: char const *

    """
    return _coot.set_raster3d_font_size(size_in)

def raster_screen_shot():
    r"""raster_screen_shot()"""
    return _coot.raster_screen_shot()

def raster_screen_shot_py():
    r"""raster_screen_shot_py()"""
    return _coot.raster_screen_shot_py()

def citation_notice_off():
    r"""citation_notice_off()"""
    return _coot.citation_notice_off()

def superpose(imol1, imol2, move_imol2_flag):
    r"""
    superpose(int imol1, int imol2, short move_imol2_flag)

    Parameters
    ----------
    imol1: int
    imol2: int
    move_imol2_flag: short

    """
    return _coot.superpose(imol1, imol2, move_imol2_flag)

def superpose_with_chain_selection(imol1, imol2, chain_imol1, chain_imol2, chain_used_flag_imol1, chain_used_flag_imol2, move_imol2_copy_flag):
    r"""
    superpose_with_chain_selection(int imol1, int imol2, char const * chain_imol1, char const * chain_imol2, int chain_used_flag_imol1, int chain_used_flag_imol2, short move_imol2_copy_flag)

    Parameters
    ----------
    imol1: int
    imol2: int
    chain_imol1: char const *
    chain_imol2: char const *
    chain_used_flag_imol1: int
    chain_used_flag_imol2: int
    move_imol2_copy_flag: short

    """
    return _coot.superpose_with_chain_selection(imol1, imol2, chain_imol1, chain_imol2, chain_used_flag_imol1, chain_used_flag_imol2, move_imol2_copy_flag)

def superpose_with_atom_selection(imol1, imol2, mmdb_atom_sel_str_1, mmdb_atom_sel_str_2, move_imol2_copy_flag):
    r"""
    superpose_with_atom_selection(int imol1, int imol2, char const * mmdb_atom_sel_str_1, char const * mmdb_atom_sel_str_2, short move_imol2_copy_flag) -> int

    Parameters
    ----------
    imol1: int
    imol2: int
    mmdb_atom_sel_str_1: char const *
    mmdb_atom_sel_str_2: char const *
    move_imol2_copy_flag: short

    """
    return _coot.superpose_with_atom_selection(imol1, imol2, mmdb_atom_sel_str_1, mmdb_atom_sel_str_2, move_imol2_copy_flag)

def set_draw_ncs_ghosts(imol, istate):
    r"""
    set_draw_ncs_ghosts(int imol, int istate)

    Parameters
    ----------
    imol: int
    istate: int

    """
    return _coot.set_draw_ncs_ghosts(imol, istate)

def draw_ncs_ghosts_state(imol):
    r"""
    draw_ncs_ghosts_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.draw_ncs_ghosts_state(imol)

def set_ncs_ghost_bond_thickness(imol, f):
    r"""
    set_ncs_ghost_bond_thickness(int imol, float f)

    Parameters
    ----------
    imol: int
    f: float

    """
    return _coot.set_ncs_ghost_bond_thickness(imol, f)

def ncs_update_ghosts(imol):
    r"""
    ncs_update_ghosts(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.ncs_update_ghosts(imol)

def make_dynamically_transformed_ncs_maps(imol_model, imol_map, overwrite_maps_of_same_name_flag):
    r"""
    make_dynamically_transformed_ncs_maps(int imol_model, int imol_map, int overwrite_maps_of_same_name_flag) -> int

    Parameters
    ----------
    imol_model: int
    imol_map: int
    overwrite_maps_of_same_name_flag: int

    """
    return _coot.make_dynamically_transformed_ncs_maps(imol_model, imol_map, overwrite_maps_of_same_name_flag)

def make_ncs_ghosts_maybe(imol):
    r"""
    make_ncs_ghosts_maybe(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.make_ncs_ghosts_maybe(imol)

def add_ncs_matrix(imol, this_chain_id, target_chain_id, m11, m12, m13, m21, m22, m23, m31, m32, m33, t1, t2, t3):
    r"""
    add_ncs_matrix(int imol, char const * this_chain_id, char const * target_chain_id, float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float t1, float t2, float t3)

    Parameters
    ----------
    imol: int
    this_chain_id: char const *
    target_chain_id: char const *
    m11: float
    m12: float
    m13: float
    m21: float
    m22: float
    m23: float
    m31: float
    m32: float
    m33: float
    t1: float
    t2: float
    t3: float

    """
    return _coot.add_ncs_matrix(imol, this_chain_id, target_chain_id, m11, m12, m13, m21, m22, m23, m31, m32, m33, t1, t2, t3)

def clear_ncs_ghost_matrices(imol):
    r"""
    clear_ncs_ghost_matrices(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.clear_ncs_ghost_matrices(imol)

def add_strict_ncs_matrix(imol, this_chain_id, target_chain_id, m11, m12, m13, m21, m22, m23, m31, m32, m33, t1, t2, t3):
    r"""
    add_strict_ncs_matrix(int imol, char const * this_chain_id, char const * target_chain_id, float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float t1, float t2, float t3) -> int

    Parameters
    ----------
    imol: int
    this_chain_id: char const *
    target_chain_id: char const *
    m11: float
    m12: float
    m13: float
    m21: float
    m22: float
    m23: float
    m31: float
    m32: float
    m33: float
    t1: float
    t2: float
    t3: float

    """
    return _coot.add_strict_ncs_matrix(imol, this_chain_id, target_chain_id, m11, m12, m13, m21, m22, m23, m31, m32, m33, t1, t2, t3)

def add_strict_ncs_from_mtrix_from_self_file(imol):
    r"""
    add_strict_ncs_from_mtrix_from_self_file(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.add_strict_ncs_from_mtrix_from_self_file(imol)

def show_strict_ncs_state(imol):
    r"""
    show_strict_ncs_state(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.show_strict_ncs_state(imol)

def set_show_strict_ncs(imol, state):
    r"""
    set_show_strict_ncs(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_show_strict_ncs(imol, state)

def set_ncs_homology_level(flev):
    r"""
    set_ncs_homology_level(float flev)

    Parameters
    ----------
    flev: float

    """
    return _coot.set_ncs_homology_level(flev)

def copy_chain(imol, from_chain, to_chain):
    r"""
    copy_chain(int imol, char const * from_chain, char const * to_chain)

    Parameters
    ----------
    imol: int
    from_chain: char const *
    to_chain: char const *

    """
    return _coot.copy_chain(imol, from_chain, to_chain)

def copy_from_ncs_master_to_others(imol, chain_id):
    r"""
    copy_from_ncs_master_to_others(int imol, char const * chain_id)

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.copy_from_ncs_master_to_others(imol, chain_id)

def copy_residue_range_from_ncs_master_to_others(imol, master_chain_id, residue_range_start, residue_range_end):
    r"""
    copy_residue_range_from_ncs_master_to_others(int imol, char const * master_chain_id, int residue_range_start, int residue_range_end)

    Parameters
    ----------
    imol: int
    master_chain_id: char const *
    residue_range_start: int
    residue_range_end: int

    """
    return _coot.copy_residue_range_from_ncs_master_to_others(imol, master_chain_id, residue_range_start, residue_range_end)

def copy_from_ncs_master_to_specific_other_chains_py(imol, chain_id, other_chain_id_list_py):
    r"""
    copy_from_ncs_master_to_specific_other_chains_py(int imol, char const * chain_id, PyObject * other_chain_id_list_py)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    other_chain_id_list_py: PyObject *

    """
    return _coot.copy_from_ncs_master_to_specific_other_chains_py(imol, chain_id, other_chain_id_list_py)

def ncs_master_chains_py(imol):
    r"""
    ncs_master_chains_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.ncs_master_chains_py(imol)

def copy_residue_range_from_ncs_master_to_chains_py(imol, master_chain_id, residue_range_start, residue_range_end, chain_id_list):
    r"""
    copy_residue_range_from_ncs_master_to_chains_py(int imol, char const * master_chain_id, int residue_range_start, int residue_range_end, PyObject * chain_id_list)

    Parameters
    ----------
    imol: int
    master_chain_id: char const *
    residue_range_start: int
    residue_range_end: int
    chain_id_list: PyObject *

    """
    return _coot.copy_residue_range_from_ncs_master_to_chains_py(imol, master_chain_id, residue_range_start, residue_range_end, chain_id_list)

def copy_from_ncs_master_to_chains_py(imol, master_chain_id, chain_id_list):
    r"""
    copy_from_ncs_master_to_chains_py(int imol, char const * master_chain_id, PyObject * chain_id_list)

    Parameters
    ----------
    imol: int
    master_chain_id: char const *
    chain_id_list: PyObject *

    """
    return _coot.copy_from_ncs_master_to_chains_py(imol, master_chain_id, chain_id_list)

def ncs_control_change_ncs_master_to_chain(imol, ichain):
    r"""
    ncs_control_change_ncs_master_to_chain(int imol, int ichain)

    Parameters
    ----------
    imol: int
    ichain: int

    """
    return _coot.ncs_control_change_ncs_master_to_chain(imol, ichain)

def ncs_control_change_ncs_master_to_chain_id(imol, chain_id):
    r"""
    ncs_control_change_ncs_master_to_chain_id(int imol, char const * chain_id)

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.ncs_control_change_ncs_master_to_chain_id(imol, chain_id)

def ncs_control_display_chain(imol, ichain, state):
    r"""
    ncs_control_display_chain(int imol, int ichain, int state)

    Parameters
    ----------
    imol: int
    ichain: int
    state: int

    """
    return _coot.ncs_control_display_chain(imol, ichain, state)

def set_ncs_matrix_type(flag):
    r"""
    set_ncs_matrix_type(int flag)

    Parameters
    ----------
    flag: int

    """
    return _coot.set_ncs_matrix_type(flag)

def get_ncs_matrix_state():
    r"""get_ncs_matrix_state() -> int"""
    return _coot.get_ncs_matrix_state()

def ncs_chain_differences_py(imol, master_chain_id):
    r"""
    ncs_chain_differences_py(int imol, char const * master_chain_id) -> PyObject *

    Parameters
    ----------
    imol: int
    master_chain_id: char const *

    """
    return _coot.ncs_chain_differences_py(imol, master_chain_id)

def ncs_chain_ids_py(imol):
    r"""
    ncs_chain_ids_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.ncs_chain_ids_py(imol)

def ncs_ghosts_py(imol):
    r"""
    ncs_ghosts_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.ncs_ghosts_py(imol)
FIND_SECSTRUC_NORMAL = _coot.FIND_SECSTRUC_NORMAL

FIND_SECSTRUC_STRICT = _coot.FIND_SECSTRUC_STRICT

FIND_SECSTRUC_HI_RES = _coot.FIND_SECSTRUC_HI_RES

FIND_SECSTRUC_LO_RES = _coot.FIND_SECSTRUC_LO_RES


def place_helix_here():
    r"""place_helix_here() -> int"""
    return _coot.place_helix_here()

def place_strand_here(n_residues, n_sample_strands):
    r"""
    place_strand_here(int n_residues, int n_sample_strands) -> int

    Parameters
    ----------
    n_residues: int
    n_sample_strands: int

    """
    return _coot.place_strand_here(n_residues, n_sample_strands)

def set_place_helix_here_fudge_factor(ff):
    r"""
    set_place_helix_here_fudge_factor(float ff)

    Parameters
    ----------
    ff: float

    """
    return _coot.set_place_helix_here_fudge_factor(ff)

def place_strand_here_dialog():
    r"""place_strand_here_dialog()"""
    return _coot.place_strand_here_dialog()

def find_helices():
    r"""find_helices() -> int"""
    return _coot.find_helices()

def find_strands():
    r"""find_strands() -> int"""
    return _coot.find_strands()

def find_secondary_structure(use_helix, helix_length, helix_target, use_strand, strand_length, strand_target):
    r"""
    find_secondary_structure(short use_helix, int helix_length, int helix_target, short use_strand, int strand_length, int strand_target) -> int

    Parameters
    ----------
    use_helix: short
    helix_length: int
    helix_target: int
    use_strand: short
    strand_length: int
    strand_target: int

    """
    return _coot.find_secondary_structure(use_helix, helix_length, helix_target, use_strand, strand_length, strand_target)

def find_secondary_structure_local(use_helix, helix_length, helix_target, use_strand, strand_length, strand_target, radius):
    r"""
    find_secondary_structure_local(short use_helix, int helix_length, int helix_target, short use_strand, int strand_length, int strand_target, float radius) -> int

    Parameters
    ----------
    use_helix: short
    helix_length: int
    helix_target: int
    use_strand: short
    strand_length: int
    strand_target: int
    radius: float

    """
    return _coot.find_secondary_structure_local(use_helix, helix_length, helix_target, use_strand, strand_length, strand_target, radius)

def find_nucleic_acids_local(radius):
    r"""
    find_nucleic_acids_local(float radius) -> int

    Parameters
    ----------
    radius: float

    """
    return _coot.find_nucleic_acids_local(radius)

def new_molecule_by_residue_type_selection(imol, residue_type):
    r"""
    new_molecule_by_residue_type_selection(int imol, char const * residue_type) -> int

    Parameters
    ----------
    imol: int
    residue_type: char const *

    """
    return _coot.new_molecule_by_residue_type_selection(imol, residue_type)

def new_molecule_by_atom_selection(imol, atom_selection):
    r"""
    new_molecule_by_atom_selection(int imol, char const * atom_selection) -> int

    Parameters
    ----------
    imol: int
    atom_selection: char const *

    """
    return _coot.new_molecule_by_atom_selection(imol, atom_selection)

def new_molecule_by_sphere_selection(imol, x, y, z, r, allow_partial_residues):
    r"""
    new_molecule_by_sphere_selection(int imol, float x, float y, float z, float r, short allow_partial_residues) -> int

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float
    r: float
    allow_partial_residues: short

    """
    return _coot.new_molecule_by_sphere_selection(imol, x, y, z, r, allow_partial_residues)

def new_molecule_by_residue_specs_py(imol, residue_spec_list_py):
    r"""
    new_molecule_by_residue_specs_py(int imol, PyObject * residue_spec_list_py) -> int

    Parameters
    ----------
    imol: int
    residue_spec_list_py: PyObject *

    """
    return _coot.new_molecule_by_residue_specs_py(imol, residue_spec_list_py)

def set_axis_orientation_matrix(m11, m12, m13, m21, m22, m23, m31, m32, m33):
    r"""
    set_axis_orientation_matrix(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33)

    Parameters
    ----------
    m11: float
    m12: float
    m13: float
    m21: float
    m22: float
    m23: float
    m31: float
    m32: float
    m33: float

    """
    return _coot.set_axis_orientation_matrix(m11, m12, m13, m21, m22, m23, m31, m32, m33)

def set_axis_orientation_matrix_usage(state):
    r"""
    set_axis_orientation_matrix_usage(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_axis_orientation_matrix_usage(state)

def ideal_nucleic_acid(RNA_or_DNA, form, single_stranged_flag, sequence):
    r"""
    ideal_nucleic_acid(char const * RNA_or_DNA, char const * form, short single_stranged_flag, char const * sequence) -> int

    Parameters
    ----------
    RNA_or_DNA: char const *
    form: char const *
    single_stranged_flag: short
    sequence: char const *

    """
    return _coot.ideal_nucleic_acid(RNA_or_DNA, form, single_stranged_flag, sequence)

def pucker_info_py(imol, residue_spec, do_pukka_pucker_check):
    r"""
    pucker_info_py(int imol, PyObject * residue_spec, int do_pukka_pucker_check) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *
    do_pukka_pucker_check: int

    """
    return _coot.pucker_info_py(imol, residue_spec, do_pukka_pucker_check)

def watson_crick_pair(imol, chain_id, resno):
    r"""
    watson_crick_pair(int imol, char const * chain_id, int resno) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int

    """
    return _coot.watson_crick_pair(imol, chain_id, resno)

def watson_crick_pair_for_residue_range(imol, chain_id, resno_start, resno_end):
    r"""
    watson_crick_pair_for_residue_range(int imol, char const * chain_id, int resno_start, int resno_end) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno_start: int
    resno_end: int

    """
    return _coot.watson_crick_pair_for_residue_range(imol, chain_id, resno_start, resno_end)

def setup_base_pairing(state):
    r"""
    setup_base_pairing(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.setup_base_pairing(state)

def print_sequence_chain(imol, chain_id):
    r"""
    print_sequence_chain(int imol, char const * chain_id)

    Parameters
    ----------
    imol: int
    chain_id: char const *

    """
    return _coot.print_sequence_chain(imol, chain_id)

def print_sequence_chain_general(imol, chain_id, pir_format, file_output, file_name):
    r"""
    print_sequence_chain_general(int imol, char const * chain_id, short pir_format, short file_output, char const * file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    pir_format: short
    file_output: short
    file_name: char const *

    """
    return _coot.print_sequence_chain_general(imol, chain_id, pir_format, file_output, file_name)

def assign_fasta_sequence(imol, chain_id_in, seq):
    r"""
    assign_fasta_sequence(int imol, char const * chain_id_in, char const * seq)

    Parameters
    ----------
    imol: int
    chain_id_in: char const *
    seq: char const *

    """
    return _coot.assign_fasta_sequence(imol, chain_id_in, seq)

def assign_pir_sequence(imol, chain_id_in, seq):
    r"""
    assign_pir_sequence(int imol, char const * chain_id_in, char const * seq)

    Parameters
    ----------
    imol: int
    chain_id_in: char const *
    seq: char const *

    """
    return _coot.assign_pir_sequence(imol, chain_id_in, seq)

def assign_sequence(imol_model, imol_map, chain_id):
    r"""
    assign_sequence(int imol_model, int imol_map, char const * chain_id)

    Parameters
    ----------
    imol_model: int
    imol_map: int
    chain_id: char const *

    """
    return _coot.assign_sequence(imol_model, imol_map, chain_id)

def assign_sequence_from_file(imol, file):
    r"""
    assign_sequence_from_file(int imol, char const * file)

    Parameters
    ----------
    imol: int
    file: char const *

    """
    return _coot.assign_sequence_from_file(imol, file)

def assign_sequence_from_string(imol, chain_id_in, seq):
    r"""
    assign_sequence_from_string(int imol, char const * chain_id_in, char const * seq)

    Parameters
    ----------
    imol: int
    chain_id_in: char const *
    seq: char const *

    """
    return _coot.assign_sequence_from_string(imol, chain_id_in, seq)

def delete_all_sequences_from_molecule(imol):
    r"""
    delete_all_sequences_from_molecule(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.delete_all_sequences_from_molecule(imol)

def delete_sequence_by_chain_id(imol, chain_id_in):
    r"""
    delete_sequence_by_chain_id(int imol, char const * chain_id_in)

    Parameters
    ----------
    imol: int
    chain_id_in: char const *

    """
    return _coot.delete_sequence_by_chain_id(imol, chain_id_in)

def associate_sequence_from_file(imol, file_name):
    r"""
    associate_sequence_from_file(int imol, char const * file_name)

    Parameters
    ----------
    imol: int
    file_name: char const *

    """
    return _coot.associate_sequence_from_file(imol, file_name)

def sequence_info_py(imol):
    r"""
    sequence_info_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.sequence_info_py(imol)

def alignment_mismatches_py(imol):
    r"""
    alignment_mismatches_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.alignment_mismatches_py(imol)

def do_surface(imol, istate):
    r"""
    do_surface(int imol, int istate)

    Parameters
    ----------
    imol: int
    istate: int

    """
    return _coot.do_surface(imol, istate)

def molecule_is_drawn_as_surface_int(imol):
    r"""
    molecule_is_drawn_as_surface_int(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.molecule_is_drawn_as_surface_int(imol)

def do_clipped_surface_py(imol, residue_specs):
    r"""
    do_clipped_surface_py(int imol, PyObject * residue_specs)

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *

    """
    return _coot.do_clipped_surface_py(imol, residue_specs)

def set_electrostatic_surface_charge_range(v):
    r"""
    set_electrostatic_surface_charge_range(float v)

    Parameters
    ----------
    v: float

    """
    return _coot.set_electrostatic_surface_charge_range(v)

def get_electrostatic_surface_charge_range():
    r"""get_electrostatic_surface_charge_range() -> float"""
    return _coot.get_electrostatic_surface_charge_range()

def set_transparent_electrostatic_surface(imol, opacity):
    r"""
    set_transparent_electrostatic_surface(int imol, float opacity)

    Parameters
    ----------
    imol: int
    opacity: float

    """
    return _coot.set_transparent_electrostatic_surface(imol, opacity)

def get_electrostatic_surface_opacity(imol):
    r"""
    get_electrostatic_surface_opacity(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.get_electrostatic_surface_opacity(imol)

def fffear_search(imol_model, imol_map):
    r"""
    fffear_search(int imol_model, int imol_map) -> int

    Parameters
    ----------
    imol_model: int
    imol_map: int

    """
    return _coot.fffear_search(imol_model, imol_map)

def set_fffear_angular_resolution(f):
    r"""
    set_fffear_angular_resolution(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_fffear_angular_resolution(f)

def fffear_angular_resolution():
    r"""fffear_angular_resolution() -> float"""
    return _coot.fffear_angular_resolution()

def make_socket_listener_maybe():
    r"""make_socket_listener_maybe()"""
    return _coot.make_socket_listener_maybe()

def set_coot_listener_socket_state_internal(sock_state):
    r"""
    set_coot_listener_socket_state_internal(int sock_state)

    Parameters
    ----------
    sock_state: int

    """
    return _coot.set_coot_listener_socket_state_internal(sock_state)

def set_socket_string_waiting(s):
    r"""
    set_socket_string_waiting(char const * s)

    Parameters
    ----------
    s: char const *

    """
    return _coot.set_socket_string_waiting(s)

def set_socket_python_string_waiting(s):
    r"""
    set_socket_python_string_waiting(char const * s)

    Parameters
    ----------
    s: char const *

    """
    return _coot.set_socket_python_string_waiting(s)

def set_remote_control_port(port_number):
    r"""
    set_remote_control_port(int port_number)

    Parameters
    ----------
    port_number: int

    """
    return _coot.set_remote_control_port(port_number)

def get_remote_control_port_number():
    r"""get_remote_control_port_number() -> int"""
    return _coot.get_remote_control_port_number()

def set_tip_of_the_day_flag(state):
    r"""
    set_tip_of_the_day_flag(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_tip_of_the_day_flag(state)

def set_display_lists_for_maps(i):
    r"""
    set_display_lists_for_maps(int i)

    Parameters
    ----------
    i: int

    """
    return _coot.set_display_lists_for_maps(i)

def display_lists_for_maps_state():
    r"""display_lists_for_maps_state() -> int"""
    return _coot.display_lists_for_maps_state()

def update_maps():
    r"""update_maps()"""
    return _coot.update_maps()

def browser_url(url):
    r"""
    browser_url(char const * url)

    Parameters
    ----------
    url: char const *

    """
    return _coot.browser_url(url)

def set_browser_interface(browser):
    r"""
    set_browser_interface(char const * browser)

    Parameters
    ----------
    browser: char const *

    """
    return _coot.set_browser_interface(browser)

def handle_online_coot_search_request(entry_text):
    r"""
    handle_online_coot_search_request(char const * entry_text)

    Parameters
    ----------
    entry_text: char const *

    """
    return _coot.handle_online_coot_search_request(entry_text)

def handle_read_draw_probe_dots(dots_file):
    r"""
    handle_read_draw_probe_dots(char const * dots_file)

    Parameters
    ----------
    dots_file: char const *

    """
    return _coot.handle_read_draw_probe_dots(dots_file)

def handle_read_draw_probe_dots_unformatted(dots_file, imol, show_clash_gui_flag):
    r"""
    handle_read_draw_probe_dots_unformatted(char const * dots_file, int imol, int show_clash_gui_flag)

    Parameters
    ----------
    dots_file: char const *
    imol: int
    show_clash_gui_flag: int

    """
    return _coot.handle_read_draw_probe_dots_unformatted(dots_file, imol, show_clash_gui_flag)

def set_do_probe_dots_on_rotamers_and_chis(state):
    r"""
    set_do_probe_dots_on_rotamers_and_chis(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_do_probe_dots_on_rotamers_and_chis(state)

def do_probe_dots_on_rotamers_and_chis_state():
    r"""do_probe_dots_on_rotamers_and_chis_state() -> short"""
    return _coot.do_probe_dots_on_rotamers_and_chis_state()

def set_do_probe_dots_post_refine(state):
    r"""
    set_do_probe_dots_post_refine(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_do_probe_dots_post_refine(state)

def do_probe_dots_post_refine_state():
    r"""do_probe_dots_post_refine_state() -> short"""
    return _coot.do_probe_dots_post_refine_state()

def set_do_coot_probe_dots_during_refine(state):
    r"""
    set_do_coot_probe_dots_during_refine(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_do_coot_probe_dots_during_refine(state)

def get_do_coot_probe_dots_during_refine():
    r"""get_do_coot_probe_dots_during_refine() -> short"""
    return _coot.get_do_coot_probe_dots_during_refine()

def unmangle_hydrogen_name(pdb_hydrogen_name):
    r"""
    unmangle_hydrogen_name(char const * pdb_hydrogen_name) -> char *

    Parameters
    ----------
    pdb_hydrogen_name: char const *

    """
    return _coot.unmangle_hydrogen_name(pdb_hydrogen_name)

def set_interactive_probe_dots_molprobity_radius(r):
    r"""
    set_interactive_probe_dots_molprobity_radius(float r)

    Parameters
    ----------
    r: float

    """
    return _coot.set_interactive_probe_dots_molprobity_radius(r)

def interactive_probe_dots_molprobity_radius():
    r"""interactive_probe_dots_molprobity_radius() -> float"""
    return _coot.interactive_probe_dots_molprobity_radius()

def user_mods_py(file_name):
    r"""
    user_mods_py(char const * file_name) -> PyObject *

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.user_mods_py(file_name)

def sharpen(imol, b_factor):
    r"""
    sharpen(int imol, float b_factor)

    Parameters
    ----------
    imol: int
    b_factor: float

    """
    return _coot.sharpen(imol, b_factor)

def sharpen_with_gompertz_scaling(imol, b_factor, try_gompertz, gompertz_factor):
    r"""
    sharpen_with_gompertz_scaling(int imol, float b_factor, short try_gompertz, float gompertz_factor)

    Parameters
    ----------
    imol: int
    b_factor: float
    try_gompertz: short
    gompertz_factor: float

    """
    return _coot.sharpen_with_gompertz_scaling(imol, b_factor, try_gompertz, gompertz_factor)

def set_map_sharpening_scale_limit(f):
    r"""
    set_map_sharpening_scale_limit(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_map_sharpening_scale_limit(f)

def optimal_B_kurtosis(imol):
    r"""
    optimal_B_kurtosis(int imol) -> float

    Parameters
    ----------
    imol: int

    """
    return _coot.optimal_B_kurtosis(imol)

def drag_intermediate_atom_py(atom_spec, position):
    r"""
    drag_intermediate_atom_py(PyObject * atom_spec, PyObject * position) -> PyObject *

    Parameters
    ----------
    atom_spec: PyObject *
    position: PyObject *

    """
    return _coot.drag_intermediate_atom_py(atom_spec, position)

def add_target_position_restraint_for_intermediate_atom_py(atom_spec, position):
    r"""
    add_target_position_restraint_for_intermediate_atom_py(PyObject * atom_spec, PyObject * position) -> PyObject *

    Parameters
    ----------
    atom_spec: PyObject *
    position: PyObject *

    """
    return _coot.add_target_position_restraint_for_intermediate_atom_py(atom_spec, position)

def add_target_position_restraints_for_intermediate_atoms_py(atom_spec_position_list):
    r"""
    add_target_position_restraints_for_intermediate_atoms_py(PyObject * atom_spec_position_list) -> PyObject *

    Parameters
    ----------
    atom_spec_position_list: PyObject *

    """
    return _coot.add_target_position_restraints_for_intermediate_atoms_py(atom_spec_position_list)

def mark_atom_as_fixed_py(imol, atom_spec, state):
    r"""
    mark_atom_as_fixed_py(int imol, PyObject * atom_spec, int state) -> PyObject *

    Parameters
    ----------
    imol: int
    atom_spec: PyObject *
    state: int

    """
    return _coot.mark_atom_as_fixed_py(imol, atom_spec, state)

def mark_multiple_atoms_as_fixed_py(imol, atom_spec_list, state):
    r"""
    mark_multiple_atoms_as_fixed_py(int imol, PyObject * atom_spec_list, int state) -> int

    Parameters
    ----------
    imol: int
    atom_spec_list: PyObject *
    state: int

    """
    return _coot.mark_multiple_atoms_as_fixed_py(imol, atom_spec_list, state)

def setup_fixed_atom_pick(ipick, is_unpick):
    r"""
    setup_fixed_atom_pick(short ipick, short is_unpick)

    Parameters
    ----------
    ipick: short
    is_unpick: short

    """
    return _coot.setup_fixed_atom_pick(ipick, is_unpick)

def clear_all_fixed_atoms(imol):
    r"""
    clear_all_fixed_atoms(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.clear_all_fixed_atoms(imol)

def clear_fixed_atoms_all():
    r"""clear_fixed_atoms_all()"""
    return _coot.clear_fixed_atoms_all()

def set_debug_atom_picking(istate):
    r"""
    set_debug_atom_picking(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_debug_atom_picking(istate)

def show_partial_charge_info(imol, chain_id, resno, ins_code):
    r"""
    show_partial_charge_info(int imol, char const * chain_id, int resno, char const * ins_code)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.show_partial_charge_info(imol, chain_id, resno, ins_code)

def scale_cell(imol_map, fac_u, fac_v, fac_w):
    r"""
    scale_cell(int imol_map, float fac_u, float fac_v, float fac_w) -> int

    Parameters
    ----------
    imol_map: int
    fac_u: float
    fac_v: float
    fac_w: float

    """
    return _coot.scale_cell(imol_map, fac_u, fac_v, fac_w)

def segment_map(imol_map, low_level):
    r"""
    segment_map(int imol_map, float low_level)

    Parameters
    ----------
    imol_map: int
    low_level: float

    """
    return _coot.segment_map(imol_map, low_level)

def segment_map_multi_scale(imol_map, low_level, b_factor_inc, n_rounds):
    r"""
    segment_map_multi_scale(int imol_map, float low_level, float b_factor_inc, int n_rounds)

    Parameters
    ----------
    imol_map: int
    low_level: float
    b_factor_inc: float
    n_rounds: int

    """
    return _coot.segment_map_multi_scale(imol_map, low_level, b_factor_inc, n_rounds)

def map_histogram(imol_map):
    r"""
    map_histogram(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.map_histogram(imol_map)

def set_ignore_pseudo_zeros_for_map_stats(state):
    r"""
    set_ignore_pseudo_zeros_for_map_stats(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_ignore_pseudo_zeros_for_map_stats(state)

def ccp4i_projects_py():
    r"""ccp4i_projects_py() -> PyObject *"""
    return _coot.ccp4i_projects_py()

def set_add_ccp4i_projects_to_file_dialogs(state):
    r"""
    set_add_ccp4i_projects_to_file_dialogs(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_add_ccp4i_projects_to_file_dialogs(state)

def write_ccp4mg_picture_description(filename):
    r"""
    write_ccp4mg_picture_description(char const * filename)

    Parameters
    ----------
    filename: char const *

    """
    return _coot.write_ccp4mg_picture_description(filename)

def delete_dipole(imol, dipole_number):
    r"""
    delete_dipole(int imol, int dipole_number)

    Parameters
    ----------
    imol: int
    dipole_number: int

    """
    return _coot.delete_dipole(imol, dipole_number)

def add_dipole_py(imol, chain_id, res_no, ins_code):
    r"""
    add_dipole_py(int imol, char const * chain_id, int res_no, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *

    """
    return _coot.add_dipole_py(imol, chain_id, res_no, ins_code)

def add_dipole_for_residues_py(imol, residue_specs):
    r"""
    add_dipole_for_residues_py(int imol, PyObject * residue_specs) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *

    """
    return _coot.add_dipole_for_residues_py(imol, residue_specs)

def make_and_draw_patterson(mtz_file_name, f_col, sigf_col):
    r"""
    make_and_draw_patterson(char const * mtz_file_name, char const * f_col, char const * sigf_col) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    f_col: char const *
    sigf_col: char const *

    """
    return _coot.make_and_draw_patterson(mtz_file_name, f_col, sigf_col)

def make_and_draw_patterson_using_intensities(mtz_file_name, i_col, sigi_col):
    r"""
    make_and_draw_patterson_using_intensities(char const * mtz_file_name, char const * i_col, char const * sigi_col) -> int

    Parameters
    ----------
    mtz_file_name: char const *
    i_col: char const *
    sigi_col: char const *

    """
    return _coot.make_and_draw_patterson_using_intensities(mtz_file_name, i_col, sigi_col)

def laplacian(imol):
    r"""
    laplacian(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.laplacian(imol)

def get_pkgdatadir_py():
    r"""get_pkgdatadir_py() -> PyObject *"""
    return _coot.get_pkgdatadir_py()

def do_smiles_gui():
    r"""do_smiles_gui()"""
    return _coot.do_smiles_gui()

def do_tw():
    r"""do_tw()"""
    return _coot.do_tw()

def set_button_label_for_external_refinement(button_label):
    r"""
    set_button_label_for_external_refinement(char const * button_label)

    Parameters
    ----------
    button_label: char const *

    """
    return _coot.set_button_label_for_external_refinement(button_label)

def place_text(text, x, y, z, size):
    r"""
    place_text(char const * text, float x, float y, float z, int size) -> int

    Parameters
    ----------
    text: char const *
    x: float
    y: float
    z: float
    size: int

    """
    return _coot.place_text(text, x, y, z, size)

def remove_text(text_handle):
    r"""
    remove_text(int text_handle)

    Parameters
    ----------
    text_handle: int

    """
    return _coot.remove_text(text_handle)

def edit_text(text_handle, new_text):
    r"""
    edit_text(int text_handle, char const * new_text)

    Parameters
    ----------
    text_handle: int
    new_text: char const *

    """
    return _coot.edit_text(text_handle, new_text)

def text_index_near_position(x, y, z, r):
    r"""
    text_index_near_position(float x, float y, float z, float r) -> int

    Parameters
    ----------
    x: float
    y: float
    z: float
    r: float

    """
    return _coot.text_index_near_position(x, y, z, r)

def pisa_interaction(imol_1, imol_2):
    r"""
    pisa_interaction(int imol_1, int imol_2) -> int

    Parameters
    ----------
    imol_1: int
    imol_2: int

    """
    return _coot.pisa_interaction(imol_1, imol_2)

def handle_pisa_interfaces_py(interfaces_description_py):
    r"""
    handle_pisa_interfaces_py(PyObject * interfaces_description_py) -> PyObject *

    Parameters
    ----------
    interfaces_description_py: PyObject *

    """
    return _coot.handle_pisa_interfaces_py(interfaces_description_py)

def add_pisa_interface_bond_py(imol_1, imol_2, pisa_bond_py, interface_number):
    r"""
    add_pisa_interface_bond_py(int imol_1, int imol_2, PyObject * pisa_bond_py, int interface_number)

    Parameters
    ----------
    imol_1: int
    imol_2: int
    pisa_bond_py: PyObject *
    interface_number: int

    """
    return _coot.add_pisa_interface_bond_py(imol_1, imol_2, pisa_bond_py, interface_number)

def pisa_clear_interfaces():
    r"""pisa_clear_interfaces()"""
    return _coot.pisa_clear_interfaces()

def fit_to_map_by_random_jiggle(imol, chain_id, resno, ins_code, n_trials, jiggle_scale_factor):
    r"""
    fit_to_map_by_random_jiggle(int imol, char const * chain_id, int resno, char const * ins_code, int n_trials, float jiggle_scale_factor) -> float

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    n_trials: int
    jiggle_scale_factor: float

    """
    return _coot.fit_to_map_by_random_jiggle(imol, chain_id, resno, ins_code, n_trials, jiggle_scale_factor)

def fit_molecule_to_map_by_random_jiggle(imol, n_trials, jiggle_scale_factor):
    r"""
    fit_molecule_to_map_by_random_jiggle(int imol, int n_trials, float jiggle_scale_factor) -> float

    Parameters
    ----------
    imol: int
    n_trials: int
    jiggle_scale_factor: float

    """
    return _coot.fit_molecule_to_map_by_random_jiggle(imol, n_trials, jiggle_scale_factor)

def fit_molecule_to_map_by_random_jiggle_and_blur(imol, n_trials, jiggle_scale_factor, map_blur_factor):
    r"""
    fit_molecule_to_map_by_random_jiggle_and_blur(int imol, int n_trials, float jiggle_scale_factor, float map_blur_factor) -> float

    Parameters
    ----------
    imol: int
    n_trials: int
    jiggle_scale_factor: float
    map_blur_factor: float

    """
    return _coot.fit_molecule_to_map_by_random_jiggle_and_blur(imol, n_trials, jiggle_scale_factor, map_blur_factor)

def fit_chain_to_map_by_random_jiggle(imol, chain_id, n_trials, jiggle_scale_factor):
    r"""
    fit_chain_to_map_by_random_jiggle(int imol, char const * chain_id, int n_trials, float jiggle_scale_factor) -> float

    Parameters
    ----------
    imol: int
    chain_id: char const *
    n_trials: int
    jiggle_scale_factor: float

    """
    return _coot.fit_chain_to_map_by_random_jiggle(imol, chain_id, n_trials, jiggle_scale_factor)

def fit_chain_to_map_by_random_jiggle_and_blur(imol, chain_id, n_trials, jiggle_scale_factor, map_blur_factor):
    r"""
    fit_chain_to_map_by_random_jiggle_and_blur(int imol, char const * chain_id, int n_trials, float jiggle_scale_factor, float map_blur_factor) -> float

    Parameters
    ----------
    imol: int
    chain_id: char const *
    n_trials: int
    jiggle_scale_factor: float
    map_blur_factor: float

    """
    return _coot.fit_chain_to_map_by_random_jiggle_and_blur(imol, chain_id, n_trials, jiggle_scale_factor, map_blur_factor)

def matching_compound_names_from_sbase_py(compound_name_fragment):
    r"""
    matching_compound_names_from_sbase_py(char const * compound_name_fragment) -> PyObject *

    Parameters
    ----------
    compound_name_fragment: char const *

    """
    return _coot.matching_compound_names_from_sbase_py(compound_name_fragment)

def get_ccp4srs_monomer_and_dictionary(comp_id):
    r"""
    get_ccp4srs_monomer_and_dictionary(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.get_ccp4srs_monomer_and_dictionary(comp_id)

def get_sbase_monomer(comp_id):
    r"""
    get_sbase_monomer(char const * comp_id) -> int

    Parameters
    ----------
    comp_id: char const *

    """
    return _coot.get_sbase_monomer(comp_id)

def add_linked_residue(imol, chain_id, resno, ins_code, new_residue_comp_id, link_type, n_trials):
    r"""
    add_linked_residue(int imol, char const * chain_id, int resno, char const * ins_code, char const * new_residue_comp_id, char const * link_type, int n_trials) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    new_residue_comp_id: char const *
    link_type: char const *
    n_trials: int

    """
    return _coot.add_linked_residue(imol, chain_id, resno, ins_code, new_residue_comp_id, link_type, n_trials)

def add_linked_residue_py(imol, chain_id, resno, ins_code, new_residue_comp_id, link_type, mode):
    r"""
    add_linked_residue_py(int imol, char const * chain_id, int resno, char const * ins_code, char const * new_residue_comp_id, char const * link_type, int mode) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    new_residue_comp_id: char const *
    link_type: char const *
    mode: int

    """
    return _coot.add_linked_residue_py(imol, chain_id, resno, ins_code, new_residue_comp_id, link_type, mode)

def set_add_linked_residue_do_fit_and_refine(state):
    r"""
    set_add_linked_residue_do_fit_and_refine(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_add_linked_residue_do_fit_and_refine(state)

def fle_view_internal(imol, chain_id, res_no, ins_code, imol_ligand_fragment, prodrg_output_flat_mol_file_name, prodrg_output_flat_pdb_file_name, prodrg_output_3d_pdb_file_name, prodrg_output_dict_cif_file_name):
    r"""
    fle_view_internal(int imol, char const * chain_id, int res_no, char const * ins_code, int imol_ligand_fragment, char const * prodrg_output_flat_mol_file_name, char const * prodrg_output_flat_pdb_file_name, char const * prodrg_output_3d_pdb_file_name, char const * prodrg_output_dict_cif_file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    imol_ligand_fragment: int
    prodrg_output_flat_mol_file_name: char const *
    prodrg_output_flat_pdb_file_name: char const *
    prodrg_output_3d_pdb_file_name: char const *
    prodrg_output_dict_cif_file_name: char const *

    """
    return _coot.fle_view_internal(imol, chain_id, res_no, ins_code, imol_ligand_fragment, prodrg_output_flat_mol_file_name, prodrg_output_flat_pdb_file_name, prodrg_output_3d_pdb_file_name, prodrg_output_dict_cif_file_name)

def fle_view_internal_to_png(imol, chain_id, res_no, ins_code, imol_ligand_fragment, prodrg_output_flat_mol_file_name, prodrg_output_flat_pdb_file_name, prodrg_output_3d_pdb_file_name, prodrg_output_dict_cif_file_name, output_to_png_file_flag, png_file_name):
    r"""
    fle_view_internal_to_png(int imol, char const * chain_id, int res_no, char const * ins_code, int imol_ligand_fragment, char const * prodrg_output_flat_mol_file_name, char const * prodrg_output_flat_pdb_file_name, char const * prodrg_output_3d_pdb_file_name, char const * prodrg_output_dict_cif_file_name, int output_to_png_file_flag, char const * png_file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    imol_ligand_fragment: int
    prodrg_output_flat_mol_file_name: char const *
    prodrg_output_flat_pdb_file_name: char const *
    prodrg_output_3d_pdb_file_name: char const *
    prodrg_output_dict_cif_file_name: char const *
    output_to_png_file_flag: int
    png_file_name: char const *

    """
    return _coot.fle_view_internal_to_png(imol, chain_id, res_no, ins_code, imol_ligand_fragment, prodrg_output_flat_mol_file_name, prodrg_output_flat_pdb_file_name, prodrg_output_3d_pdb_file_name, prodrg_output_dict_cif_file_name, output_to_png_file_flag, png_file_name)

def fle_view_with_rdkit(imol, chain_id, res_no, ins_code, residues_near_radius):
    r"""
    fle_view_with_rdkit(int imol, char const * chain_id, int res_no, char const * ins_code, float residues_near_radius)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    residues_near_radius: float

    """
    return _coot.fle_view_with_rdkit(imol, chain_id, res_no, ins_code, residues_near_radius)

def fle_view_with_rdkit_to_png(imol, chain_id, res_no, ins_code, residues_near_radius, png_file_name):
    r"""
    fle_view_with_rdkit_to_png(int imol, char const * chain_id, int res_no, char const * ins_code, float residues_near_radius, char const * png_file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    residues_near_radius: float
    png_file_name: char const *

    """
    return _coot.fle_view_with_rdkit_to_png(imol, chain_id, res_no, ins_code, residues_near_radius, png_file_name)

def fle_view_with_rdkit_to_svg(imol, chain_id, res_no, ins_code, residues_near_radius, svg_file_name):
    r"""
    fle_view_with_rdkit_to_svg(int imol, char const * chain_id, int res_no, char const * ins_code, float residues_near_radius, char const * svg_file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    residues_near_radius: float
    svg_file_name: char const *

    """
    return _coot.fle_view_with_rdkit_to_svg(imol, chain_id, res_no, ins_code, residues_near_radius, svg_file_name)

def fle_view_with_rdkit_internal(imol, chain_id, res_no, ins_code, residues_near_radius, file_format, file_name):
    r"""
    fle_view_with_rdkit_internal(int imol, char const * chain_id, int res_no, char const * ins_code, float residues_near_radius, char const * file_format, char const * file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    residues_near_radius: float
    file_format: char const *
    file_name: char const *

    """
    return _coot.fle_view_with_rdkit_internal(imol, chain_id, res_no, ins_code, residues_near_radius, file_format, file_name)

def fle_view_set_water_dist_max(dist_max):
    r"""
    fle_view_set_water_dist_max(float dist_max)

    Parameters
    ----------
    dist_max: float

    """
    return _coot.fle_view_set_water_dist_max(dist_max)

def fle_view_set_h_bond_dist_max(h_bond_dist_max):
    r"""
    fle_view_set_h_bond_dist_max(float h_bond_dist_max)

    Parameters
    ----------
    h_bond_dist_max: float

    """
    return _coot.fle_view_set_h_bond_dist_max(h_bond_dist_max)

def sprout_hydrogens(imol, chain_id, res_no, ins_code):
    r"""
    sprout_hydrogens(int imol, char const * chain_id, int res_no, char const * ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *

    """
    return _coot.sprout_hydrogens(imol, chain_id, res_no, ins_code)

def lsq_improve(imol_ref, ref_selection, imol_moving, moving_selection, n_res, dist_crit):
    r"""
    lsq_improve(int imol_ref, char const * ref_selection, int imol_moving, char const * moving_selection, int n_res, float dist_crit)

    Parameters
    ----------
    imol_ref: int
    ref_selection: char const *
    imol_moving: int
    moving_selection: char const *
    n_res: int
    dist_crit: float

    """
    return _coot.lsq_improve(imol_ref, ref_selection, imol_moving, moving_selection, n_res, dist_crit)

def toolbar_multi_refine_stop():
    r"""toolbar_multi_refine_stop()"""
    return _coot.toolbar_multi_refine_stop()

def toolbar_multi_refine_continue():
    r"""toolbar_multi_refine_continue()"""
    return _coot.toolbar_multi_refine_continue()

def toolbar_multi_refine_cancel():
    r"""toolbar_multi_refine_cancel()"""
    return _coot.toolbar_multi_refine_cancel()

def set_visible_toolbar_multi_refine_stop_button(state):
    r"""
    set_visible_toolbar_multi_refine_stop_button(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_visible_toolbar_multi_refine_stop_button(state)

def set_visible_toolbar_multi_refine_continue_button(state):
    r"""
    set_visible_toolbar_multi_refine_continue_button(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_visible_toolbar_multi_refine_continue_button(state)

def set_visible_toolbar_multi_refine_cancel_button(state):
    r"""
    set_visible_toolbar_multi_refine_cancel_button(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_visible_toolbar_multi_refine_cancel_button(state)

def toolbar_multi_refine_button_set_sensitive(button_type, state):
    r"""
    toolbar_multi_refine_button_set_sensitive(char const * button_type, short state)

    Parameters
    ----------
    button_type: char const *
    state: short

    """
    return _coot.toolbar_multi_refine_button_set_sensitive(button_type, state)

def load_tutorial_model_and_data():
    r"""load_tutorial_model_and_data()"""
    return _coot.load_tutorial_model_and_data()

def single_model_view_model_number(imol, imodel):
    r"""
    single_model_view_model_number(int imol, int imodel)

    Parameters
    ----------
    imol: int
    imodel: int

    """
    return _coot.single_model_view_model_number(imol, imodel)

def single_model_view_this_model_number(imol):
    r"""
    single_model_view_this_model_number(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.single_model_view_this_model_number(imol)

def single_model_view_next_model_number(imol):
    r"""
    single_model_view_next_model_number(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.single_model_view_next_model_number(imol)

def single_model_view_prev_model_number(imol):
    r"""
    single_model_view_prev_model_number(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.single_model_view_prev_model_number(imol)

def run_update_self_maybe():
    r"""run_update_self_maybe()"""
    return _coot.run_update_self_maybe()

def show_go_to_residue_keyboarding_mode_window():
    r"""show_go_to_residue_keyboarding_mode_window()"""
    return _coot.show_go_to_residue_keyboarding_mode_window()

def handle_go_to_residue_keyboarding_mode(text):
    r"""
    handle_go_to_residue_keyboarding_mode(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _coot.handle_go_to_residue_keyboarding_mode(text)

def set_show_graphics_ligand_view(state):
    r"""
    set_show_graphics_ligand_view(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_show_graphics_ligand_view(state)

def fetch_and_superpose_alphafold_models_using_active_molecule():
    r"""fetch_and_superpose_alphafold_models_using_active_molecule()"""
    return _coot.fetch_and_superpose_alphafold_models_using_active_molecule()

def start_ligand_builder_gui():
    r"""start_ligand_builder_gui()"""
    return _coot.start_ligand_builder_gui()

def all_molecule_rotamer_score_py(imol):
    r"""
    all_molecule_rotamer_score_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.all_molecule_rotamer_score_py(imol)

def all_molecule_ramachandran_score_py(imol):
    r"""
    all_molecule_ramachandran_score_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.all_molecule_ramachandran_score_py(imol)

def all_molecule_ramachandran_region_py(imol):
    r"""
    all_molecule_ramachandran_region_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.all_molecule_ramachandran_region_py(imol)

def globularize(imol):
    r"""
    globularize(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.globularize(imol)

def user_defined_click_py(n_clicks, func):
    r"""
    user_defined_click_py(int n_clicks, PyObject * func)

    Parameters
    ----------
    n_clicks: int
    func: PyObject *

    """
    return _coot.user_defined_click_py(n_clicks, func)

def preferences():
    r"""preferences()"""
    return _coot.preferences()

def show_preferences():
    r"""show_preferences()"""
    return _coot.show_preferences()

def clear_preferences():
    r"""clear_preferences()"""
    return _coot.clear_preferences()

def set_mark_cis_peptides_as_bad(istate):
    r"""
    set_mark_cis_peptides_as_bad(int istate)

    Parameters
    ----------
    istate: int

    """
    return _coot.set_mark_cis_peptides_as_bad(istate)

def show_mark_cis_peptides_as_bad_state():
    r"""show_mark_cis_peptides_as_bad_state() -> int"""
    return _coot.show_mark_cis_peptides_as_bad_state()

def update_preference_gui():
    r"""update_preference_gui()"""
    return _coot.update_preference_gui()

def make_preferences_internal():
    r"""make_preferences_internal()"""
    return _coot.make_preferences_internal()

def make_preferences_internal_default():
    r"""make_preferences_internal_default()"""
    return _coot.make_preferences_internal_default()

def reset_preferences():
    r"""reset_preferences()"""
    return _coot.reset_preferences()

def save_preferences():
    r"""save_preferences()"""
    return _coot.save_preferences()

def preferences_internal_change_value_int(preference_type, ivalue):
    r"""
    preferences_internal_change_value_int(int preference_type, int ivalue)

    Parameters
    ----------
    preference_type: int
    ivalue: int

    """
    return _coot.preferences_internal_change_value_int(preference_type, ivalue)

def preferences_internal_change_value_int2(preference_type, ivalue1, ivalue2):
    r"""
    preferences_internal_change_value_int2(int preference_type, int ivalue1, int ivalue2)

    Parameters
    ----------
    preference_type: int
    ivalue1: int
    ivalue2: int

    """
    return _coot.preferences_internal_change_value_int2(preference_type, ivalue1, ivalue2)

def preferences_internal_change_value_float(preference_type, fvalue):
    r"""
    preferences_internal_change_value_float(int preference_type, float fvalue)

    Parameters
    ----------
    preference_type: int
    fvalue: float

    """
    return _coot.preferences_internal_change_value_float(preference_type, fvalue)

def preferences_internal_change_value_float3(preference_type, fvalue1, fvalue2, fvalue3):
    r"""
    preferences_internal_change_value_float3(int preference_type, float fvalue1, float fvalue2, float fvalue3)

    Parameters
    ----------
    preference_type: int
    fvalue1: float
    fvalue2: float
    fvalue3: float

    """
    return _coot.preferences_internal_change_value_float3(preference_type, fvalue1, fvalue2, fvalue3)

def show_model_toolbar_icon(pos):
    r"""
    show_model_toolbar_icon(int pos)

    Parameters
    ----------
    pos: int

    """
    return _coot.show_model_toolbar_icon(pos)

def hide_model_toolbar_icon(pos):
    r"""
    hide_model_toolbar_icon(int pos)

    Parameters
    ----------
    pos: int

    """
    return _coot.hide_model_toolbar_icon(pos)

def show_main_toolbar_icon(pos):
    r"""
    show_main_toolbar_icon(int pos)

    Parameters
    ----------
    pos: int

    """
    return _coot.show_main_toolbar_icon(pos)

def hide_main_toolbar_icon(pos):
    r"""
    hide_main_toolbar_icon(int pos)

    Parameters
    ----------
    pos: int

    """
    return _coot.hide_main_toolbar_icon(pos)

def preferences_internal_font_own_colour_flag():
    r"""preferences_internal_font_own_colour_flag() -> int"""
    return _coot.preferences_internal_font_own_colour_flag()

def add_initial_position_restraints(imol, residue_specs, weight):
    r"""
    add_initial_position_restraints(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs, double weight)

    Parameters
    ----------
    imol: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    weight: double

    """
    return _coot.add_initial_position_restraints(imol, residue_specs, weight)

def remove_initial_position_restraints(imol, residue_specs):
    r"""
    remove_initial_position_restraints(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs)

    Parameters
    ----------
    imol: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &

    """
    return _coot.remove_initial_position_restraints(imol, residue_specs)

def use_unimodal_ring_torsion_restraints(res_name):
    r"""
    use_unimodal_ring_torsion_restraints(std::string const & res_name)

    Parameters
    ----------
    res_name: std::string const &

    """
    return _coot.use_unimodal_ring_torsion_restraints(res_name)

def use_unimodal_ring_torsion_restraints_for_residue(res_name, torsions_info_list):
    r"""
    use_unimodal_ring_torsion_restraints_for_residue(std::string const & res_name, PyObject * torsions_info_list)

    Parameters
    ----------
    res_name: std::string const &
    torsions_info_list: PyObject *

    """
    return _coot.use_unimodal_ring_torsion_restraints_for_residue(res_name, torsions_info_list)

def set_refinement_geman_mcclure_alpha(alpha):
    r"""
    set_refinement_geman_mcclure_alpha(float alpha)

    Parameters
    ----------
    alpha: float

    """
    return _coot.set_refinement_geman_mcclure_alpha(alpha)

def get_refinement_geman_mcclure_alpha():
    r"""get_refinement_geman_mcclure_alpha() -> float"""
    return _coot.get_refinement_geman_mcclure_alpha()

def set_refinement_lennard_jones_epsilon(epsilon):
    r"""
    set_refinement_lennard_jones_epsilon(float epsilon)

    Parameters
    ----------
    epsilon: float

    """
    return _coot.set_refinement_lennard_jones_epsilon(epsilon)

def set_log_cosh_target_distance_scale_factor(sf):
    r"""
    set_log_cosh_target_distance_scale_factor(float sf)

    Parameters
    ----------
    sf: float

    """
    return _coot.set_log_cosh_target_distance_scale_factor(sf)

def crankshaft_peptide_rotation_optimization_py(imol, residue_spec_py):
    r"""
    crankshaft_peptide_rotation_optimization_py(int imol, PyObject * residue_spec_py)

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *

    """
    return _coot.crankshaft_peptide_rotation_optimization_py(imol, residue_spec_py)

def convert_dictionary_planes_to_improper_dihedrals():
    r"""convert_dictionary_planes_to_improper_dihedrals()"""
    return _coot.convert_dictionary_planes_to_improper_dihedrals()

def make_ncs_maps(imol_model, imol_map):
    r"""
    make_ncs_maps(int imol_model, int imol_map) -> IntVector

    Parameters
    ----------
    imol_model: int
    imol_map: int

    """
    return _coot.make_ncs_maps(imol_model, imol_map)

def add_molecular_representation_py(imol, atom_selection_py, ColorScheme_py, style_py):
    r"""
    add_molecular_representation_py(int imol, PyObject * atom_selection_py, PyObject * ColorScheme_py, PyObject * style_py) -> int

    Parameters
    ----------
    imol: int
    atom_selection_py: PyObject *
    ColorScheme_py: PyObject *
    style_py: PyObject *

    """
    return _coot.add_molecular_representation_py(imol, atom_selection_py, ColorScheme_py, style_py)

def add_ribbon_representation_with_user_defined_colours(imol, name):
    r"""
    add_ribbon_representation_with_user_defined_colours(int imol, std::string const & name) -> int

    Parameters
    ----------
    imol: int
    name: std::string const &

    """
    return _coot.add_ribbon_representation_with_user_defined_colours(imol, name)

def remove_molecular_representation(imol, rep_no):
    r"""
    remove_molecular_representation(int imol, int rep_no)

    Parameters
    ----------
    imol: int
    rep_no: int

    """
    return _coot.remove_molecular_representation(imol, rep_no)
class alias_path_t(object):
    r"""Proxy of C++ coot::alias_path_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_coot.alias_path_t_index_get, _coot.alias_path_t_index_set, doc=r"""index : int""")
    s = property(_coot.alias_path_t_s_get, _coot.alias_path_t_s_set, doc=r"""s : std::string""")
    flag = property(_coot.alias_path_t_flag_get, _coot.alias_path_t_flag_set, doc=r"""flag : bool""")

    def __init__(self, index_in, s_in, flag_in):
        r"""
        __init__(alias_path_t self, int index_in, std::string const & s_in, bool flag_in) -> alias_path_t

        Parameters
        ----------
        index_in: int
        s_in: std::string const &
        flag_in: bool

        """
        _coot.alias_path_t_swiginit(self, _coot.new_alias_path_t(index_in, s_in, flag_in))
    __swig_destroy__ = _coot.delete_alias_path_t

# Register alias_path_t in _coot:
_coot.alias_path_t_swigregister(alias_path_t)
class pisa_interface_bond_info_t(object):
    r"""Proxy of C++ coot::pisa_interface_bond_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(pisa_interface_bond_info_t self) -> pisa_interface_bond_info_t"""
        _coot.pisa_interface_bond_info_t_swiginit(self, _coot.new_pisa_interface_bond_info_t())
    n_h_bonds = property(_coot.pisa_interface_bond_info_t_n_h_bonds_get, _coot.pisa_interface_bond_info_t_n_h_bonds_set, doc=r"""n_h_bonds : int""")
    n_salt_bridges = property(_coot.pisa_interface_bond_info_t_n_salt_bridges_get, _coot.pisa_interface_bond_info_t_n_salt_bridges_set, doc=r"""n_salt_bridges : int""")
    n_cov_bonds = property(_coot.pisa_interface_bond_info_t_n_cov_bonds_get, _coot.pisa_interface_bond_info_t_n_cov_bonds_set, doc=r"""n_cov_bonds : int""")
    n_ss_bonds = property(_coot.pisa_interface_bond_info_t_n_ss_bonds_get, _coot.pisa_interface_bond_info_t_n_ss_bonds_set, doc=r"""n_ss_bonds : int""")
    __swig_destroy__ = _coot.delete_pisa_interface_bond_info_t

# Register pisa_interface_bond_info_t in _coot:
_coot.pisa_interface_bond_info_t_swigregister(pisa_interface_bond_info_t)

def get_pisa_interface_bond_info_py(bonds_info_py):
    r"""
    get_pisa_interface_bond_info_py(PyObject * bonds_info_py) -> pisa_interface_bond_info_t

    Parameters
    ----------
    bonds_info_py: PyObject *

    """
    return _coot.get_pisa_interface_bond_info_py(bonds_info_py)

def git_commit():
    r"""git_commit() -> std::string"""
    return _coot.git_commit()

def filtered_by_glob(pre_directory, data_type):
    r"""
    filtered_by_glob(std::string const & pre_directory, int data_type) -> vector_string

    Parameters
    ----------
    pre_directory: std::string const &
    data_type: int

    """
    return _coot.filtered_by_glob(pre_directory, data_type)

def string_member(search, list):
    r"""
    string_member(std::string const & search, vector_string list) -> short

    Parameters
    ----------
    search: std::string const &
    list: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.string_member(search, list)

def compare_strings(a, b):
    r"""
    compare_strings(std::string const & a, std::string const & b) -> bool

    Parameters
    ----------
    a: std::string const &
    b: std::string const &

    """
    return _coot.compare_strings(a, b)

def wrapped_nothing_bad_dialog(label):
    r"""
    wrapped_nothing_bad_dialog(std::string const & label) -> GtkWidget *

    Parameters
    ----------
    label: std::string const &

    """
    return _coot.wrapped_nothing_bad_dialog(label)

def float_from_entry(entry):
    r"""
    float_from_entry(GtkWidget * entry) -> std::pair< short,float >

    Parameters
    ----------
    entry: GtkWidget *

    """
    return _coot.float_from_entry(entry)

def int_from_entry(entry):
    r"""
    int_from_entry(GtkWidget * entry) -> std::pair< short,int >

    Parameters
    ----------
    entry: GtkWidget *

    """
    return _coot.int_from_entry(entry)

def menu_item_label(menu_item):
    r"""
    menu_item_label(GtkWidget * menu_item) -> std::string

    Parameters
    ----------
    menu_item: GtkWidget *

    """
    return _coot.menu_item_label(menu_item)

def add_cablam_markup(imol, cablam_file_name):
    r"""
    add_cablam_markup(int imol, std::string const & cablam_file_name) -> std::vector< std::pair< coot::residue_spec_t,double >,std::allocator< std::pair< coot::residue_spec_t,double > > >

    Parameters
    ----------
    imol: int
    cablam_file_name: std::string const &

    """
    return _coot.add_cablam_markup(imol, cablam_file_name)

def add_cablam_markup_py(imol, cablam_log_file_name):
    r"""
    add_cablam_markup_py(int imol, std::string const & cablam_log_file_name) -> PyObject *

    Parameters
    ----------
    imol: int
    cablam_log_file_name: std::string const &

    """
    return _coot.add_cablam_markup_py(imol, cablam_log_file_name)

def set_rotation_centre(*args):
    r"""
    set_rotation_centre(float x, float y, float z)

    Parameters
    ----------
    x: float
    y: float
    z: float

    set_rotation_centre(clipper::Coord_orth const & pos)

    Parameters
    ----------
    pos: clipper::Coord_orth const &

    """
    return _coot.set_rotation_centre(*args)

def goto_next_atom_maybe_py(chain_id, resno, ins_code, atom_name):
    r"""
    goto_next_atom_maybe_py(char const * chain_id, int resno, char const * ins_code, char const * atom_name) -> PyObject *

    Parameters
    ----------
    chain_id: char const *
    resno: int
    ins_code: char const *
    atom_name: char const *

    """
    return _coot.goto_next_atom_maybe_py(chain_id, resno, ins_code, atom_name)

def goto_prev_atom_maybe_py(chain_id, resno, ins_code, atom_name):
    r"""
    goto_prev_atom_maybe_py(char const * chain_id, int resno, char const * ins_code, char const * atom_name) -> PyObject *

    Parameters
    ----------
    chain_id: char const *
    resno: int
    ins_code: char const *
    atom_name: char const *

    """
    return _coot.goto_prev_atom_maybe_py(chain_id, resno, ins_code, atom_name)

def set_go_to_atom_from_spec(atom_spec):
    r"""
    set_go_to_atom_from_spec(atom_spec_t atom_spec) -> int

    Parameters
    ----------
    atom_spec: coot::atom_spec_t const &

    """
    return _coot.set_go_to_atom_from_spec(atom_spec)

def set_go_to_atom_from_res_spec(spec):
    r"""
    set_go_to_atom_from_res_spec(residue_spec_t spec) -> int

    Parameters
    ----------
    spec: coot::residue_spec_t const &

    """
    return _coot.set_go_to_atom_from_res_spec(spec)

def set_go_to_atom_from_res_spec_py(residue_spec):
    r"""
    set_go_to_atom_from_res_spec_py(PyObject * residue_spec) -> int

    Parameters
    ----------
    residue_spec: PyObject *

    """
    return _coot.set_go_to_atom_from_res_spec_py(residue_spec)

def set_go_to_atom_from_atom_spec_py(residue_spec):
    r"""
    set_go_to_atom_from_atom_spec_py(PyObject * residue_spec) -> int

    Parameters
    ----------
    residue_spec: PyObject *

    """
    return _coot.set_go_to_atom_from_atom_spec_py(residue_spec)

def active_atom_spec():
    r"""active_atom_spec() -> std::pair< bool,std::pair< int,coot::atom_spec_t > >"""
    return _coot.active_atom_spec()

def active_atom_spec_py():
    r"""active_atom_spec_py() -> PyObject *"""
    return _coot.active_atom_spec_py()

def get_symmetry_py(imol):
    r"""
    get_symmetry_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_symmetry_py(imol)

def clashes_with_symmetry(imol, chain_id, res_no, ins_code, clash_dist):
    r"""
    clashes_with_symmetry(int imol, char const * chain_id, int res_no, char const * ins_code, float clash_dist) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    clash_dist: float

    """
    return _coot.clashes_with_symmetry(imol, chain_id, res_no, ins_code, clash_dist)

def add_molecular_symmetry(imol, r_00, r_01, r_02, r_10, r_11, r_12, r_20, r_21, r_22, about_origin_x, about_origin_y, about_origin_z):
    r"""
    add_molecular_symmetry(int imol, double r_00, double r_01, double r_02, double r_10, double r_11, double r_12, double r_20, double r_21, double r_22, double about_origin_x, double about_origin_y, double about_origin_z)

    Parameters
    ----------
    imol: int
    r_00: double
    r_01: double
    r_02: double
    r_10: double
    r_11: double
    r_12: double
    r_20: double
    r_21: double
    r_22: double
    about_origin_x: double
    about_origin_y: double
    about_origin_z: double

    """
    return _coot.add_molecular_symmetry(imol, r_00, r_01, r_02, r_10, r_11, r_12, r_20, r_21, r_22, about_origin_x, about_origin_y, about_origin_z)

def add_molecular_symmetry_from_mtrix_from_file(imol, file_name):
    r"""
    add_molecular_symmetry_from_mtrix_from_file(int imol, std::string const & file_name) -> int

    Parameters
    ----------
    imol: int
    file_name: std::string const &

    """
    return _coot.add_molecular_symmetry_from_mtrix_from_file(imol, file_name)

def add_molecular_symmetry_from_mtrix_from_self_file(imol):
    r"""
    add_molecular_symmetry_from_mtrix_from_self_file(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.add_molecular_symmetry_from_mtrix_from_self_file(imol)

def auto_read_make_and_draw_maps(filename):
    r"""
    auto_read_make_and_draw_maps(char const * filename) -> IntVector

    Parameters
    ----------
    filename: char const *

    """
    return _coot.auto_read_make_and_draw_maps(filename)

def auto_read_make_and_draw_maps_from_mtz(file_name):
    r"""
    auto_read_make_and_draw_maps_from_mtz(std::string const & file_name) -> IntVector

    Parameters
    ----------
    file_name: std::string const &

    """
    return _coot.auto_read_make_and_draw_maps_from_mtz(file_name)

def auto_read_make_and_draw_maps_from_cns(file_name):
    r"""
    auto_read_make_and_draw_maps_from_cns(std::string const & file_name) -> IntVector

    Parameters
    ----------
    file_name: std::string const &

    """
    return _coot.auto_read_make_and_draw_maps_from_cns(file_name)

def valid_labels(mtz_file_name, f_col, phi_col, weight_col, use_weights_flag):
    r"""
    valid_labels(std::string const & mtz_file_name, std::string const & f_col, std::string const & phi_col, std::string const & weight_col, bool use_weights_flag) -> int

    Parameters
    ----------
    mtz_file_name: std::string const &
    f_col: std::string const &
    phi_col: std::string const &
    weight_col: std::string const &
    use_weights_flag: bool

    """
    return _coot.valid_labels(mtz_file_name, f_col, phi_col, weight_col, use_weights_flag)

def sharpen_blur_map(imol_map, b_factor):
    r"""
    sharpen_blur_map(int imol_map, float b_factor) -> int

    Parameters
    ----------
    imol_map: int
    b_factor: float

    """
    return _coot.sharpen_blur_map(imol_map, b_factor)

def sharpen_blur_map_with_resampling(imol_map, b_factor, resample_factor):
    r"""
    sharpen_blur_map_with_resampling(int imol_map, float b_factor, float resample_factor) -> int

    Parameters
    ----------
    imol_map: int
    b_factor: float
    resample_factor: float

    """
    return _coot.sharpen_blur_map_with_resampling(imol_map, b_factor, resample_factor)

def sharpen_blur_map_with_resampling_threaded_version(imol_map, b_factor, resample_factor):
    r"""
    sharpen_blur_map_with_resampling_threaded_version(int imol_map, float b_factor, float resample_factor)

    Parameters
    ----------
    imol_map: int
    b_factor: float
    resample_factor: float

    """
    return _coot.sharpen_blur_map_with_resampling_threaded_version(imol_map, b_factor, resample_factor)

def multi_sharpen_blur_map_py(imol_map, b_factors_list):
    r"""
    multi_sharpen_blur_map_py(int imol_map, PyObject * b_factors_list)

    Parameters
    ----------
    imol_map: int
    b_factors_list: PyObject *

    """
    return _coot.multi_sharpen_blur_map_py(imol_map, b_factors_list)

def amplitude_vs_resolution_py(mol_map):
    r"""
    amplitude_vs_resolution_py(int mol_map) -> PyObject *

    Parameters
    ----------
    mol_map: int

    """
    return _coot.amplitude_vs_resolution_py(mol_map)

def flip_hand(imol_map):
    r"""
    flip_hand(int imol_map) -> int

    Parameters
    ----------
    imol_map: int

    """
    return _coot.flip_hand(imol_map)

def analyse_map_point_density_change_py(map_number_list, imol_map_mask):
    r"""
    analyse_map_point_density_change_py(PyObject * map_number_list, int imol_map_mask) -> int

    Parameters
    ----------
    map_number_list: PyObject *
    imol_map_mask: int

    """
    return _coot.analyse_map_point_density_change_py(map_number_list, imol_map_mask)

def go_to_map_molecule_centre(imol_map):
    r"""
    go_to_map_molecule_centre(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.go_to_map_molecule_centre(imol_map)

def b_factor_from_map(imol_map):
    r"""
    b_factor_from_map(int imol_map) -> float

    Parameters
    ----------
    imol_map: int

    """
    return _coot.b_factor_from_map(imol_map)

def map_colour_components_py(imol):
    r"""
    map_colour_components_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.map_colour_components_py(imol)

def read_ccp4_map(filename, is_diff_map_flag):
    r"""
    read_ccp4_map(std::string const & filename, int is_diff_map_flag) -> int

    Parameters
    ----------
    filename: std::string const &
    is_diff_map_flag: int

    """
    return _coot.read_ccp4_map(filename, is_diff_map_flag)

def handle_read_ccp4_map(filename, is_diff_map_flag):
    r"""
    handle_read_ccp4_map(std::string const & filename, int is_diff_map_flag) -> int

    Parameters
    ----------
    filename: std::string const &
    is_diff_map_flag: int

    """
    return _coot.handle_read_ccp4_map(filename, is_diff_map_flag)

def handle_read_emdb_data(dir_name):
    r"""
    handle_read_emdb_data(std::string const & dir_name) -> int

    Parameters
    ----------
    dir_name: std::string const &

    """
    return _coot.handle_read_emdb_data(dir_name)

def colour_map_by_other_map(imol_map, imol_map_used_for_colouring):
    r"""
    colour_map_by_other_map(int imol_map, int imol_map_used_for_colouring)

    Parameters
    ----------
    imol_map: int
    imol_map_used_for_colouring: int

    """
    return _coot.colour_map_by_other_map(imol_map, imol_map_used_for_colouring)

def colour_map_by_other_map_py(imol_map, imol_map_used_for_colouring, table_bin_start, table_bin_size, colour_table_list):
    r"""
    colour_map_by_other_map_py(int imol_map, int imol_map_used_for_colouring, float table_bin_start, float table_bin_size, PyObject * colour_table_list)

    Parameters
    ----------
    imol_map: int
    imol_map_used_for_colouring: int
    table_bin_start: float
    table_bin_size: float
    colour_table_list: PyObject *

    """
    return _coot.colour_map_by_other_map_py(imol_map, imol_map_used_for_colouring, table_bin_start, table_bin_size, colour_table_list)

def export_molecule_as_x3d(imol):
    r"""
    export_molecule_as_x3d(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.export_molecule_as_x3d(imol)

def export_molecule_as_obj(imol, file_name):
    r"""
    export_molecule_as_obj(int imol, std::string const & file_name) -> bool

    Parameters
    ----------
    imol: int
    file_name: std::string const &

    """
    return _coot.export_molecule_as_obj(imol, file_name)

def export_molecule_as_gltf(imol, file_name):
    r"""
    export_molecule_as_gltf(int imol, std::string const & file_name) -> bool

    Parameters
    ----------
    imol: int
    file_name: std::string const &

    """
    return _coot.export_molecule_as_gltf(imol, file_name)

def colour_map_by_other_map_turn_off(imol_map):
    r"""
    colour_map_by_other_map_turn_off(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.colour_map_by_other_map_turn_off(imol_map)

def add_density_map_cap():
    r"""add_density_map_cap()"""
    return _coot.add_density_map_cap()

def recolour_mesh_by_map(imol_model, imol_map, scale, offset):
    r"""
    recolour_mesh_by_map(int imol_model, int imol_map, float scale, float offset)

    Parameters
    ----------
    imol_model: int
    imol_map: int
    scale: float
    offset: float

    """
    return _coot.recolour_mesh_by_map(imol_model, imol_map, scale, offset)

def multi_residue_torsion_fit(imol, specs, n_trials):
    r"""
    multi_residue_torsion_fit(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & specs, int n_trials)

    Parameters
    ----------
    imol: int
    specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    n_trials: int

    """
    return _coot.multi_residue_torsion_fit(imol, specs, n_trials)

def multi_residue_torsion_fit_py(imol, residues_specs_py, n_trials):
    r"""
    multi_residue_torsion_fit_py(int imol, PyObject * residues_specs_py, int n_trials) -> PyObject *

    Parameters
    ----------
    imol: int
    residues_specs_py: PyObject *
    n_trials: int

    """
    return _coot.multi_residue_torsion_fit_py(imol, residues_specs_py, n_trials)

def import_bild(file_name):
    r"""
    import_bild(std::string const & file_name)

    Parameters
    ----------
    file_name: std::string const &

    """
    return _coot.import_bild(file_name)

def servalcat_fofc(imol_model, imol_fofc_map, half_map_1, half_map_2, resolution):
    r"""
    servalcat_fofc(int imol_model, int imol_fofc_map, std::string const & half_map_1, std::string const & half_map_2, float resolution)

    Parameters
    ----------
    imol_model: int
    imol_fofc_map: int
    half_map_1: std::string const &
    half_map_2: std::string const &
    resolution: float

    """
    return _coot.servalcat_fofc(imol_model, imol_fofc_map, half_map_1, half_map_2, resolution)

def servalcat_refine(imol_model, half_map_1, half_map_2, mask_map, resolution):
    r"""
    servalcat_refine(int imol_model, std::string const & half_map_1, std::string const & half_map_2, std::string const & mask_map, float resolution)

    Parameters
    ----------
    imol_model: int
    half_map_1: std::string const &
    half_map_2: std::string const &
    mask_map: std::string const &
    resolution: float

    """
    return _coot.servalcat_refine(imol_model, half_map_1, half_map_2, mask_map, resolution)

def add_an_atom(element):
    r"""
    add_an_atom(std::string const & element)

    Parameters
    ----------
    element: std::string const &

    """
    return _coot.add_an_atom(element)

def nudge_the_temperature_factors_py(imol, residue_spec_py, amount):
    r"""
    nudge_the_temperature_factors_py(int imol, PyObject * residue_spec_py, float amount)

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *
    amount: float

    """
    return _coot.nudge_the_temperature_factors_py(imol, residue_spec_py, amount)

def merge_fragments(imol):
    r"""
    merge_fragments(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.merge_fragments(imol)

def delete_chain(imol, chain_id):
    r"""
    delete_chain(int imol, std::string const & chain_id)

    Parameters
    ----------
    imol: int
    chain_id: std::string const &

    """
    return _coot.delete_chain(imol, chain_id)

def delete_sidechains_for_chain(imol, chain_id):
    r"""
    delete_sidechains_for_chain(int imol, std::string const & chain_id)

    Parameters
    ----------
    imol: int
    chain_id: std::string const &

    """
    return _coot.delete_sidechains_for_chain(imol, chain_id)

def execute_refmac_real(pdb_in_filename, pdb_out_filename, mtz_in_filename, mtz_out_filename, cif_lib_filename, fobs_col_name, sigfobs_col_name, r_free_col_name, have_sensible_free_r_flag, make_molecules_flag, refmac_count_string, swap_map_colours_post_refmac_flag, imol_refmac_map, diff_map_flag, phase_combine_flag, phib_string, fom_string, ccp4i_project_dir):
    r"""
    execute_refmac_real(std::string pdb_in_filename, std::string pdb_out_filename, std::string mtz_in_filename, std::string mtz_out_filename, std::string cif_lib_filename, std::string fobs_col_name, std::string sigfobs_col_name, std::string r_free_col_name, short have_sensible_free_r_flag, short make_molecules_flag, std::string refmac_count_string, int swap_map_colours_post_refmac_flag, int imol_refmac_map, int diff_map_flag, int phase_combine_flag, std::string phib_string, std::string fom_string, std::string ccp4i_project_dir)

    Parameters
    ----------
    pdb_in_filename: std::string
    pdb_out_filename: std::string
    mtz_in_filename: std::string
    mtz_out_filename: std::string
    cif_lib_filename: std::string
    fobs_col_name: std::string
    sigfobs_col_name: std::string
    r_free_col_name: std::string
    have_sensible_free_r_flag: short
    make_molecules_flag: short
    refmac_count_string: std::string
    swap_map_colours_post_refmac_flag: int
    imol_refmac_map: int
    diff_map_flag: int
    phase_combine_flag: int
    phib_string: std::string
    fom_string: std::string
    ccp4i_project_dir: std::string

    """
    return _coot.execute_refmac_real(pdb_in_filename, pdb_out_filename, mtz_in_filename, mtz_out_filename, cif_lib_filename, fobs_col_name, sigfobs_col_name, r_free_col_name, have_sensible_free_r_flag, make_molecules_flag, refmac_count_string, swap_map_colours_post_refmac_flag, imol_refmac_map, diff_map_flag, phase_combine_flag, phib_string, fom_string, ccp4i_project_dir)

def refmac_name(imol):
    r"""
    refmac_name(int imol) -> std::string

    Parameters
    ----------
    imol: int

    """
    return _coot.refmac_name(imol)
class str_mtime(object):
    r"""Proxy of C++ coot::str_mtime class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(str_mtime self, std::string file_in, time_t mtime_in) -> str_mtime

        Parameters
        ----------
        file_in: std::string
        mtime_in: time_t

        __init__(str_mtime self) -> str_mtime
        """
        _coot.str_mtime_swiginit(self, _coot.new_str_mtime(*args))
    mtime = property(_coot.str_mtime_mtime_get, _coot.str_mtime_mtime_set, doc=r"""mtime : time_t""")
    file = property(_coot.str_mtime_file_get, _coot.str_mtime_file_set, doc=r"""file : std::string""")
    __swig_destroy__ = _coot.delete_str_mtime

# Register str_mtime in _coot:
_coot.str_mtime_swigregister(str_mtime)
class file_attribs_info_t(object):
    r"""Proxy of C++ coot::file_attribs_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    directory_prefix = property(_coot.file_attribs_info_t_directory_prefix_get, _coot.file_attribs_info_t_directory_prefix_set, doc=r"""directory_prefix : std::string""")
    file_mtimes = property(_coot.file_attribs_info_t_file_mtimes_get, _coot.file_attribs_info_t_file_mtimes_set, doc=r"""file_mtimes : std::vector<(coot::str_mtime,std::allocator<(coot::str_mtime)>)>""")

    def __init__(self):
        r"""__init__(file_attribs_info_t self) -> file_attribs_info_t"""
        _coot.file_attribs_info_t_swiginit(self, _coot.new_file_attribs_info_t())
    __swig_destroy__ = _coot.delete_file_attribs_info_t

# Register file_attribs_info_t in _coot:
_coot.file_attribs_info_t_swigregister(file_attribs_info_t)

def compare_mtimes(a, b):
    r"""
    compare_mtimes(str_mtime a, str_mtime b) -> bool

    Parameters
    ----------
    a: coot::str_mtime
    b: coot::str_mtime

    """
    return _coot.compare_mtimes(a, b)

def parse_ccp4i_defs(filename):
    r"""
    parse_ccp4i_defs(std::string const & filename) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >

    Parameters
    ----------
    filename: std::string const &

    """
    return _coot.parse_ccp4i_defs(filename)

def ccp4_project_directory(ccp4_project_name):
    r"""
    ccp4_project_directory(std::string const & ccp4_project_name) -> std::string

    Parameters
    ----------
    ccp4_project_name: std::string const &

    """
    return _coot.ccp4_project_directory(ccp4_project_name)

def add_to_history(ls):
    r"""
    add_to_history(vector_string ls)

    Parameters
    ----------
    ls: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.add_to_history(ls)

def add_to_history_simple(cmd):
    r"""
    add_to_history_simple(std::string const & cmd)

    Parameters
    ----------
    cmd: std::string const &

    """
    return _coot.add_to_history_simple(cmd)

def add_to_history_typed(command, args):
    r"""
    add_to_history_typed(std::string const & command, std::vector< coot::command_arg_t,std::allocator< coot::command_arg_t > > const & args)

    Parameters
    ----------
    command: std::string const &
    args: std::vector< coot::command_arg_t,std::allocator< coot::command_arg_t > > const &

    """
    return _coot.add_to_history_typed(command, args)

def single_quote(s):
    r"""
    single_quote(std::string const & s) -> std::string

    Parameters
    ----------
    s: std::string const &

    """
    return _coot.single_quote(s)

def pythonize_command_name(s):
    r"""
    pythonize_command_name(std::string const & s) -> std::string

    Parameters
    ----------
    s: std::string const &

    """
    return _coot.pythonize_command_name(s)

def schemize_command_name(s):
    r"""
    schemize_command_name(std::string const & s) -> std::string

    Parameters
    ----------
    s: std::string const &

    """
    return _coot.schemize_command_name(s)

def languagize_command(command_parts):
    r"""
    languagize_command(vector_string command_parts) -> std::string

    Parameters
    ----------
    command_parts: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.languagize_command(command_parts)

def add_to_database(command_strings):
    r"""
    add_to_database(vector_string command_strings)

    Parameters
    ----------
    command_strings: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.add_to_database(command_strings)

def merge_molecules_by_vector(add_molecules, imol):
    r"""
    merge_molecules_by_vector(IntVector add_molecules, int imol) -> std::pair< int,std::vector< merge_molecule_results_info_t,std::allocator< merge_molecule_results_info_t > > >

    Parameters
    ----------
    add_molecules: std::vector< int,std::allocator< int > > const &
    imol: int

    """
    return _coot.merge_molecules_by_vector(add_molecules, imol)

def dictionary_entries():
    r"""dictionary_entries() -> vector_string"""
    return _coot.dictionary_entries()

def debug_dictionary():
    r"""debug_dictionary()"""
    return _coot.debug_dictionary()

def SMILES_for_comp_id(comp_id):
    r"""
    SMILES_for_comp_id(std::string const & comp_id) -> std::string

    Parameters
    ----------
    comp_id: std::string const &

    """
    return _coot.SMILES_for_comp_id(comp_id)

def dictionaries_read_py():
    r"""dictionaries_read_py() -> PyObject *"""
    return _coot.dictionaries_read_py()

def cif_file_for_comp_id_py(comp_id):
    r"""
    cif_file_for_comp_id_py(std::string const & comp_id) -> PyObject *

    Parameters
    ----------
    comp_id: std::string const &

    """
    return _coot.cif_file_for_comp_id_py(comp_id)

def dictionary_entries_py():
    r"""dictionary_entries_py() -> PyObject *"""
    return _coot.dictionary_entries_py()

def SMILES_for_comp_id_py(comp_id):
    r"""
    SMILES_for_comp_id_py(std::string const & comp_id) -> PyObject *

    Parameters
    ----------
    comp_id: std::string const &

    """
    return _coot.SMILES_for_comp_id_py(comp_id)

def monomer_restraints_py(monomer_type):
    r"""
    monomer_restraints_py(std::string monomer_type) -> PyObject *

    Parameters
    ----------
    monomer_type: std::string

    """
    return _coot.monomer_restraints_py(monomer_type)

def monomer_restraints_for_molecule_py(monomer_type, imol):
    r"""
    monomer_restraints_for_molecule_py(std::string monomer_type, int imol) -> PyObject *

    Parameters
    ----------
    monomer_type: std::string
    imol: int

    """
    return _coot.monomer_restraints_for_molecule_py(monomer_type, imol)

def set_monomer_restraints_py(monomer_type, restraints):
    r"""
    set_monomer_restraints_py(char const * monomer_type, PyObject * restraints) -> PyObject *

    Parameters
    ----------
    monomer_type: char const *
    restraints: PyObject *

    """
    return _coot.set_monomer_restraints_py(monomer_type, restraints)

def show_restraints_editor(monomer_type):
    r"""
    show_restraints_editor(std::string monomer_type)

    Parameters
    ----------
    monomer_type: std::string

    """
    return _coot.show_restraints_editor(monomer_type)

def show_restraints_editor_by_index(menu_item_index):
    r"""
    show_restraints_editor_by_index(int menu_item_index)

    Parameters
    ----------
    menu_item_index: int

    """
    return _coot.show_restraints_editor_by_index(menu_item_index)

def write_restraints_cif_dictionary(monomer_type, file_name):
    r"""
    write_restraints_cif_dictionary(std::string monomer_type, std::string file_name)

    Parameters
    ----------
    monomer_type: std::string
    file_name: std::string

    """
    return _coot.write_restraints_cif_dictionary(monomer_type, file_name)

def list_nomenclature_errors_py(imol):
    r"""
    list_nomenclature_errors_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.list_nomenclature_errors_py(imol)

def show_fix_nomenclature_errors_gui(imol, nomenclature_errors):
    r"""
    show_fix_nomenclature_errors_gui(int imol, std::vector< std::pair< std::string,coot::residue_spec_t >,std::allocator< std::pair< std::string,coot::residue_spec_t > > > const & nomenclature_errors)

    Parameters
    ----------
    imol: int
    nomenclature_errors: std::vector< std::pair< std::string,coot::residue_spec_t >,std::allocator< std::pair< std::string,coot::residue_spec_t > > > const &

    """
    return _coot.show_fix_nomenclature_errors_gui(imol, nomenclature_errors)

def dipole_to_py(dp):
    r"""
    dipole_to_py(std::pair< coot::dipole,int > dp) -> PyObject *

    Parameters
    ----------
    dp: std::pair< coot::dipole,int >

    """
    return _coot.dipole_to_py(dp)

def coot_has_guile():
    r"""coot_has_guile() -> PyObject *"""
    return _coot.coot_has_guile()

def coot_can_do_lidia_p():
    r"""coot_can_do_lidia_p() -> bool"""
    return _coot.coot_can_do_lidia_p()

def run_scheme_command(scheme_command):
    r"""
    run_scheme_command(char const * scheme_command) -> PyObject *

    Parameters
    ----------
    scheme_command: char const *

    """
    return _coot.run_scheme_command(scheme_command)

def pyrun_simple_string(python_command):
    r"""
    pyrun_simple_string(char const * python_command) -> int

    Parameters
    ----------
    python_command: char const *

    """
    return _coot.pyrun_simple_string(python_command)

def residue_spec_to_py(res):
    r"""
    residue_spec_to_py(residue_spec_t res) -> PyObject *

    Parameters
    ----------
    res: coot::residue_spec_t const &

    """
    return _coot.residue_spec_to_py(res)

def residue_spec_make_triple_py(residue_spec_py):
    r"""
    residue_spec_make_triple_py(PyObject * residue_spec_py) -> PyObject *

    Parameters
    ----------
    residue_spec_py: PyObject *

    """
    return _coot.residue_spec_make_triple_py(residue_spec_py)

def residue_spec_from_py(residue_in):
    r"""
    residue_spec_from_py(PyObject * residue_in) -> residue_spec_t

    Parameters
    ----------
    residue_in: PyObject *

    """
    return _coot.residue_spec_from_py(residue_in)

def get_residue_by_type(imol, residue_type):
    r"""
    get_residue_by_type(int imol, std::string const & residue_type) -> residue_spec_t

    Parameters
    ----------
    imol: int
    residue_type: std::string const &

    """
    return _coot.get_residue_by_type(imol, residue_type)

def get_residue_specs_in_mol(imol, residue_type):
    r"""
    get_residue_specs_in_mol(int imol, std::string const & residue_type) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >

    Parameters
    ----------
    imol: int
    residue_type: std::string const &

    """
    return _coot.get_residue_specs_in_mol(imol, residue_type)

def get_residue_specs_in_mol_py(imol, residue_type):
    r"""
    get_residue_specs_in_mol_py(int imol, std::string const & residue_type) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_type: std::string const &

    """
    return _coot.get_residue_specs_in_mol_py(imol, residue_type)

def get_residue_by_type_py(arg1, residue_type):
    r"""
    get_residue_by_type_py(int arg1, std::string const & residue_type) -> PyObject *

    Parameters
    ----------
    arg1: int
    residue_type: std::string const &

    """
    return _coot.get_residue_by_type_py(arg1, residue_type)

def resname_from_serial_number(imol, chain_id, serial_num):
    r"""
    resname_from_serial_number(int imol, char const * chain_id, int serial_num) -> std::string

    Parameters
    ----------
    imol: int
    chain_id: char const *
    serial_num: int

    """
    return _coot.resname_from_serial_number(imol, chain_id, serial_num)

def residue_name(imol, chain_id, resno, ins_code):
    r"""
    residue_name(int imol, std::string const & chain_id, int resno, std::string const & ins_code) -> std::string

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    resno: int
    ins_code: std::string const &

    """
    return _coot.residue_name(imol, chain_id, resno, ins_code)

def serial_number_from_residue_specs(imol, chain_id, res_no, ins_code):
    r"""
    serial_number_from_residue_specs(int imol, std::string const & chain_id, int res_no, std::string const & ins_code) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    res_no: int
    ins_code: std::string const &

    """
    return _coot.serial_number_from_residue_specs(imol, chain_id, res_no, ins_code)

def hydrogenate_region(radius):
    r"""
    hydrogenate_region(float radius)

    Parameters
    ----------
    radius: float

    """
    return _coot.hydrogenate_region(radius)

def add_hydrogens_from_file(imol, pdb_with_Hs_file_name):
    r"""
    add_hydrogens_from_file(int imol, std::string pdb_with_Hs_file_name)

    Parameters
    ----------
    imol: int
    pdb_with_Hs_file_name: std::string

    """
    return _coot.add_hydrogens_from_file(imol, pdb_with_Hs_file_name)

def add_hydrogen_atoms_to_residue(imol, chain_id, res_no, ins_code):
    r"""
    add_hydrogen_atoms_to_residue(int imol, std::string chain_id, int res_no, std::string ins_code)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string

    """
    return _coot.add_hydrogen_atoms_to_residue(imol, chain_id, res_no, ins_code)

def add_hydrogen_atoms_to_residue_py(imol, residue_spec_py):
    r"""
    add_hydrogen_atoms_to_residue_py(int imol, PyObject * residue_spec_py)

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *

    """
    return _coot.add_hydrogen_atoms_to_residue_py(imol, residue_spec_py)

def atom_info_string_py(imol, chain_id, resno, ins_code, atname, altconf):
    r"""
    atom_info_string_py(int imol, char const * chain_id, int resno, char const * ins_code, char const * atname, char const * altconf) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    atname: char const *
    altconf: char const *

    """
    return _coot.atom_info_string_py(imol, chain_id, resno, ins_code, atname, altconf)

def molecule_to_pdb_string_py(imol):
    r"""
    molecule_to_pdb_string_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.molecule_to_pdb_string_py(imol)

def residue_info_py(imol, chain_id, resno, ins_code):
    r"""
    residue_info_py(int imol, char const * chain_id, int resno, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.residue_info_py(imol, chain_id, resno, ins_code)

def residue_name_py(imol, chain_id, resno, ins_code):
    r"""
    residue_name_py(int imol, char const * chain_id, int resno, char const * ins_code) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.residue_name_py(imol, chain_id, resno, ins_code)

def residue_centre_from_spec_py(imol, spec_py):
    r"""
    residue_centre_from_spec_py(int imol, PyObject * spec_py) -> PyObject *

    Parameters
    ----------
    imol: int
    spec_py: PyObject *

    """
    return _coot.residue_centre_from_spec_py(imol, spec_py)

def chain_fragments_py(imol, screen_output_also):
    r"""
    chain_fragments_py(int imol, short screen_output_also) -> PyObject *

    Parameters
    ----------
    imol: int
    screen_output_also: short

    """
    return _coot.chain_fragments_py(imol, screen_output_also)

def set_b_factor_residues_py(imol, residue_specs_b_value_tuple_list_py):
    r"""
    set_b_factor_residues_py(int imol, PyObject * residue_specs_b_value_tuple_list_py)

    Parameters
    ----------
    imol: int
    residue_specs_b_value_tuple_list_py: PyObject *

    """
    return _coot.set_b_factor_residues_py(imol, residue_specs_b_value_tuple_list_py)

def clear_and_update_molecule_py(molecule_number, molecule_expression):
    r"""
    clear_and_update_molecule_py(int molecule_number, PyObject * molecule_expression) -> int

    Parameters
    ----------
    molecule_number: int
    molecule_expression: PyObject *

    """
    return _coot.clear_and_update_molecule_py(molecule_number, molecule_expression)

def add_molecule_py(molecule_expression, name):
    r"""
    add_molecule_py(PyObject * molecule_expression, char const * name) -> int

    Parameters
    ----------
    molecule_expression: PyObject *
    name: char const *

    """
    return _coot.add_molecule_py(molecule_expression, name)

def active_residue_py():
    r"""active_residue_py() -> PyObject *"""
    return _coot.active_residue_py()

def closest_atom_simple_py():
    r"""closest_atom_simple_py() -> PyObject *"""
    return _coot.closest_atom_simple_py()

def closest_atom_py(imol):
    r"""
    closest_atom_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.closest_atom_py(imol)

def closest_atom_raw_py():
    r"""closest_atom_raw_py() -> PyObject *"""
    return _coot.closest_atom_raw_py()

def residues_near_residue_py(imol, residue_in, radius):
    r"""
    residues_near_residue_py(int imol, PyObject * residue_in, float radius) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_in: PyObject *
    radius: float

    """
    return _coot.residues_near_residue_py(imol, residue_in, radius)

def residues_near_residues_py(imol, residues_in, radius):
    r"""
    residues_near_residues_py(int imol, PyObject * residues_in, float radius) -> PyObject *

    Parameters
    ----------
    imol: int
    residues_in: PyObject *
    radius: float

    """
    return _coot.residues_near_residues_py(imol, residues_in, radius)

def residues_near_position_py(imol, pos_in, radius):
    r"""
    residues_near_position_py(int imol, PyObject * pos_in, float radius) -> PyObject *

    Parameters
    ----------
    imol: int
    pos_in: PyObject *
    radius: float

    """
    return _coot.residues_near_position_py(imol, pos_in, radius)

def label_closest_atoms_in_neighbour_residues_py(imol, residue_spec_py, radius):
    r"""
    label_closest_atoms_in_neighbour_residues_py(int imol, PyObject * residue_spec_py, float radius)

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *
    radius: float

    """
    return _coot.label_closest_atoms_in_neighbour_residues_py(imol, residue_spec_py, radius)

def get_bonds_representation(imol):
    r"""
    get_bonds_representation(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.get_bonds_representation(imol)

def get_dictionary_radii():
    r"""get_dictionary_radii() -> PyObject *"""
    return _coot.get_dictionary_radii()

def get_environment_distances_representation_py(imol, residue_spec_py):
    r"""
    get_environment_distances_representation_py(int imol, PyObject * residue_spec_py) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec_py: PyObject *

    """
    return _coot.get_environment_distances_representation_py(imol, residue_spec_py)

def get_intermediate_atoms_bonds_representation():
    r"""get_intermediate_atoms_bonds_representation() -> PyObject *"""
    return _coot.get_intermediate_atoms_bonds_representation()

def get_continue_updating_refinement_atoms_state():
    r"""get_continue_updating_refinement_atoms_state() -> int"""
    return _coot.get_continue_updating_refinement_atoms_state()

def atom_info_as_text_for_statusbar(*args):
    r"""
    atom_info_as_text_for_statusbar(int atom_index, int imol) -> std::string

    Parameters
    ----------
    atom_index: int
    imol: int

    atom_info_as_text_for_statusbar(int atom_index, int imol, std::pair< symm_trans_t,Cell_Translation > const & sts) -> std::string

    Parameters
    ----------
    atom_index: int
    imol: int
    sts: std::pair< symm_trans_t,Cell_Translation > const &

    """
    return _coot.atom_info_as_text_for_statusbar(*args)

def all_residues_with_serial_numbers_py(imol):
    r"""
    all_residues_with_serial_numbers_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.all_residues_with_serial_numbers_py(imol)

def regularize_residues(imol, residues):
    r"""
    regularize_residues(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residues)

    Parameters
    ----------
    imol: int
    residues: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &

    """
    return _coot.regularize_residues(imol, residues)

def mtz_file_name(imol):
    r"""
    mtz_file_name(int imol) -> std::string

    Parameters
    ----------
    imol: int

    """
    return _coot.mtz_file_name(imol)

def refine_zone_with_full_residue_spec_py(imol, chain_id, resno1, inscode_1, resno2, inscode_2, altconf):
    r"""
    refine_zone_with_full_residue_spec_py(int imol, char const * chain_id, int resno1, char const * inscode_1, int resno2, char const * inscode_2, char const * altconf) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno1: int
    inscode_1: char const *
    resno2: int
    inscode_2: char const *
    altconf: char const *

    """
    return _coot.refine_zone_with_full_residue_spec_py(imol, chain_id, resno1, inscode_1, resno2, inscode_2, altconf)

def set_draw_moving_atoms_rota_markup(state):
    r"""
    set_draw_moving_atoms_rota_markup(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_moving_atoms_rota_markup(state)

def set_draw_moving_atoms_rama_markup(state):
    r"""
    set_draw_moving_atoms_rama_markup(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_moving_atoms_rama_markup(state)

def set_show_intermediate_atoms_rota_markup(state):
    r"""
    set_show_intermediate_atoms_rota_markup(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_show_intermediate_atoms_rota_markup(state)

def set_show_intermediate_atoms_rama_markup(state):
    r"""
    set_show_intermediate_atoms_rama_markup(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_show_intermediate_atoms_rama_markup(state)

def get_draw_moving_atoms_rota_markup_state():
    r"""get_draw_moving_atoms_rota_markup_state() -> int"""
    return _coot.get_draw_moving_atoms_rota_markup_state()

def get_draw_moving_atoms_rama_markup_state():
    r"""get_draw_moving_atoms_rama_markup_state() -> int"""
    return _coot.get_draw_moving_atoms_rama_markup_state()

def get_show_intermediate_atoms_rota_markup():
    r"""get_show_intermediate_atoms_rota_markup() -> int"""
    return _coot.get_show_intermediate_atoms_rota_markup()

def get_show_intermediate_atoms_rama_markup():
    r"""get_show_intermediate_atoms_rama_markup() -> int"""
    return _coot.get_show_intermediate_atoms_rama_markup()

def set_cryo_em_refinement(mode):
    r"""
    set_cryo_em_refinement(bool mode)

    Parameters
    ----------
    mode: bool

    """
    return _coot.set_cryo_em_refinement(mode)

def get_cryo_em_refinement():
    r"""get_cryo_em_refinement() -> bool"""
    return _coot.get_cryo_em_refinement()

def accept_moving_atoms_py():
    r"""accept_moving_atoms_py() -> PyObject *"""
    return _coot.accept_moving_atoms_py()

def register_post_intermediate_atoms_moved_hook(function_name):
    r"""
    register_post_intermediate_atoms_moved_hook(PyObject * function_name)

    Parameters
    ----------
    function_name: PyObject *

    """
    return _coot.register_post_intermediate_atoms_moved_hook(function_name)

def set_regenerate_bonds_needs_make_bonds_type_checked(state):
    r"""
    set_regenerate_bonds_needs_make_bonds_type_checked(bool state)

    Parameters
    ----------
    state: bool

    """
    return _coot.set_regenerate_bonds_needs_make_bonds_type_checked(state)

def get_regenerate_bonds_needs_make_bonds_type_checked_state():
    r"""get_regenerate_bonds_needs_make_bonds_type_checked_state() -> bool"""
    return _coot.get_regenerate_bonds_needs_make_bonds_type_checked_state()

def rigid_body_fit_with_residue_ranges(imol, ranges):
    r"""
    rigid_body_fit_with_residue_ranges(int imol, std::vector< coot::residue_range_t,std::allocator< coot::residue_range_t > > const & ranges) -> int

    Parameters
    ----------
    imol: int
    ranges: std::vector< coot::residue_range_t,std::allocator< coot::residue_range_t > > const &

    """
    return _coot.rigid_body_fit_with_residue_ranges(imol, ranges)

def morph_fit_all(imol, transformation_averaging_radius):
    r"""
    morph_fit_all(int imol, float transformation_averaging_radius) -> int

    Parameters
    ----------
    imol: int
    transformation_averaging_radius: float

    """
    return _coot.morph_fit_all(imol, transformation_averaging_radius)

def morph_fit_chain(imol, chain_id, transformation_averaging_radius):
    r"""
    morph_fit_chain(int imol, std::string chain_id, float transformation_averaging_radius) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string
    transformation_averaging_radius: float

    """
    return _coot.morph_fit_chain(imol, chain_id, transformation_averaging_radius)

def morph_fit_residues_py(imol, residue_specs, transformation_averaging_radius):
    r"""
    morph_fit_residues_py(int imol, PyObject * residue_specs, float transformation_averaging_radius) -> int

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *
    transformation_averaging_radius: float

    """
    return _coot.morph_fit_residues_py(imol, residue_specs, transformation_averaging_radius)

def morph_fit_residues(imol, residue_specs, transformation_averaging_radius):
    r"""
    morph_fit_residues(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs, float transformation_averaging_radius) -> int

    Parameters
    ----------
    imol: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    transformation_averaging_radius: float

    """
    return _coot.morph_fit_residues(imol, residue_specs, transformation_averaging_radius)

def morph_fit_by_secondary_structure_elements(imol, chain_id):
    r"""
    morph_fit_by_secondary_structure_elements(int imol, std::string const & chain_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string const &

    """
    return _coot.morph_fit_by_secondary_structure_elements(imol, chain_id)

def check_waters_baddies(imol, b_factor_lim, map_sigma_lim, min_dist, max_dist, part_occ_contact_flag, zero_occ_flag, logical_operator_and_or_flag):
    r"""
    check_waters_baddies(int imol, float b_factor_lim, float map_sigma_lim, float min_dist, float max_dist, short part_occ_contact_flag, short zero_occ_flag, short logical_operator_and_or_flag) -> vector_atom_spec

    Parameters
    ----------
    imol: int
    b_factor_lim: float
    map_sigma_lim: float
    min_dist: float
    max_dist: float
    part_occ_contact_flag: short
    zero_occ_flag: short
    logical_operator_and_or_flag: short

    """
    return _coot.check_waters_baddies(imol, b_factor_lim, map_sigma_lim, min_dist, max_dist, part_occ_contact_flag, zero_occ_flag, logical_operator_and_or_flag)

def find_blobs(imol_model, imol_map, cut_off_density_level):
    r"""
    find_blobs(int imol_model, int imol_map, float cut_off_density_level) -> std::vector< std::pair< clipper::Coord_orth,double >,std::allocator< std::pair< clipper::Coord_orth,double > > >

    Parameters
    ----------
    imol_model: int
    imol_map: int
    cut_off_density_level: float

    """
    return _coot.find_blobs(imol_model, imol_map, cut_off_density_level)

def find_blobs_py(imol_model, imol_map, cut_off_density_level):
    r"""
    find_blobs_py(int imol_model, int imol_map, float cut_off_density_level) -> PyObject *

    Parameters
    ----------
    imol_model: int
    imol_map: int
    cut_off_density_level: float

    """
    return _coot.find_blobs_py(imol_model, imol_map, cut_off_density_level)

def b_factor_distribution_graph(imol):
    r"""
    b_factor_distribution_graph(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.b_factor_distribution_graph(imol)

def water_chain_from_shelx_ins_py(imol):
    r"""
    water_chain_from_shelx_ins_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.water_chain_from_shelx_ins_py(imol)

def water_chain_py(imol):
    r"""
    water_chain_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.water_chain_py(imol)

def add_status_bar_text(s):
    r"""
    add_status_bar_text(std::string const & s)

    Parameters
    ----------
    s: std::string const &

    """
    return _coot.add_status_bar_text(s)

def print_glyco_tree(imol, chain_id, resno, ins_code):
    r"""
    print_glyco_tree(int imol, std::string const & chain_id, int resno, std::string const & ins_code)

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    resno: int
    ins_code: std::string const &

    """
    return _coot.print_glyco_tree(imol, chain_id, resno, ins_code)

def make_variance_map(map_molecule_number_vec):
    r"""
    make_variance_map(IntVector map_molecule_number_vec) -> int

    Parameters
    ----------
    map_molecule_number_vec: std::vector< int,std::allocator< int > >

    """
    return _coot.make_variance_map(map_molecule_number_vec)

def make_variance_map_py(map_molecule_number_list):
    r"""
    make_variance_map_py(PyObject * map_molecule_number_list) -> int

    Parameters
    ----------
    map_molecule_number_list: PyObject *

    """
    return _coot.make_variance_map_py(map_molecule_number_list)

def spin_search_by_atom_vectors(imol_map, imol, chain_id, resno, ins_code, direction_atoms_list, moving_atoms_list):
    r"""
    spin_search_by_atom_vectors(int imol_map, int imol, std::string const & chain_id, int resno, std::string const & ins_code, std::pair< std::string,std::string > const & direction_atoms_list, vector_string moving_atoms_list)

    Parameters
    ----------
    imol_map: int
    imol: int
    chain_id: std::string const &
    resno: int
    ins_code: std::string const &
    direction_atoms_list: std::pair< std::string,std::string > const &
    moving_atoms_list: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.spin_search_by_atom_vectors(imol_map, imol, chain_id, resno, ins_code, direction_atoms_list, moving_atoms_list)

def spin_search_py(imol_map, imol, chain_id, resno, ins_code, direction_atoms_list, moving_atoms_list):
    r"""
    spin_search_py(int imol_map, int imol, char const * chain_id, int resno, char const * ins_code, PyObject * direction_atoms_list, PyObject * moving_atoms_list)

    Parameters
    ----------
    imol_map: int
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *
    direction_atoms_list: PyObject *
    moving_atoms_list: PyObject *

    """
    return _coot.spin_search_py(imol_map, imol, chain_id, resno, ins_code, direction_atoms_list, moving_atoms_list)

def spin_N_py(imol, residue_spec, angle):
    r"""
    spin_N_py(int imol, PyObject * residue_spec, float angle)

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *
    angle: float

    """
    return _coot.spin_N_py(imol, residue_spec, angle)

def CG_spin_search_py(imol_model, imol_map):
    r"""
    CG_spin_search_py(int imol_model, int imol_map) -> PyObject *

    Parameters
    ----------
    imol_model: int
    imol_map: int

    """
    return _coot.CG_spin_search_py(imol_model, imol_map)

def monomer_lib_3_letter_codes_matching(search_string, allow_minimal_descriptions_flag):
    r"""
    monomer_lib_3_letter_codes_matching(std::string const & search_string, short allow_minimal_descriptions_flag) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >

    Parameters
    ----------
    search_string: std::string const &
    allow_minimal_descriptions_flag: short

    """
    return _coot.monomer_lib_3_letter_codes_matching(search_string, allow_minimal_descriptions_flag)

def on_monomer_lib_search_results_button_press(button, user_data):
    r"""
    on_monomer_lib_search_results_button_press(GtkButton * button, gpointer user_data)

    Parameters
    ----------
    button: GtkButton *
    user_data: gpointer

    """
    return _coot.on_monomer_lib_search_results_button_press(button, user_data)

def on_monomer_lib_sbase_molecule_button_press(button, user_data):
    r"""
    on_monomer_lib_sbase_molecule_button_press(GtkButton * button, gpointer user_data)

    Parameters
    ----------
    button: GtkButton *
    user_data: gpointer

    """
    return _coot.on_monomer_lib_sbase_molecule_button_press(button, user_data)

def mutate_residue_range(imol, chain_id, res_no_start, res_no_end, target_sequence):
    r"""
    mutate_residue_range(int imol, std::string const & chain_id, int res_no_start, int res_no_end, std::string const & target_sequence) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    res_no_start: int
    res_no_end: int
    target_sequence: std::string const &

    """
    return _coot.mutate_residue_range(imol, chain_id, res_no_start, res_no_end, target_sequence)

def mutate_internal(ires, chain_id, imol, target_res_type):
    r"""
    mutate_internal(int ires, char const * chain_id, int imol, std::string & target_res_type) -> int

    Parameters
    ----------
    ires: int
    chain_id: char const *
    imol: int
    target_res_type: std::string &

    """
    return _coot.mutate_internal(ires, chain_id, imol, target_res_type)

def mutate_active_residue_to_single_letter_code(slc):
    r"""
    mutate_active_residue_to_single_letter_code(std::string const & slc)

    Parameters
    ----------
    slc: std::string const &

    """
    return _coot.mutate_active_residue_to_single_letter_code(slc)

def show_keyboard_mutate_dialog():
    r"""show_keyboard_mutate_dialog()"""
    return _coot.show_keyboard_mutate_dialog()

def overlap_ligands_internal(imol_ligand, imol_ref, chain_id_ref, resno_ref, apply_rtop_flag):
    r"""
    overlap_ligands_internal(int imol_ligand, int imol_ref, char const * chain_id_ref, int resno_ref, bool apply_rtop_flag) -> coot::graph_match_info_t

    Parameters
    ----------
    imol_ligand: int
    imol_ref: int
    chain_id_ref: char const *
    resno_ref: int
    apply_rtop_flag: bool

    """
    return _coot.overlap_ligands_internal(imol_ligand, imol_ref, chain_id_ref, resno_ref, apply_rtop_flag)

def do_smiles_to_simple_3d_overlay_frame():
    r"""do_smiles_to_simple_3d_overlay_frame()"""
    return _coot.do_smiles_to_simple_3d_overlay_frame()

def ligand_search_make_conformers_py():
    r"""ligand_search_make_conformers_py() -> PyObject *"""
    return _coot.ligand_search_make_conformers_py()

def ligand_search_make_conformers_internal():
    r"""ligand_search_make_conformers_internal() -> IntVector"""
    return _coot.ligand_search_make_conformers_internal()

def add_animated_ligand_interaction(imol, lb):
    r"""
    add_animated_ligand_interaction(int imol, pli::fle_ligand_bond_t const & lb)

    Parameters
    ----------
    imol: int
    lb: pli::fle_ligand_bond_t const &

    """
    return _coot.add_animated_ligand_interaction(imol, lb)

def cootaneer_internal(imol_map, imol_model, atom_spec):
    r"""
    cootaneer_internal(int imol_map, int imol_model, atom_spec_t atom_spec) -> int

    Parameters
    ----------
    imol_map: int
    imol_model: int
    atom_spec: coot::atom_spec_t const &

    """
    return _coot.cootaneer_internal(imol_map, imol_model, atom_spec)

def cootaneer_py(imol_map, imol_model, atom_in_fragment_atom_spec):
    r"""
    cootaneer_py(int imol_map, int imol_model, PyObject * atom_in_fragment_atom_spec) -> int

    Parameters
    ----------
    imol_map: int
    imol_model: int
    atom_in_fragment_atom_spec: PyObject *

    """
    return _coot.cootaneer_py(imol_map, imol_model, atom_in_fragment_atom_spec)

def sequence_from_map(imol, chain_id, resno_start, resno_end, imol_map):
    r"""
    sequence_from_map(int imol, std::string const & chain_id, int resno_start, int resno_end, int imol_map) -> std::string

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    resno_start: int
    resno_end: int
    imol_map: int

    """
    return _coot.sequence_from_map(imol, chain_id, resno_start, resno_end, imol_map)

def apply_sequence_to_fragment(imol, chain_id, resno_start, resno_end, imol_map, file_name_for_sequences):
    r"""
    apply_sequence_to_fragment(int imol, std::string const & chain_id, int resno_start, int resno_end, int imol_map, std::string const & file_name_for_sequences)

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    resno_start: int
    resno_end: int
    imol_map: int
    file_name_for_sequences: std::string const &

    """
    return _coot.apply_sequence_to_fragment(imol, chain_id, resno_start, resno_end, imol_map, file_name_for_sequences)

def assign_sequence_to_active_fragment():
    r"""assign_sequence_to_active_fragment()"""
    return _coot.assign_sequence_to_active_fragment()

def is_interesting_dots_object_next_p(vs):
    r"""
    is_interesting_dots_object_next_p(vector_string vs) -> std::pair< short,std::string >

    Parameters
    ----------
    vs: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.is_interesting_dots_object_next_p(vs)

def generic_string_vector_to_list_internal_py(v):
    r"""
    generic_string_vector_to_list_internal_py(vector_string v) -> PyObject *

    Parameters
    ----------
    v: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.generic_string_vector_to_list_internal_py(v)

def generic_int_vector_to_list_internal_py(v):
    r"""
    generic_int_vector_to_list_internal_py(IntVector v) -> PyObject *

    Parameters
    ----------
    v: std::vector< int,std::allocator< int > > const &

    """
    return _coot.generic_int_vector_to_list_internal_py(v)

def generic_list_to_string_vector_internal_py(l):
    r"""
    generic_list_to_string_vector_internal_py(PyObject * l) -> vector_string

    Parameters
    ----------
    l: PyObject *

    """
    return _coot.generic_list_to_string_vector_internal_py(l)

def rtop_to_python(rtop):
    r"""
    rtop_to_python(clipper::RTop_orth const & rtop) -> PyObject *

    Parameters
    ----------
    rtop: clipper::RTop_orth const &

    """
    return _coot.rtop_to_python(rtop)

def inverse_rtop_py(rtop_py):
    r"""
    inverse_rtop_py(PyObject * rtop_py) -> PyObject *

    Parameters
    ----------
    rtop_py: PyObject *

    """
    return _coot.inverse_rtop_py(rtop_py)

def atom_spec_from_python_expression(expr):
    r"""
    atom_spec_from_python_expression(PyObject * expr) -> atom_spec_t

    Parameters
    ----------
    expr: PyObject *

    """
    return _coot.atom_spec_from_python_expression(expr)

def atom_spec_to_py(spec):
    r"""
    atom_spec_to_py(atom_spec_t spec) -> PyObject *

    Parameters
    ----------
    spec: coot::atom_spec_t const &

    """
    return _coot.atom_spec_to_py(spec)

def set_display_control_button_state(imol, button_type, state):
    r"""
    set_display_control_button_state(int imol, std::string const & button_type, int state)

    Parameters
    ----------
    imol: int
    button_type: std::string const &
    state: int

    """
    return _coot.set_display_control_button_state(imol, button_type, state)

def fullscreen():
    r"""fullscreen()"""
    return _coot.fullscreen()

def unfullscreen():
    r"""unfullscreen()"""
    return _coot.unfullscreen()

def set_use_trackpad(state):
    r"""
    set_use_trackpad(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_trackpad(state)

def new_molecule_by_symmetry_matrix_from_molecule(mol, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc):
    r"""
    new_molecule_by_symmetry_matrix_from_molecule(mmdb::Manager * mol, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33, double tx, double ty, double tz, int pre_shift_to_origin_na, int pre_shift_to_origin_nb, int pre_shift_to_origin_nc) -> mmdb::Manager *

    Parameters
    ----------
    mol: mmdb::Manager *
    m11: double
    m12: double
    m13: double
    m21: double
    m22: double
    m23: double
    m31: double
    m32: double
    m33: double
    tx: double
    ty: double
    tz: double
    pre_shift_to_origin_na: int
    pre_shift_to_origin_nb: int
    pre_shift_to_origin_nc: int

    """
    return _coot.new_molecule_by_symmetry_matrix_from_molecule(mol, m11, m12, m13, m21, m22, m23, m31, m32, m33, tx, ty, tz, pre_shift_to_origin_na, pre_shift_to_origin_nb, pre_shift_to_origin_nc)

def get_coords_for_accession_code(code):
    r"""
    get_coords_for_accession_code(std::string const & code)

    Parameters
    ----------
    code: std::string const &

    """
    return _coot.get_coords_for_accession_code(code)

def coot_get_url_as_string_internal(url):
    r"""
    coot_get_url_as_string_internal(char const * url) -> std::string

    Parameters
    ----------
    url: char const *

    """
    return _coot.coot_get_url_as_string_internal(url)

def stop_curl_download(file_name):
    r"""
    stop_curl_download(char const * file_name)

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.stop_curl_download(file_name)

def get_drug_mdl_via_wikipedia_and_drugbank(drugname):
    r"""
    get_drug_mdl_via_wikipedia_and_drugbank(std::string drugname) -> std::string

    Parameters
    ----------
    drugname: std::string

    """
    return _coot.get_drug_mdl_via_wikipedia_and_drugbank(drugname)

def fetch_and_superpose_alphafold_models(imol):
    r"""
    fetch_and_superpose_alphafold_models(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.fetch_and_superpose_alphafold_models(imol)

def fetch_alphafold_model_for_uniprot_id(uniprot_id):
    r"""
    fetch_alphafold_model_for_uniprot_id(std::string const & uniprot_id) -> int

    Parameters
    ----------
    uniprot_id: std::string const &

    """
    return _coot.fetch_alphafold_model_for_uniprot_id(uniprot_id)

def fetch_emdb_map(emd_accession_code):
    r"""
    fetch_emdb_map(std::string const & emd_accession_code)

    Parameters
    ----------
    emd_accession_code: std::string const &

    """
    return _coot.fetch_emdb_map(emd_accession_code)

def fetch_cod_entry(cod_entry_id):
    r"""
    fetch_cod_entry(std::string const & cod_entry_id) -> int

    Parameters
    ----------
    cod_entry_id: std::string const &

    """
    return _coot.fetch_cod_entry(cod_entry_id)

def orient_view(imol, central_residue_spec, neighbour_residue_spec):
    r"""
    orient_view(int imol, residue_spec_t central_residue_spec, residue_spec_t neighbour_residue_spec)

    Parameters
    ----------
    imol: int
    central_residue_spec: coot::residue_spec_t const &
    neighbour_residue_spec: coot::residue_spec_t const &

    """
    return _coot.orient_view(imol, central_residue_spec, neighbour_residue_spec)

def topological_equivalence_chiral_centres(residue_type):
    r"""
    topological_equivalence_chiral_centres(std::string const & residue_type) -> vector_string

    Parameters
    ----------
    residue_type: std::string const &

    """
    return _coot.topological_equivalence_chiral_centres(residue_type)

def screendump_tga(file_name):
    r"""
    screendump_tga(std::string const & file_name)

    Parameters
    ----------
    file_name: std::string const &

    """
    return _coot.screendump_tga(file_name)

def set_framebuffer_scale_factor(sf):
    r"""
    set_framebuffer_scale_factor(unsigned int sf)

    Parameters
    ----------
    sf: unsigned int

    """
    return _coot.set_framebuffer_scale_factor(sf)

def set_use_perspective_projection(state):
    r"""
    set_use_perspective_projection(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_perspective_projection(state)

def use_perspective_projection_state():
    r"""use_perspective_projection_state() -> int"""
    return _coot.use_perspective_projection_state()

def set_perspective_fov(degrees):
    r"""
    set_perspective_fov(float degrees)

    Parameters
    ----------
    degrees: float

    """
    return _coot.set_perspective_fov(degrees)

def set_use_ambient_occlusion(state):
    r"""
    set_use_ambient_occlusion(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_ambient_occlusion(state)

def use_ambient_occlusion_state():
    r"""use_ambient_occlusion_state() -> int"""
    return _coot.use_ambient_occlusion_state()

def set_use_depth_blur(state):
    r"""
    set_use_depth_blur(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_depth_blur(state)

def use_depth_blur_state():
    r"""use_depth_blur_state() -> int"""
    return _coot.use_depth_blur_state()

def set_use_fog(state):
    r"""
    set_use_fog(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_fog(state)

def use_fog_state():
    r"""use_fog_state() -> int"""
    return _coot.use_fog_state()

def set_use_outline(state):
    r"""
    set_use_outline(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_outline(state)

def use_outline_state():
    r"""use_outline_state() -> int"""
    return _coot.use_outline_state()

def set_map_shininess(imol, shininess):
    r"""
    set_map_shininess(int imol, float shininess)

    Parameters
    ----------
    imol: int
    shininess: float

    """
    return _coot.set_map_shininess(imol, shininess)

def set_map_specular_strength(imol, specular_strength):
    r"""
    set_map_specular_strength(int imol, float specular_strength)

    Parameters
    ----------
    imol: int
    specular_strength: float

    """
    return _coot.set_map_specular_strength(imol, specular_strength)

def set_draw_normals(state):
    r"""
    set_draw_normals(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_normals(state)

def draw_normals_state():
    r"""draw_normals_state() -> int"""
    return _coot.draw_normals_state()

def set_draw_mesh(imol, mesh_index, state):
    r"""
    set_draw_mesh(int imol, int mesh_index, short state)

    Parameters
    ----------
    imol: int
    mesh_index: int
    state: short

    """
    return _coot.set_draw_mesh(imol, mesh_index, state)

def draw_mesh_state(imol, mesh_index):
    r"""
    draw_mesh_state(int imol, int mesh_index) -> int

    Parameters
    ----------
    imol: int
    mesh_index: int

    """
    return _coot.draw_mesh_state(imol, mesh_index)

def set_map_material_specular(imol, specular_strength, shininess):
    r"""
    set_map_material_specular(int imol, float specular_strength, float shininess)

    Parameters
    ----------
    imol: int
    specular_strength: float
    shininess: float

    """
    return _coot.set_map_material_specular(imol, specular_strength, shininess)

def set_model_material_specular(imol, specular_strength, shininess):
    r"""
    set_model_material_specular(int imol, float specular_strength, float shininess)

    Parameters
    ----------
    imol: int
    specular_strength: float
    shininess: float

    """
    return _coot.set_model_material_specular(imol, specular_strength, shininess)

def set_model_material_ambient(imol, r, g, b, alpha):
    r"""
    set_model_material_ambient(int imol, float r, float g, float b, float alpha)

    Parameters
    ----------
    imol: int
    r: float
    g: float
    b: float
    alpha: float

    """
    return _coot.set_model_material_ambient(imol, r, g, b, alpha)

def set_model_material_diffuse(imol, r, g, b, alpha):
    r"""
    set_model_material_diffuse(int imol, float r, float g, float b, float alpha)

    Parameters
    ----------
    imol: int
    r: float
    g: float
    b: float
    alpha: float

    """
    return _coot.set_model_material_diffuse(imol, r, g, b, alpha)

def set_model_goodselliness(pastelization_factor):
    r"""
    set_model_goodselliness(float pastelization_factor)

    Parameters
    ----------
    pastelization_factor: float

    """
    return _coot.set_model_goodselliness(pastelization_factor)

def set_map_fresnel_settings(imol, state, bias, scale, power):
    r"""
    set_map_fresnel_settings(int imol, short state, float bias, float scale, float power)

    Parameters
    ----------
    imol: int
    state: short
    bias: float
    scale: float
    power: float

    """
    return _coot.set_map_fresnel_settings(imol, state, bias, scale, power)

def reload_map_shader():
    r"""reload_map_shader()"""
    return _coot.reload_map_shader()

def reload_model_shader():
    r"""reload_model_shader()"""
    return _coot.reload_model_shader()

def set_atom_radius_scale_factor(imol, scale_factor):
    r"""
    set_atom_radius_scale_factor(int imol, float scale_factor)

    Parameters
    ----------
    imol: int
    scale_factor: float

    """
    return _coot.set_atom_radius_scale_factor(imol, scale_factor)

def set_use_fancy_lighting(state):
    r"""
    set_use_fancy_lighting(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_fancy_lighting(state)

def set_use_simple_lines_for_model_molecules(state):
    r"""
    set_use_simple_lines_for_model_molecules(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_use_simple_lines_for_model_molecules(state)

def set_fresnel_colour(imol, red, green, blue, opacity):
    r"""
    set_fresnel_colour(int imol, float red, float green, float blue, float opacity)

    Parameters
    ----------
    imol: int
    red: float
    green: float
    blue: float
    opacity: float

    """
    return _coot.set_fresnel_colour(imol, red, green, blue, opacity)

def set_focus_blur_z_depth(z):
    r"""
    set_focus_blur_z_depth(float z)

    Parameters
    ----------
    z: float

    """
    return _coot.set_focus_blur_z_depth(z)

def set_focus_blur_strength(st):
    r"""
    set_focus_blur_strength(float st)

    Parameters
    ----------
    st: float

    """
    return _coot.set_focus_blur_strength(st)

def set_shadow_strength(s):
    r"""
    set_shadow_strength(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_shadow_strength(s)

def set_shadow_resolution(reso_multiplier):
    r"""
    set_shadow_resolution(int reso_multiplier)

    Parameters
    ----------
    reso_multiplier: int

    """
    return _coot.set_shadow_resolution(reso_multiplier)

def set_shadow_box_size(size):
    r"""
    set_shadow_box_size(float size)

    Parameters
    ----------
    size: float

    """
    return _coot.set_shadow_box_size(size)

def set_ssao_kernel_n_samples(n_samples):
    r"""
    set_ssao_kernel_n_samples(unsigned int n_samples)

    Parameters
    ----------
    n_samples: unsigned int

    """
    return _coot.set_ssao_kernel_n_samples(n_samples)

def set_ssao_strength(strength):
    r"""
    set_ssao_strength(float strength)

    Parameters
    ----------
    strength: float

    """
    return _coot.set_ssao_strength(strength)

def set_ssao_radius(radius):
    r"""
    set_ssao_radius(float radius)

    Parameters
    ----------
    radius: float

    """
    return _coot.set_ssao_radius(radius)

def set_ssao_bias(bias):
    r"""
    set_ssao_bias(float bias)

    Parameters
    ----------
    bias: float

    """
    return _coot.set_ssao_bias(bias)

def set_ssao_blur_size(blur_size):
    r"""
    set_ssao_blur_size(unsigned int blur_size)

    Parameters
    ----------
    blur_size: unsigned int

    """
    return _coot.set_ssao_blur_size(blur_size)

def set_shadow_softness(softness):
    r"""
    set_shadow_softness(unsigned int softness)

    Parameters
    ----------
    softness: unsigned int

    """
    return _coot.set_shadow_softness(softness)

def set_shadow_texture_resolution_multiplier(m):
    r"""
    set_shadow_texture_resolution_multiplier(unsigned int m)

    Parameters
    ----------
    m: unsigned int

    """
    return _coot.set_shadow_texture_resolution_multiplier(m)

def set_effects_shader_output_type(type):
    r"""
    set_effects_shader_output_type(unsigned int type)

    Parameters
    ----------
    type: unsigned int

    """
    return _coot.set_effects_shader_output_type(type)

def set_effects_shader_brightness(f):
    r"""
    set_effects_shader_brightness(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_effects_shader_brightness(f)

def set_effects_shader_gamma(f):
    r"""
    set_effects_shader_gamma(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_effects_shader_gamma(f)

def set_bond_smoothness_factor(fac):
    r"""
    set_bond_smoothness_factor(unsigned int fac)

    Parameters
    ----------
    fac: unsigned int

    """
    return _coot.set_bond_smoothness_factor(fac)

def set_draw_gl_ramachandran_plot_during_refinement(state):
    r"""
    set_draw_gl_ramachandran_plot_during_refinement(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_draw_gl_ramachandran_plot_during_refinement(state)

def set_fps_timing_scale_factor(f):
    r"""
    set_fps_timing_scale_factor(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_fps_timing_scale_factor(f)

def set_draw_background_image(state):
    r"""
    set_draw_background_image(bool state)

    Parameters
    ----------
    state: bool

    """
    return _coot.set_draw_background_image(state)

def read_test_gltf_models():
    r"""read_test_gltf_models()"""
    return _coot.read_test_gltf_models()

def load_gltf_model(gltf_file_name):
    r"""
    load_gltf_model(std::string const & gltf_file_name)

    Parameters
    ----------
    gltf_file_name: std::string const &

    """
    return _coot.load_gltf_model(gltf_file_name)

def scale_model(model_index, scale_factor):
    r"""
    scale_model(unsigned int model_index, float scale_factor)

    Parameters
    ----------
    model_index: unsigned int
    scale_factor: float

    """
    return _coot.scale_model(model_index, scale_factor)

def reset_framebuffers():
    r"""reset_framebuffers()"""
    return _coot.reset_framebuffers()

def make_complementary_dotted_surfaces(imol_1, imol_2, r1, r2):
    r"""
    make_complementary_dotted_surfaces(int imol_1, int imol_2, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > & r1, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > & r2) -> clipper::Coord_orth

    Parameters
    ----------
    imol_1: int
    imol_2: int
    r1: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > &
    r2: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > &

    """
    return _coot.make_complementary_dotted_surfaces(imol_1, imol_2, r1, r2)

def residue_records_list_py_to_residue_specs(mol_1_residue_records, chain_id):
    r"""
    residue_records_list_py_to_residue_specs(PyObject * mol_1_residue_records, std::string const & chain_id) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >

    Parameters
    ----------
    mol_1_residue_records: PyObject *
    chain_id: std::string const &

    """
    return _coot.residue_records_list_py_to_residue_specs(mol_1_residue_records, chain_id)

def add_generic_object_bond(imol1, imol2, atom_spec_1, atom_spec_2, generic_object_number, colour):
    r"""
    add_generic_object_bond(int imol1, int imol2, atom_spec_t atom_spec_1, atom_spec_t atom_spec_2, int generic_object_number, std::string const & colour)

    Parameters
    ----------
    imol1: int
    imol2: int
    atom_spec_1: coot::atom_spec_t const &
    atom_spec_2: coot::atom_spec_t const &
    generic_object_number: int
    colour: std::string const &

    """
    return _coot.add_generic_object_bond(imol1, imol2, atom_spec_1, atom_spec_2, generic_object_number, colour)

def pisa_interfaces_display_only(imol_1, imol_2, centre_pt):
    r"""
    pisa_interfaces_display_only(int imol_1, int imol_2, clipper::Coord_orth centre_pt)

    Parameters
    ----------
    imol_1: int
    imol_2: int
    centre_pt: clipper::Coord_orth

    """
    return _coot.pisa_interfaces_display_only(imol_1, imol_2, centre_pt)

def untangle_mmdb_chain_id_string(mmdb_chain_id_in):
    r"""
    untangle_mmdb_chain_id_string(std::string const & mmdb_chain_id_in) -> std::string

    Parameters
    ----------
    mmdb_chain_id_in: std::string const &

    """
    return _coot.untangle_mmdb_chain_id_string(mmdb_chain_id_in)

def score_rotamers(imol, chain_id, res_no, ins_code, alt_conf, imol_map, clash_flag, lowest_probability):
    r"""
    score_rotamers(int imol, char const * chain_id, int res_no, char const * ins_code, char const * alt_conf, int imol_map, int clash_flag, float lowest_probability) -> std::vector< coot::named_rotamer_score,std::allocator< coot::named_rotamer_score > >

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    alt_conf: char const *
    imol_map: int
    clash_flag: int
    lowest_probability: float

    """
    return _coot.score_rotamers(imol, chain_id, res_no, ins_code, alt_conf, imol_map, clash_flag, lowest_probability)

def score_rotamers_py(imol, chain_id, res_no, ins_code, alt_conf, imol_map, clash_flag, lowest_probability):
    r"""
    score_rotamers_py(int imol, char const * chain_id, int res_no, char const * ins_code, char const * alt_conf, int imol_map, int clash_flag, float lowest_probability) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    alt_conf: char const *
    imol_map: int
    clash_flag: int
    lowest_probability: float

    """
    return _coot.score_rotamers_py(imol, chain_id, res_no, ins_code, alt_conf, imol_map, clash_flag, lowest_probability)

def protein_db_loops(imol_coords, residue_specs, imol_map, nfrags, preserve_residue_names):
    r"""
    protein_db_loops(int imol_coords, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs, int imol_map, int nfrags, bool preserve_residue_names) -> std::pair< std::pair< int,int >,std::vector< int,std::allocator< int > > >

    Parameters
    ----------
    imol_coords: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    imol_map: int
    nfrags: int
    preserve_residue_names: bool

    """
    return _coot.protein_db_loops(imol_coords, residue_specs, imol_map, nfrags, preserve_residue_names)

def protein_db_loop_specs_to_atom_selection_string(specs):
    r"""
    protein_db_loop_specs_to_atom_selection_string(std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & specs) -> std::string

    Parameters
    ----------
    specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &

    """
    return _coot.protein_db_loop_specs_to_atom_selection_string(specs)

def protein_db_loops_py(imol_coords, residues_specs, imol_map, nfrags, preserve_residue_names):
    r"""
    protein_db_loops_py(int imol_coords, PyObject * residues_specs, int imol_map, int nfrags, bool preserve_residue_names) -> PyObject *

    Parameters
    ----------
    imol_coords: int
    residues_specs: PyObject *
    imol_map: int
    nfrags: int
    preserve_residue_names: bool

    """
    return _coot.protein_db_loops_py(imol_coords, residues_specs, imol_map, nfrags, preserve_residue_names)

def hole(imol, start_x, start_y, start_z, end_x, end_y, end_z, colour_map_multiplier, colour_map_offset, n_runs, show_probe_radius_graph_flag, export_surface_dots_file_name):
    r"""
    hole(int imol, float start_x, float start_y, float start_z, float end_x, float end_y, float end_z, float colour_map_multiplier, float colour_map_offset, int n_runs, bool show_probe_radius_graph_flag, std::string export_surface_dots_file_name)

    Parameters
    ----------
    imol: int
    start_x: float
    start_y: float
    start_z: float
    end_x: float
    end_y: float
    end_z: float
    colour_map_multiplier: float
    colour_map_offset: float
    n_runs: int
    show_probe_radius_graph_flag: bool
    export_surface_dots_file_name: std::string

    """
    return _coot.hole(imol, start_x, start_y, start_z, end_x, end_y, end_z, colour_map_multiplier, colour_map_offset, n_runs, show_probe_radius_graph_flag, export_surface_dots_file_name)

def probe_radius_graph_close_callback(button, dialog):
    r"""
    probe_radius_graph_close_callback(GtkWidget * button, GtkWidget * dialog)

    Parameters
    ----------
    button: GtkWidget *
    dialog: GtkWidget *

    """
    return _coot.probe_radius_graph_close_callback(button, dialog)

def gaussian_surface(imol):
    r"""
    gaussian_surface(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.gaussian_surface(imol)

def set_gaussian_surface_sigma(s):
    r"""
    set_gaussian_surface_sigma(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_gaussian_surface_sigma(s)

def set_gaussian_surface_contour_level(s):
    r"""
    set_gaussian_surface_contour_level(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_gaussian_surface_contour_level(s)

def set_gaussian_surface_box_radius(s):
    r"""
    set_gaussian_surface_box_radius(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_gaussian_surface_box_radius(s)

def set_gaussian_surface_grid_scale(s):
    r"""
    set_gaussian_surface_grid_scale(float s)

    Parameters
    ----------
    s: float

    """
    return _coot.set_gaussian_surface_grid_scale(s)

def set_gaussian_surface_fft_b_factor(f):
    r"""
    set_gaussian_surface_fft_b_factor(float f)

    Parameters
    ----------
    f: float

    """
    return _coot.set_gaussian_surface_fft_b_factor(f)

def set_gaussian_surface_chain_colour_mode(mode):
    r"""
    set_gaussian_surface_chain_colour_mode(short mode)

    Parameters
    ----------
    mode: short

    """
    return _coot.set_gaussian_surface_chain_colour_mode(mode)

def show_gaussian_surface_overlay():
    r"""show_gaussian_surface_overlay()"""
    return _coot.show_gaussian_surface_overlay()

def make_link(imol, spec_1, spec_2, link_name, length):
    r"""
    make_link(int imol, atom_spec_t spec_1, atom_spec_t spec_2, std::string const & link_name, float length)

    Parameters
    ----------
    imol: int
    spec_1: coot::atom_spec_t &
    spec_2: coot::atom_spec_t &
    link_name: std::string const &
    length: float

    """
    return _coot.make_link(imol, spec_1, spec_2, link_name, length)

def make_link_py(imol, spec_1, spec_2, link_name, length):
    r"""
    make_link_py(int imol, PyObject * spec_1, PyObject * spec_2, std::string const & link_name, float length)

    Parameters
    ----------
    imol: int
    spec_1: PyObject *
    spec_2: PyObject *
    link_name: std::string const &
    length: float

    """
    return _coot.make_link_py(imol, spec_1, spec_2, link_name, length)

def link_info_py(imol):
    r"""
    link_info_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.link_info_py(imol)

def handle_drag_and_drop_string(uri):
    r"""
    handle_drag_and_drop_string(std::string const & uri) -> int

    Parameters
    ----------
    uri: std::string const &

    """
    return _coot.handle_drag_and_drop_string(uri)

def undisplay_all_maps_except(imol_map):
    r"""
    undisplay_all_maps_except(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.undisplay_all_maps_except(imol_map)

def map_contours(imol, contour_level):
    r"""
    map_contours(int imol, float contour_level) -> PyObject *

    Parameters
    ----------
    imol: int
    contour_level: float

    """
    return _coot.map_contours(imol, contour_level)

def map_contours_as_triangles(imol, contour_level):
    r"""
    map_contours_as_triangles(int imol, float contour_level) -> PyObject *

    Parameters
    ----------
    imol: int
    contour_level: float

    """
    return _coot.map_contours_as_triangles(imol, contour_level)

def set_radial_map_colouring_enabled(imol, state):
    r"""
    set_radial_map_colouring_enabled(int imol, int state)

    Parameters
    ----------
    imol: int
    state: int

    """
    return _coot.set_radial_map_colouring_enabled(imol, state)

def set_radial_map_colouring_centre(imol, x, y, z):
    r"""
    set_radial_map_colouring_centre(int imol, float x, float y, float z)

    Parameters
    ----------
    imol: int
    x: float
    y: float
    z: float

    """
    return _coot.set_radial_map_colouring_centre(imol, x, y, z)

def set_radial_map_colouring_min_radius(imol, r):
    r"""
    set_radial_map_colouring_min_radius(int imol, float r)

    Parameters
    ----------
    imol: int
    r: float

    """
    return _coot.set_radial_map_colouring_min_radius(imol, r)

def set_radial_map_colouring_max_radius(imol, r):
    r"""
    set_radial_map_colouring_max_radius(int imol, float r)

    Parameters
    ----------
    imol: int
    r: float

    """
    return _coot.set_radial_map_colouring_max_radius(imol, r)

def set_radial_map_colouring_invert(imol, invert_state):
    r"""
    set_radial_map_colouring_invert(int imol, int invert_state)

    Parameters
    ----------
    imol: int
    invert_state: int

    """
    return _coot.set_radial_map_colouring_invert(imol, invert_state)

def set_radial_map_colouring_saturation(imol, saturation):
    r"""
    set_radial_map_colouring_saturation(int imol, float saturation)

    Parameters
    ----------
    imol: int
    saturation: float

    """
    return _coot.set_radial_map_colouring_saturation(imol, saturation)

def set_map_correlation_atom_radius(r):
    r"""
    set_map_correlation_atom_radius(float r)

    Parameters
    ----------
    r: float

    """
    return _coot.set_map_correlation_atom_radius(r)

def map_to_model_correlation_py(imol, residue_specs, neighb_residue_specs, atom_mask_mode, imol_map):
    r"""
    map_to_model_correlation_py(int imol, PyObject * residue_specs, PyObject * neighb_residue_specs, unsigned short atom_mask_mode, int imol_map) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *
    neighb_residue_specs: PyObject *
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.map_to_model_correlation_py(imol, residue_specs, neighb_residue_specs, atom_mask_mode, imol_map)

def map_to_model_correlation_stats_py(imol, residue_specs, neighb_residue_specs, atom_mask_mode, imol_map):
    r"""
    map_to_model_correlation_stats_py(int imol, PyObject * residue_specs, PyObject * neighb_residue_specs, unsigned short atom_mask_mode, int imol_map) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *
    neighb_residue_specs: PyObject *
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.map_to_model_correlation_stats_py(imol, residue_specs, neighb_residue_specs, atom_mask_mode, imol_map)

def map_to_model_correlation_stats_per_residue_range_py(imol, chain_id, imol_map, n_residue_per_residue_range, exclude_NOC_flag):
    r"""
    map_to_model_correlation_stats_per_residue_range_py(int imol, std::string const & chain_id, int imol_map, unsigned int n_residue_per_residue_range, short exclude_NOC_flag) -> PyObject *

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    imol_map: int
    n_residue_per_residue_range: unsigned int
    exclude_NOC_flag: short

    """
    return _coot.map_to_model_correlation_stats_per_residue_range_py(imol, chain_id, imol_map, n_residue_per_residue_range, exclude_NOC_flag)

def map_to_model_correlation(imol, residue_specs, neigh_residue_specs, atom_mask_mode, imol_map):
    r"""
    map_to_model_correlation(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & neigh_residue_specs, unsigned short atom_mask_mode, int imol_map) -> float

    Parameters
    ----------
    imol: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    neigh_residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.map_to_model_correlation(imol, residue_specs, neigh_residue_specs, atom_mask_mode, imol_map)

def map_to_model_correlation_stats(imol, residue_specs, neigh_residue_specs, atom_mask_mode, imol_map):
    r"""
    map_to_model_correlation_stats(int imol, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & residue_specs, std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const & neigh_residue_specs, unsigned short atom_mask_mode, int imol_map) -> coot::util::density_correlation_stats_info_t

    Parameters
    ----------
    imol: int
    residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    neigh_residue_specs: std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > > const &
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.map_to_model_correlation_stats(imol, residue_specs, neigh_residue_specs, atom_mask_mode, imol_map)

def map_to_model_correlation_per_residue_py(imol, residue_specs, atom_mask_mode, imol_map):
    r"""
    map_to_model_correlation_per_residue_py(int imol, PyObject * residue_specs, unsigned short atom_mask_mode, int imol_map) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_specs: PyObject *
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.map_to_model_correlation_per_residue_py(imol, residue_specs, atom_mask_mode, imol_map)

def qq_plot_map_and_model_py(imol, residue_specs_py, neigh_residue_specs_py, atom_mask_mode, imol_map):
    r"""
    qq_plot_map_and_model_py(int imol, PyObject * residue_specs_py, PyObject * neigh_residue_specs_py, unsigned short atom_mask_mode, int imol_map) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_specs_py: PyObject *
    neigh_residue_specs_py: PyObject *
    atom_mask_mode: unsigned short
    imol_map: int

    """
    return _coot.qq_plot_map_and_model_py(imol, residue_specs_py, neigh_residue_specs_py, atom_mask_mode, imol_map)

def density_score_residue_py(imol, residue_spec, imol_map):
    r"""
    density_score_residue_py(int imol, PyObject * residue_spec, int imol_map) -> float

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *
    imol_map: int

    """
    return _coot.density_score_residue_py(imol, residue_spec, imol_map)

def density_score_residue(imol, chain_id, res_no, ins_code, imol_map):
    r"""
    density_score_residue(int imol, char const * chain_id, int res_no, char const * ins_code, int imol_map) -> float

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    imol_map: int

    """
    return _coot.density_score_residue(imol, chain_id, res_no, ins_code, imol_map)

def map_mean_py(imol):
    r"""
    map_mean_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.map_mean_py(imol)

def map_sigma_py(imol):
    r"""
    map_sigma_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.map_sigma_py(imol)

def map_statistics_py(imol):
    r"""
    map_statistics_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.map_statistics_py(imol)

def get_sequence_as_fasta_for_chain(imol, chain_id):
    r"""
    get_sequence_as_fasta_for_chain(int imol, std::string const & chain_id) -> std::string

    Parameters
    ----------
    imol: int
    chain_id: std::string const &

    """
    return _coot.get_sequence_as_fasta_for_chain(imol, chain_id)

def write_sequence(imol, file_name):
    r"""
    write_sequence(int imol, std::string const & file_name)

    Parameters
    ----------
    imol: int
    file_name: std::string const &

    """
    return _coot.write_sequence(imol, file_name)

def res_tracer(imol_map, pir_file_name):
    r"""
    res_tracer(int imol_map, std::string const & pir_file_name)

    Parameters
    ----------
    imol_map: int
    pir_file_name: std::string const &

    """
    return _coot.res_tracer(imol_map, pir_file_name)

def register_interesting_positions_list_py(pos_list):
    r"""
    register_interesting_positions_list_py(PyObject * pos_list)

    Parameters
    ----------
    pos_list: PyObject *

    """
    return _coot.register_interesting_positions_list_py(pos_list)

def molecule_atom_overlaps_py(imol):
    r"""
    molecule_atom_overlaps_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.molecule_atom_overlaps_py(imol)

def prodrg_import_function(file_name, comp_id):
    r"""
    prodrg_import_function(std::string file_name, std::string comp_id)

    Parameters
    ----------
    file_name: std::string
    comp_id: std::string

    """
    return _coot.prodrg_import_function(file_name, comp_id)

def sbase_import_function(comp_id):
    r"""
    sbase_import_function(std::string comp_id)

    Parameters
    ----------
    comp_id: std::string

    """
    return _coot.sbase_import_function(comp_id)

def align_to_closest_chain(target_seq, match_fraction):
    r"""
    align_to_closest_chain(std::string target_seq, float match_fraction) -> std::pair< int,std::string >

    Parameters
    ----------
    target_seq: std::string
    match_fraction: float

    """
    return _coot.align_to_closest_chain(target_seq, match_fraction)

def align_to_closest_chain_py(target_seq, match_fraction):
    r"""
    align_to_closest_chain_py(std::string target_seq, float match_fraction) -> PyObject *

    Parameters
    ----------
    target_seq: std::string
    match_fraction: float

    """
    return _coot.align_to_closest_chain_py(target_seq, match_fraction)

def resolve_clashing_sidechains_by_deletion(imol):
    r"""
    resolve_clashing_sidechains_by_deletion(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.resolve_clashing_sidechains_by_deletion(imol)

def resolve_clashing_sidechains_by_rebuilding(imol):
    r"""
    resolve_clashing_sidechains_by_rebuilding(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.resolve_clashing_sidechains_by_rebuilding(imol)

def simple_text_dialog(dialog_title, text, geom_x, geom_y):
    r"""
    simple_text_dialog(std::string const & dialog_title, std::string const & text, int geom_x, int geom_y)

    Parameters
    ----------
    dialog_title: std::string const &
    text: std::string const &
    geom_x: int
    geom_y: int

    """
    return _coot.simple_text_dialog(dialog_title, text, geom_x, geom_y)

def graphics_to_phenix_geo_representation(*args):
    r"""
    graphics_to_phenix_geo_representation(int imol, int mode, phenix_geo_bonds g)

    Parameters
    ----------
    imol: int
    mode: int
    g: coot::phenix_geo_bonds const &

    graphics_to_phenix_geo_representation(int imol, int mode, std::string const & geo_file_name)

    Parameters
    ----------
    imol: int
    mode: int
    geo_file_name: std::string const &

    """
    return _coot.graphics_to_phenix_geo_representation(*args)

def set_python_draw_function(command_string):
    r"""
    set_python_draw_function(std::string const & command_string)

    Parameters
    ----------
    command_string: std::string const &

    """
    return _coot.set_python_draw_function(command_string)

def pathology_data(mtz_file_name, fp_col, sigfp_col):
    r"""
    pathology_data(std::string const & mtz_file_name, std::string const & fp_col, std::string const & sigfp_col) -> PyObject *

    Parameters
    ----------
    mtz_file_name: std::string const &
    fp_col: std::string const &
    sigfp_col: std::string const &

    """
    return _coot.pathology_data(mtz_file_name, fp_col, sigfp_col)

def encode_ints(i1, i2):
    r"""
    encode_ints(int i1, int i2) -> int

    Parameters
    ----------
    i1: int
    i2: int

    """
    return _coot.encode_ints(i1, i2)

def decode_ints(i):
    r"""
    decode_ints(int i) -> std::pair< int,int >

    Parameters
    ----------
    i: int

    """
    return _coot.decode_ints(i)

def store_keyed_user_name(key, user_name, passwd):
    r"""
    store_keyed_user_name(std::string key, std::string user_name, std::string passwd)

    Parameters
    ----------
    key: std::string
    user_name: std::string
    passwd: std::string

    """
    return _coot.store_keyed_user_name(key, user_name, passwd)

def py_to_residue_specs(s):
    r"""
    py_to_residue_specs(PyObject * s) -> std::vector< coot::residue_spec_t,std::allocator< coot::residue_spec_t > >

    Parameters
    ----------
    s: PyObject *

    """
    return _coot.py_to_residue_specs(s)

def key_sym_code_py(po):
    r"""
    key_sym_code_py(PyObject * po) -> int

    Parameters
    ----------
    po: PyObject *

    """
    return _coot.key_sym_code_py(po)

def py_symop_strings_to_space_group(symop_string_list):
    r"""
    py_symop_strings_to_space_group(PyObject * symop_string_list) -> clipper::Spacegroup

    Parameters
    ----------
    symop_string_list: PyObject *

    """
    return _coot.py_symop_strings_to_space_group(symop_string_list)

def set_use_sounds(state):
    r"""
    set_use_sounds(bool state)

    Parameters
    ----------
    state: bool

    """
    return _coot.set_use_sounds(state)

def curmudgeon_mode():
    r"""curmudgeon_mode()"""
    return _coot.curmudgeon_mode()

def halloween():
    r"""halloween()"""
    return _coot.halloween()

def setup_tomo_slider(imol):
    r"""
    setup_tomo_slider(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.setup_tomo_slider(imol)

def tomo_section_view(imol, axis_id):
    r"""
    tomo_section_view(int imol, int axis_id)

    Parameters
    ----------
    imol: int
    axis_id: int

    """
    return _coot.tomo_section_view(imol, axis_id)

def set_tomo_section_view_section(imol, section_index):
    r"""
    set_tomo_section_view_section(int imol, int section_index)

    Parameters
    ----------
    imol: int
    section_index: int

    """
    return _coot.set_tomo_section_view_section(imol, section_index)

def set_tomo_picker_mode_is_active(state):
    r"""
    set_tomo_picker_mode_is_active(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_tomo_picker_mode_is_active(state)

def tomo_map_analysis(imol_map, spot_positions):
    r"""
    tomo_map_analysis(int imol_map, PyObject * spot_positions)

    Parameters
    ----------
    imol_map: int
    spot_positions: PyObject *

    """
    return _coot.tomo_map_analysis(imol_map, spot_positions)

def tomo_map_analysis_2(imol_map, spot_positions):
    r"""
    tomo_map_analysis_2(int imol_map, PyObject * spot_positions)

    Parameters
    ----------
    imol_map: int
    spot_positions: PyObject *

    """
    return _coot.tomo_map_analysis_2(imol_map, spot_positions)

def reverse_map(imol_map):
    r"""
    reverse_map(int imol_map)

    Parameters
    ----------
    imol_map: int

    """
    return _coot.reverse_map(imol_map)

def read_positron_metadata(z_data, table):
    r"""
    read_positron_metadata(std::string const & z_data, std::string const & table)

    Parameters
    ----------
    z_data: std::string const &
    table: std::string const &

    """
    return _coot.read_positron_metadata(z_data, table)

def positron_pathway(map_molecule_list_py, pathway_points_py):
    r"""
    positron_pathway(PyObject * map_molecule_list_py, PyObject * pathway_points_py) -> PyObject *

    Parameters
    ----------
    map_molecule_list_py: PyObject *
    pathway_points_py: PyObject *

    """
    return _coot.positron_pathway(map_molecule_list_py, pathway_points_py)

def positron_plot_py(fn_z_csv, fn_s_csv, base_map_index_list):
    r"""
    positron_plot_py(std::string const & fn_z_csv, std::string const & fn_s_csv, PyObject * base_map_index_list)

    Parameters
    ----------
    fn_z_csv: std::string const &
    fn_s_csv: std::string const &
    base_map_index_list: PyObject *

    """
    return _coot.positron_plot_py(fn_z_csv, fn_s_csv, base_map_index_list)

def handle_read_draw_molecule_with_recentre(filename, recentre_on_read_pdb_flag):
    r"""
    handle_read_draw_molecule_with_recentre(std::string const & filename, int recentre_on_read_pdb_flag) -> int

    Parameters
    ----------
    filename: std::string const &
    recentre_on_read_pdb_flag: int

    """
    return _coot.handle_read_draw_molecule_with_recentre(filename, recentre_on_read_pdb_flag)

def handle_read_draw_molecule_and_move_molecule_here(filename):
    r"""
    handle_read_draw_molecule_and_move_molecule_here(std::string const & filename) -> int

    Parameters
    ----------
    filename: std::string const &

    """
    return _coot.handle_read_draw_molecule_and_move_molecule_here(filename)

def read_pdb(filename):
    r"""
    read_pdb(std::string const & filename) -> int

    Parameters
    ----------
    filename: std::string const &

    """
    return _coot.read_pdb(filename)

def handle_read_draw_molecule(filename):
    r"""
    handle_read_draw_molecule(std::string const & filename) -> int

    Parameters
    ----------
    filename: std::string const &

    """
    return _coot.handle_read_draw_molecule(filename)

def set_use_gemmi_as_model_molecule_parser(state):
    r"""
    set_use_gemmi_as_model_molecule_parser(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_use_gemmi_as_model_molecule_parser(state)

def read_shelx_ins_file(filename, recentre_flag):
    r"""
    read_shelx_ins_file(std::string const & filename, short recentre_flag) -> int

    Parameters
    ----------
    filename: std::string const &
    recentre_flag: short

    """
    return _coot.read_shelx_ins_file(filename, recentre_flag)

def write_shelx_ins_file(imol, filename):
    r"""
    write_shelx_ins_file(int imol, char const * filename) -> int

    Parameters
    ----------
    imol: int
    filename: char const *

    """
    return _coot.write_shelx_ins_file(imol, filename)

def handle_shelx_fcf_file_internal(filename):
    r"""
    handle_shelx_fcf_file_internal(char const * filename) -> int

    Parameters
    ----------
    filename: char const *

    """
    return _coot.handle_shelx_fcf_file_internal(filename)

def is_shelx_molecule(imol):
    r"""
    is_shelx_molecule(int imol) -> int

    Parameters
    ----------
    imol: int

    """
    return _coot.is_shelx_molecule(imol)

def chain_id_for_shelxl_residue_number_py(imol, resno):
    r"""
    chain_id_for_shelxl_residue_number_py(int imol, int resno) -> PyObject *

    Parameters
    ----------
    imol: int
    resno: int

    """
    return _coot.chain_id_for_shelxl_residue_number_py(imol, resno)

def add_shelx_string_to_molecule(imol, string):
    r"""
    add_shelx_string_to_molecule(int imol, char const * string)

    Parameters
    ----------
    imol: int
    string: char const *

    """
    return _coot.add_shelx_string_to_molecule(imol, string)

def text_png_as_string(text_info_dict):
    r"""
    text_png_as_string(PyObject * text_info_dict) -> std::string

    Parameters
    ----------
    text_info_dict: PyObject *

    """
    return _coot.text_png_as_string(text_info_dict)

def safe_scheme_command(scheme_command):
    r"""
    safe_scheme_command(std::string const & scheme_command)

    Parameters
    ----------
    scheme_command: std::string const &

    """
    return _coot.safe_scheme_command(scheme_command)

def safe_python_command(python_command):
    r"""
    safe_python_command(std::string const & python_command)

    Parameters
    ----------
    python_command: std::string const &

    """
    return _coot.safe_python_command(python_command)

def safe_python_command_by_char_star(python_command):
    r"""
    safe_python_command_by_char_star(char const * python_command)

    Parameters
    ----------
    python_command: char const *

    """
    return _coot.safe_python_command_by_char_star(python_command)

def py_clean_internal(obj):
    r"""
    py_clean_internal(PyObject * obj) -> PyObject *

    Parameters
    ----------
    obj: PyObject *

    """
    return _coot.py_clean_internal(obj)

def safe_python_command_with_return(python_cmd):
    r"""
    safe_python_command_with_return(std::string const & python_cmd) -> PyObject *

    Parameters
    ----------
    python_cmd: std::string const &

    """
    return _coot.safe_python_command_with_return(python_cmd)

def safe_python_command_test(cmd):
    r"""
    safe_python_command_test(char const * cmd) -> PyObject *

    Parameters
    ----------
    cmd: char const *

    """
    return _coot.safe_python_command_test(cmd)

def safe_python_command_with_unsafe_thread(cmd):
    r"""
    safe_python_command_with_unsafe_thread(char const * cmd)

    Parameters
    ----------
    cmd: char const *

    """
    return _coot.safe_python_command_with_unsafe_thread(cmd)

def run_generic_script(cmd_strings):
    r"""
    run_generic_script(vector_string cmd_strings)

    Parameters
    ----------
    cmd_strings: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _coot.run_generic_script(cmd_strings)

def add_key_binding_gtk4_py(key, ctrl_key_flag, func, description):
    r"""
    add_key_binding_gtk4_py(PyObject * key, int ctrl_key_flag, PyObject * func, std::string const & description)

    Parameters
    ----------
    key: PyObject *
    ctrl_key_flag: int
    func: PyObject *
    description: std::string const &

    """
    return _coot.add_key_binding_gtk4_py(key, ctrl_key_flag, func, description)

def set_light_position_py(light_id, x, y, z):
    r"""
    set_light_position_py(int light_id, float x, float y, float z)

    Parameters
    ----------
    light_id: int
    x: float
    y: float
    z: float

    """
    return _coot.set_light_position_py(light_id, x, y, z)

def reload_shaders():
    r"""reload_shaders()"""
    return _coot.reload_shaders()

def reload_shader(shader_name):
    r"""
    reload_shader(std::string const & shader_name)

    Parameters
    ----------
    shader_name: std::string const &

    """
    return _coot.reload_shader(shader_name)

def display_python(o):
    r"""
    display_python(PyObject * o) -> PyObject *

    Parameters
    ----------
    o: PyObject *

    """
    return _coot.display_python(o)

def make_atom_spec_py(spec):
    r"""
    make_atom_spec_py(PyObject * spec) -> std::pair< bool,coot::atom_spec_t >

    Parameters
    ----------
    spec: PyObject *

    """
    return _coot.make_atom_spec_py(spec)

def make_residue_spec_py(spec):
    r"""
    make_residue_spec_py(PyObject * spec) -> std::pair< bool,coot::residue_spec_t >

    Parameters
    ----------
    spec: PyObject *

    """
    return _coot.make_residue_spec_py(spec)

def get_monomer_molecule_by_network_and_dict_gen(text):
    r"""
    get_monomer_molecule_by_network_and_dict_gen(std::string const & text) -> int

    Parameters
    ----------
    text: std::string const &

    """
    return _coot.get_monomer_molecule_by_network_and_dict_gen(text)

def new_molecule_sans_biggest_ligand_py(imol):
    r"""
    new_molecule_sans_biggest_ligand_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.new_molecule_sans_biggest_ligand_py(imol)

def gui_ligand_metrics_py(ligand_spec, ligand_metrics, percentile_limit):
    r"""
    gui_ligand_metrics_py(PyObject * ligand_spec, PyObject * ligand_metrics, double percentile_limit)

    Parameters
    ----------
    ligand_spec: PyObject *
    ligand_metrics: PyObject *
    percentile_limit: double

    """
    return _coot.gui_ligand_metrics_py(ligand_spec, ligand_metrics, percentile_limit)

def residues_distortions_py(imol, residue_spec_list):
    r"""
    residues_distortions_py(int imol, PyObject * residue_spec_list) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec_list: PyObject *

    """
    return _coot.residues_distortions_py(imol, residue_spec_list)

def get_intermediate_atoms_distortions_py():
    r"""get_intermediate_atoms_distortions_py() -> PyObject *"""
    return _coot.get_intermediate_atoms_distortions_py()

def probe_clash_score(dots_file_name):
    r"""
    probe_clash_score(std::string const & dots_file_name) -> probe_clash_score_t

    Parameters
    ----------
    dots_file_name: std::string const &

    """
    return _coot.probe_clash_score(dots_file_name)

def ligand_atom_overlaps_py(imol, ligand_spec, neighb_radius):
    r"""
    ligand_atom_overlaps_py(int imol, PyObject * ligand_spec, double neighb_radius) -> PyObject *

    Parameters
    ----------
    imol: int
    ligand_spec: PyObject *
    neighb_radius: double

    """
    return _coot.ligand_atom_overlaps_py(imol, ligand_spec, neighb_radius)

def residues_torsions_match_py(imol_1, res_1, imol_2, res_2, tolerance):
    r"""
    residues_torsions_match_py(int imol_1, PyObject * res_1, int imol_2, PyObject * res_2, float tolerance) -> bool

    Parameters
    ----------
    imol_1: int
    res_1: PyObject *
    imol_2: int
    res_2: PyObject *
    tolerance: float

    """
    return _coot.residues_torsions_match_py(imol_1, res_1, imol_2, res_2, tolerance)

def kolmogorov_smirnov_py(l1, l2):
    r"""
    kolmogorov_smirnov_py(PyObject * l1, PyObject * l2) -> double

    Parameters
    ----------
    l1: PyObject *
    l2: PyObject *

    """
    return _coot.kolmogorov_smirnov_py(l1, l2)

def kolmogorov_smirnov_vs_normal_py(l1, mean, std_dev):
    r"""
    kolmogorov_smirnov_vs_normal_py(PyObject * l1, double mean, double std_dev) -> double

    Parameters
    ----------
    l1: PyObject *
    mean: double
    std_dev: double

    """
    return _coot.kolmogorov_smirnov_vs_normal_py(l1, mean, std_dev)

def kullback_liebler_py(l1, l2):
    r"""
    kullback_liebler_py(PyObject * l1, PyObject * l2) -> PyObject *

    Parameters
    ----------
    l1: PyObject *
    l2: PyObject *

    """
    return _coot.kullback_liebler_py(l1, l2)

def print_residue_distortions(imol, chain_id, res_no, ins_code):
    r"""
    print_residue_distortions(int imol, std::string chain_id, int res_no, std::string ins_code) -> double

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string

    """
    return _coot.print_residue_distortions(imol, chain_id, res_no, ins_code)

def display_residue_distortions(imol, chain_id, res_no, ins_code):
    r"""
    display_residue_distortions(int imol, std::string chain_id, int res_no, std::string ins_code)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string

    """
    return _coot.display_residue_distortions(imol, chain_id, res_no, ins_code)

def display_residue_hydrogen_bond_atom_status_using_dictionary(imol, chain_id, res_no, ins_code):
    r"""
    display_residue_hydrogen_bond_atom_status_using_dictionary(int imol, std::string chain_id, int res_no, std::string ins_code)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string

    """
    return _coot.display_residue_hydrogen_bond_atom_status_using_dictionary(imol, chain_id, res_no, ins_code)

def write_dictionary_from_residue(imol, chain_id, res_no, ins_code, cif_file_name):
    r"""
    write_dictionary_from_residue(int imol, std::string chain_id, int res_no, std::string ins_code, std::string cif_file_name)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string
    cif_file_name: std::string

    """
    return _coot.write_dictionary_from_residue(imol, chain_id, res_no, ins_code, cif_file_name)

def add_dictionary_from_residue(imol, chain_id, res_no, ins_code):
    r"""
    add_dictionary_from_residue(int imol, std::string chain_id, int res_no, std::string ins_code)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string

    """
    return _coot.add_dictionary_from_residue(imol, chain_id, res_no, ins_code)

def invert_chiral_centre(imol, chain_id, res_no, ins_code, atom_name):
    r"""
    invert_chiral_centre(int imol, std::string chain_id, int res_no, std::string ins_code, std::string atom_name)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string
    atom_name: std::string

    """
    return _coot.invert_chiral_centre(imol, chain_id, res_no, ins_code, atom_name)

def match_residue_and_dictionary(imol, chain_id, res_no, ins_code, cif_dict_in, cif_dict_out, cif_dict_comp_id, reference_comp_id, output_comp_id, output_compound_name):
    r"""
    match_residue_and_dictionary(int imol, std::string chain_id, int res_no, std::string ins_code, std::string cif_dict_in, std::string cif_dict_out, std::string cif_dict_comp_id, std::string reference_comp_id, std::string output_comp_id, std::string output_compound_name) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string
    cif_dict_in: std::string
    cif_dict_out: std::string
    cif_dict_comp_id: std::string
    reference_comp_id: std::string
    output_comp_id: std::string
    output_compound_name: std::string

    """
    return _coot.match_residue_and_dictionary(imol, chain_id, res_no, ins_code, cif_dict_in, cif_dict_out, cif_dict_comp_id, reference_comp_id, output_comp_id, output_compound_name)

def match_this_residue_and_dictionary(imol, chain_id, res_no, ins_code, cif_dict_out, reference_comp_id, output_comp_id):
    r"""
    match_this_residue_and_dictionary(int imol, std::string chain_id, int res_no, std::string ins_code, std::string cif_dict_out, std::string reference_comp_id, std::string output_comp_id) -> int

    Parameters
    ----------
    imol: int
    chain_id: std::string
    res_no: int
    ins_code: std::string
    cif_dict_out: std::string
    reference_comp_id: std::string
    output_comp_id: std::string

    """
    return _coot.match_this_residue_and_dictionary(imol, chain_id, res_no, ins_code, cif_dict_out, reference_comp_id, output_comp_id)

def comprised_of_organic_set_p(rn):
    r"""
    comprised_of_organic_set_p(std::string const & rn) -> bool

    Parameters
    ----------
    rn: std::string const &

    """
    return _coot.comprised_of_organic_set_p(rn)

def coot_all_atom_contact_dots(imol):
    r"""
    coot_all_atom_contact_dots(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.coot_all_atom_contact_dots(imol)

def coot_all_atom_contact_dots_active_molecule():
    r"""coot_all_atom_contact_dots_active_molecule()"""
    return _coot.coot_all_atom_contact_dots_active_molecule()

def set_all_atom_contact_dots_ignore_water(state):
    r"""
    set_all_atom_contact_dots_ignore_water(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_all_atom_contact_dots_ignore_water(state)

def set_all_atom_contact_dots_do_vdw_surface(state):
    r"""
    set_all_atom_contact_dots_do_vdw_surface(short state)

    Parameters
    ----------
    state: short

    """
    return _coot.set_all_atom_contact_dots_do_vdw_surface(state)

def coot_contact_dots_for_ligand_py(imol, ligand_spec):
    r"""
    coot_contact_dots_for_ligand_py(int imol, PyObject * ligand_spec)

    Parameters
    ----------
    imol: int
    ligand_spec: PyObject *

    """
    return _coot.coot_contact_dots_for_ligand_py(imol, ligand_spec)

def switch_HIS_protonation_py(imol, residue_spec):
    r"""
    switch_HIS_protonation_py(int imol, PyObject * residue_spec)

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *

    """
    return _coot.switch_HIS_protonation_py(imol, residue_spec)

def coot_add_hydrogen_atoms(imol):
    r"""
    coot_add_hydrogen_atoms(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.coot_add_hydrogen_atoms(imol)

def coot_reduce(imol):
    r"""
    coot_reduce(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.coot_reduce(imol)

def set_contact_dots_density(density):
    r"""
    set_contact_dots_density(float density)

    Parameters
    ----------
    density: float

    """
    return _coot.set_contact_dots_density(density)

def set_contact_dot_sphere_n_subdivisions(n_subdivisions):
    r"""
    set_contact_dot_sphere_n_subdivisions(unsigned int n_subdivisions)

    Parameters
    ----------
    n_subdivisions: unsigned int

    """
    return _coot.set_contact_dot_sphere_n_subdivisions(n_subdivisions)

def get_ligand_percentile(metric_name, metric_value, reverse_order):
    r"""
    get_ligand_percentile(std::string metric_name, double metric_value, short reverse_order) -> double

    Parameters
    ----------
    metric_name: std::string
    metric_value: double
    reverse_order: short

    """
    return _coot.get_ligand_percentile(metric_name, metric_value, reverse_order)

def linked_residues_py(residue_centre, imol, close_dist_max):
    r"""
    linked_residues_py(PyObject * residue_centre, int imol, float close_dist_max) -> PyObject *

    Parameters
    ----------
    residue_centre: PyObject *
    imol: int
    close_dist_max: float

    """
    return _coot.linked_residues_py(residue_centre, imol, close_dist_max)

def enhanced_ligand_coot_p():
    r"""enhanced_ligand_coot_p() -> bool"""
    return _coot.enhanced_ligand_coot_p()

def jed_flip_intermediate_atoms():
    r"""jed_flip_intermediate_atoms() -> int"""
    return _coot.jed_flip_intermediate_atoms()

def reverse_jed_flip_intermediate_atoms():
    r"""reverse_jed_flip_intermediate_atoms() -> int"""
    return _coot.reverse_jed_flip_intermediate_atoms()

def get_ligand_distortion_summary_info_py(imol, residue_spec):
    r"""
    get_ligand_distortion_summary_info_py(int imol, PyObject * residue_spec) -> PyObject *

    Parameters
    ----------
    imol: int
    residue_spec: PyObject *

    """
    return _coot.get_ligand_distortion_summary_info_py(imol, residue_spec)

def gsl_sf_erf_scm(v):
    r"""
    gsl_sf_erf_scm(double v) -> double

    Parameters
    ----------
    v: double

    """
    return _coot.gsl_sf_erf_scm(v)

def mogul_markup(imol, chain_id, res_no, ins_code, mogul_out_file_name):
    r"""
    mogul_markup(int imol, char const * chain_id, int res_no, char const * ins_code, char const * mogul_out_file_name)

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    mogul_out_file_name: char const *

    """
    return _coot.mogul_markup(imol, chain_id, res_no, ins_code, mogul_out_file_name)

def update_restraints_using_mogul(imol, chain_id, res_no, ins_code, residue_type, mogul_out_file_name):
    r"""
    update_restraints_using_mogul(int imol, char const * chain_id, int res_no, char const * ins_code, char const * residue_type, char const * mogul_out_file_name) -> int

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    residue_type: char const *
    mogul_out_file_name: char const *

    """
    return _coot.update_restraints_using_mogul(imol, chain_id, res_no, ins_code, residue_type, mogul_out_file_name)

def set_mogul_max_badness(b):
    r"""
    set_mogul_max_badness(float b)

    Parameters
    ----------
    b: float

    """
    return _coot.set_mogul_max_badness(b)

def get_mogul_max_badness():
    r"""get_mogul_max_badness() -> float"""
    return _coot.get_mogul_max_badness()

def mogul_results_py(mogul_out_file_name):
    r"""
    mogul_results_py(char const * mogul_out_file_name) -> PyObject *

    Parameters
    ----------
    mogul_out_file_name: char const *

    """
    return _coot.mogul_results_py(mogul_out_file_name)
class sequence_to_chain_results_t(object):
    r"""Proxy of C++ sequence_to_chain_results_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(sequence_to_chain_results_t self) -> sequence_to_chain_results_t"""
        _coot.sequence_to_chain_results_t_swiginit(self, _coot.new_sequence_to_chain_results_t())
    matches = property(_coot.sequence_to_chain_results_t_matches_get, _coot.sequence_to_chain_results_t_matches_set, doc=r"""matches : bool""")
    match_fraction = property(_coot.sequence_to_chain_results_t_match_fraction_get, _coot.sequence_to_chain_results_t_match_fraction_set, doc=r"""match_fraction : double""")
    __swig_destroy__ = _coot.delete_sequence_to_chain_results_t

# Register sequence_to_chain_results_t in _coot:
_coot.sequence_to_chain_results_t_swigregister(sequence_to_chain_results_t)

def sequence_comparison_to_chains(imol, sequence):
    r"""
    sequence_comparison_to_chains(int imol, std::string sequence) -> std::vector< coot::chain_mutation_info_container_t,std::allocator< coot::chain_mutation_info_container_t > >

    Parameters
    ----------
    imol: int
    sequence: std::string

    """
    return _coot.sequence_comparison_to_chains(imol, sequence)

def assign_sequence_to_best_matching_chain(sequence):
    r"""
    assign_sequence_to_best_matching_chain(std::string sequence) -> bool

    Parameters
    ----------
    sequence: std::string

    """
    return _coot.assign_sequence_to_best_matching_chain(sequence)

def assign_sequences_to_best_matching_chain_from_fasta(fasta_file_name):
    r"""
    assign_sequences_to_best_matching_chain_from_fasta(std::string fasta_file_name) -> bool

    Parameters
    ----------
    fasta_file_name: std::string

    """
    return _coot.assign_sequences_to_best_matching_chain_from_fasta(fasta_file_name)

def apply_fasta_multi_to_fragment(imol, chain_id, resno_start, resno_end, imol_map, fam):
    r"""
    apply_fasta_multi_to_fragment(int imol, std::string const & chain_id, int resno_start, int resno_end, int imol_map, coot::fasta_multi const & fam)

    Parameters
    ----------
    imol: int
    chain_id: std::string const &
    resno_start: int
    resno_end: int
    imol_map: int
    fam: coot::fasta_multi const &

    """
    return _coot.apply_fasta_multi_to_fragment(imol, chain_id, resno_start, resno_end, imol_map, fam)

def get_refmac_refinement_method():
    r"""get_refmac_refinement_method() -> int"""
    return _coot.get_refmac_refinement_method()

def set_refmac_refinement_method(method):
    r"""
    set_refmac_refinement_method(int method)

    Parameters
    ----------
    method: int

    """
    return _coot.set_refmac_refinement_method(method)

def refmac_imol_coords():
    r"""refmac_imol_coords() -> int"""
    return _coot.refmac_imol_coords()

def crankshaft_peptide_rotation_optimization_intermediate_atoms():
    r"""crankshaft_peptide_rotation_optimization_intermediate_atoms() -> int"""
    return _coot.crankshaft_peptide_rotation_optimization_intermediate_atoms()

def curlew():
    r"""curlew()"""
    return _coot.curlew()

def new_generic_object_number(obj_name):
    r"""
    new_generic_object_number(std::string const & obj_name) -> int

    Parameters
    ----------
    obj_name: std::string const &

    """
    return _coot.new_generic_object_number(obj_name)

def new_generic_object_number_for_molecule(obj_name, imol):
    r"""
    new_generic_object_number_for_molecule(std::string const & obj_name, int imol) -> int

    Parameters
    ----------
    obj_name: std::string const &
    imol: int

    """
    return _coot.new_generic_object_number_for_molecule(obj_name, imol)

def to_generic_object_add_line(object_number, colour, line_width, to_x1, to_y1, to_z1, to_x2, to_y2, to_z2):
    r"""
    to_generic_object_add_line(int object_number, char const * colour, int line_width, float to_x1, float to_y1, float to_z1, float to_x2, float to_y2, float to_z2)

    Parameters
    ----------
    object_number: int
    colour: char const *
    line_width: int
    to_x1: float
    to_y1: float
    to_z1: float
    to_x2: float
    to_y2: float
    to_z2: float

    """
    return _coot.to_generic_object_add_line(object_number, colour, line_width, to_x1, to_y1, to_z1, to_x2, to_y2, to_z2)

def to_generic_object_add_cylinder(object_number, colour, line_radius, n_slices, from_x, from_y, from_z, to_x, to_y, to_z, cap_start, cap_end):
    r"""
    to_generic_object_add_cylinder(int object_number, char const * colour, float line_radius, int n_slices, float from_x, float from_y, float from_z, float to_x, float to_y, float to_z, bool cap_start, bool cap_end)

    Parameters
    ----------
    object_number: int
    colour: char const *
    line_radius: float
    n_slices: int
    from_x: float
    from_y: float
    from_z: float
    to_x: float
    to_y: float
    to_z: float
    cap_start: bool
    cap_end: bool

    """
    return _coot.to_generic_object_add_cylinder(object_number, colour, line_radius, n_slices, from_x, from_y, from_z, to_x, to_y, to_z, cap_start, cap_end)

def to_generic_object_add_dashed_line(object_number, colour, line_width, dash_density, from_x1, from_y1, from_z1, to_x2, to_y2, to_z2):
    r"""
    to_generic_object_add_dashed_line(int object_number, char const * colour, int line_width, float dash_density, float from_x1, float from_y1, float from_z1, float to_x2, float to_y2, float to_z2)

    Parameters
    ----------
    object_number: int
    colour: char const *
    line_width: int
    dash_density: float
    from_x1: float
    from_y1: float
    from_z1: float
    to_x2: float
    to_y2: float
    to_z2: float

    """
    return _coot.to_generic_object_add_dashed_line(object_number, colour, line_width, dash_density, from_x1, from_y1, from_z1, to_x2, to_y2, to_z2)

def to_generic_object_add_point(object_number, colour, point_width, from_x1, from_y1, from_z1):
    r"""
    to_generic_object_add_point(int object_number, char const * colour, int point_width, float from_x1, float from_y1, float from_z1)

    Parameters
    ----------
    object_number: int
    colour: char const *
    point_width: int
    from_x1: float
    from_y1: float
    from_z1: float

    """
    return _coot.to_generic_object_add_point(object_number, colour, point_width, from_x1, from_y1, from_z1)

def to_generic_object_add_points(object_number, point_info_list_py):
    r"""
    to_generic_object_add_points(int object_number, PyObject * point_info_list_py)

    Parameters
    ----------
    object_number: int
    point_info_list_py: PyObject *

    """
    return _coot.to_generic_object_add_points(object_number, point_info_list_py)

def from_generic_object_remove_last_item(object_number):
    r"""
    from_generic_object_remove_last_item(int object_number)

    Parameters
    ----------
    object_number: int

    """
    return _coot.from_generic_object_remove_last_item(object_number)

def to_generic_object_add_arc(object_number, colour, radius, radius_inner, angle_delta, start_point_x, start_point_y, start_point_z, start_dir_x, start_dir_y, start_dir_z, normal_x1, normal_y1, normal_z1):
    r"""
    to_generic_object_add_arc(int object_number, char const * colour, float radius, float radius_inner, float angle_delta, float start_point_x, float start_point_y, float start_point_z, float start_dir_x, float start_dir_y, float start_dir_z, float normal_x1, float normal_y1, float normal_z1)

    Parameters
    ----------
    object_number: int
    colour: char const *
    radius: float
    radius_inner: float
    angle_delta: float
    start_point_x: float
    start_point_y: float
    start_point_z: float
    start_dir_x: float
    start_dir_y: float
    start_dir_z: float
    normal_x1: float
    normal_y1: float
    normal_z1: float

    """
    return _coot.to_generic_object_add_arc(object_number, colour, radius, radius_inner, angle_delta, start_point_x, start_point_y, start_point_z, start_dir_x, start_dir_y, start_dir_z, normal_x1, normal_y1, normal_z1)

def to_generic_object_add_torus(object_number, colour_name, radius, radius_inner, centre_point_x, centre_point_y, centre_point_z, normal_x, normal_y, normal_z):
    r"""
    to_generic_object_add_torus(int object_number, char const * colour_name, float radius, float radius_inner, float centre_point_x, float centre_point_y, float centre_point_z, float normal_x, float normal_y, float normal_z)

    Parameters
    ----------
    object_number: int
    colour_name: char const *
    radius: float
    radius_inner: float
    centre_point_x: float
    centre_point_y: float
    centre_point_z: float
    normal_x: float
    normal_y: float
    normal_z: float

    """
    return _coot.to_generic_object_add_torus(object_number, colour_name, radius, radius_inner, centre_point_x, centre_point_y, centre_point_z, normal_x, normal_y, normal_z)

def to_generic_object_add_arrow(object_number, colour_name, stem_radius, from_x1, from_y1, from_z1, to_x2, to_y2, to_z2):
    r"""
    to_generic_object_add_arrow(int object_number, char const * colour_name, float stem_radius, float from_x1, float from_y1, float from_z1, float to_x2, float to_y2, float to_z2)

    Parameters
    ----------
    object_number: int
    colour_name: char const *
    stem_radius: float
    from_x1: float
    from_y1: float
    from_z1: float
    to_x2: float
    to_y2: float
    to_z2: float

    """
    return _coot.to_generic_object_add_arrow(object_number, colour_name, stem_radius, from_x1, from_y1, from_z1, to_x2, to_y2, to_z2)

def to_generic_object_add_dodecahedron(object_number, colour, radius, x, y, z):
    r"""
    to_generic_object_add_dodecahedron(int object_number, char const * colour, float radius, float x, float y, float z)

    Parameters
    ----------
    object_number: int
    colour: char const *
    radius: float
    x: float
    y: float
    z: float

    """
    return _coot.to_generic_object_add_dodecahedron(object_number, colour, radius, x, y, z)

def to_generic_object_add_pentakis_dodecahedron(object_number, colour, stellation_factor, radius_factor, x, y, z):
    r"""
    to_generic_object_add_pentakis_dodecahedron(int object_number, char const * colour, float stellation_factor, float radius_factor, float x, float y, float z)

    Parameters
    ----------
    object_number: int
    colour: char const *
    stellation_factor: float
    radius_factor: float
    x: float
    y: float
    z: float

    """
    return _coot.to_generic_object_add_pentakis_dodecahedron(object_number, colour, stellation_factor, radius_factor, x, y, z)

def to_generic_object_add_mesh(object_number, mesh_py):
    r"""
    to_generic_object_add_mesh(int object_number, PyObject * mesh_py)

    Parameters
    ----------
    object_number: int
    mesh_py: PyObject *

    """
    return _coot.to_generic_object_add_mesh(object_number, mesh_py)

def generic_object_mesh_calculate_normals(object_number):
    r"""
    generic_object_mesh_calculate_normals(int object_number)

    Parameters
    ----------
    object_number: int

    """
    return _coot.generic_object_mesh_calculate_normals(object_number)

def to_generic_object_add_display_list_handle(object_number, display_list_id):
    r"""
    to_generic_object_add_display_list_handle(int object_number, int display_list_id)

    Parameters
    ----------
    object_number: int
    display_list_id: int

    """
    return _coot.to_generic_object_add_display_list_handle(object_number, display_list_id)

def set_display_generic_object(object_number, istate):
    r"""
    set_display_generic_object(int object_number, short istate)

    Parameters
    ----------
    object_number: int
    istate: short

    """
    return _coot.set_display_generic_object(object_number, istate)

def set_display_generic_object_simple(object_number, istate):
    r"""
    set_display_generic_object_simple(int object_number, short istate)

    Parameters
    ----------
    object_number: int
    istate: short

    """
    return _coot.set_display_generic_object_simple(object_number, istate)

def generic_object_is_displayed_p(object_number):
    r"""
    generic_object_is_displayed_p(int object_number) -> int

    Parameters
    ----------
    object_number: int

    """
    return _coot.generic_object_is_displayed_p(object_number)

def generic_object_index(name):
    r"""
    generic_object_index(std::string const & name) -> int

    Parameters
    ----------
    name: std::string const &

    """
    return _coot.generic_object_index(name)

def generic_object_name_py(obj_number):
    r"""
    generic_object_name_py(unsigned int obj_number) -> PyObject *

    Parameters
    ----------
    obj_number: unsigned int

    """
    return _coot.generic_object_name_py(obj_number)

def get_generic_object_py(obj_number):
    r"""
    get_generic_object_py(unsigned int obj_number) -> PyObject *

    Parameters
    ----------
    obj_number: unsigned int

    """
    return _coot.get_generic_object_py(obj_number)

def number_of_generic_objects():
    r"""number_of_generic_objects() -> int"""
    return _coot.number_of_generic_objects()

def generic_object_info():
    r"""generic_object_info()"""
    return _coot.generic_object_info()

def get_generic_object_info(obj_number):
    r"""
    get_generic_object_info(int obj_number) -> PyObject *

    Parameters
    ----------
    obj_number: int

    """
    return _coot.get_generic_object_info(obj_number)

def generic_object_has_objects_p(obj_no):
    r"""
    generic_object_has_objects_p(int obj_no) -> short

    Parameters
    ----------
    obj_no: int

    """
    return _coot.generic_object_has_objects_p(obj_no)

def close_generic_object(object_number):
    r"""
    close_generic_object(int object_number)

    Parameters
    ----------
    object_number: int

    """
    return _coot.close_generic_object(object_number)

def is_closed_generic_object_p(object_number):
    r"""
    is_closed_generic_object_p(int object_number) -> short

    Parameters
    ----------
    object_number: int

    """
    return _coot.is_closed_generic_object_p(object_number)

def generic_object_clear(object_number):
    r"""
    generic_object_clear(int object_number)

    Parameters
    ----------
    object_number: int

    """
    return _coot.generic_object_clear(object_number)

def attach_generic_object_to_molecule(obj_number, imol):
    r"""
    attach_generic_object_to_molecule(int obj_number, int imol)

    Parameters
    ----------
    obj_number: int
    imol: int

    """
    return _coot.attach_generic_object_to_molecule(obj_number, imol)
class mtz_to_map_info_t(object):
    r"""Proxy of C++ coot::mtz_to_map_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mtz_file_name = property(_coot.mtz_to_map_info_t_mtz_file_name_get, _coot.mtz_to_map_info_t_mtz_file_name_set, doc=r"""mtz_file_name : std::string""")
    f_col = property(_coot.mtz_to_map_info_t_f_col_get, _coot.mtz_to_map_info_t_f_col_set, doc=r"""f_col : std::string""")
    phi_col = property(_coot.mtz_to_map_info_t_phi_col_get, _coot.mtz_to_map_info_t_phi_col_set, doc=r"""phi_col : std::string""")
    w_col = property(_coot.mtz_to_map_info_t_w_col_get, _coot.mtz_to_map_info_t_w_col_set, doc=r"""w_col : std::string""")
    id = property(_coot.mtz_to_map_info_t_id_get, _coot.mtz_to_map_info_t_id_set, doc=r"""id : std::string""")
    use_weights = property(_coot.mtz_to_map_info_t_use_weights_get, _coot.mtz_to_map_info_t_use_weights_set, doc=r"""use_weights : bool""")
    is_difference_map = property(_coot.mtz_to_map_info_t_is_difference_map_get, _coot.mtz_to_map_info_t_is_difference_map_set, doc=r"""is_difference_map : bool""")

    def __init__(self):
        r"""__init__(mtz_to_map_info_t self) -> mtz_to_map_info_t"""
        _coot.mtz_to_map_info_t_swiginit(self, _coot.new_mtz_to_map_info_t())
    __swig_destroy__ = _coot.delete_mtz_to_map_info_t

# Register mtz_to_map_info_t in _coot:
_coot.mtz_to_map_info_t_swigregister(mtz_to_map_info_t)
class mtz_type_label(object):
    r"""Proxy of C++ coot::mtz_type_label class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    column_type = property(_coot.mtz_type_label_column_type_get, _coot.mtz_type_label_column_type_set, doc=r"""column_type : char""")
    column_label = property(_coot.mtz_type_label_column_label_get, _coot.mtz_type_label_column_label_set, doc=r"""column_label : std::string""")
    column_position = property(_coot.mtz_type_label_column_position_get, _coot.mtz_type_label_column_position_set, doc=r"""column_position : int""")

    def __init__(self, *args):
        r"""
        __init__(mtz_type_label self, std::string const & column_label_in, char column_type_in, int column_position_in) -> mtz_type_label

        Parameters
        ----------
        column_label_in: std::string const &
        column_type_in: char
        column_position_in: int

        __init__(mtz_type_label self) -> mtz_type_label
        """
        _coot.mtz_type_label_swiginit(self, _coot.new_mtz_type_label(*args))
    __swig_destroy__ = _coot.delete_mtz_type_label

# Register mtz_type_label in _coot:
_coot.mtz_type_label_swigregister(mtz_type_label)
class mtz_column_types_info_t(object):
    r"""Proxy of C++ coot::mtz_column_types_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mtz_filename = property(_coot.mtz_column_types_info_t_mtz_filename_get, _coot.mtz_column_types_info_t_mtz_filename_set, doc=r"""mtz_filename : std::string""")
    read_success = property(_coot.mtz_column_types_info_t_read_success_get, _coot.mtz_column_types_info_t_read_success_set, doc=r"""read_success : short""")
    f_cols = property(_coot.mtz_column_types_info_t_f_cols_get, _coot.mtz_column_types_info_t_f_cols_set, doc=r"""f_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    sigf_cols = property(_coot.mtz_column_types_info_t_sigf_cols_get, _coot.mtz_column_types_info_t_sigf_cols_set, doc=r"""sigf_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    d_cols = property(_coot.mtz_column_types_info_t_d_cols_get, _coot.mtz_column_types_info_t_d_cols_set, doc=r"""d_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    sigd_cols = property(_coot.mtz_column_types_info_t_sigd_cols_get, _coot.mtz_column_types_info_t_sigd_cols_set, doc=r"""sigd_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    phi_cols = property(_coot.mtz_column_types_info_t_phi_cols_get, _coot.mtz_column_types_info_t_phi_cols_set, doc=r"""phi_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    weight_cols = property(_coot.mtz_column_types_info_t_weight_cols_get, _coot.mtz_column_types_info_t_weight_cols_set, doc=r"""weight_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    r_free_cols = property(_coot.mtz_column_types_info_t_r_free_cols_get, _coot.mtz_column_types_info_t_r_free_cols_set, doc=r"""r_free_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    hl_cols = property(_coot.mtz_column_types_info_t_hl_cols_get, _coot.mtz_column_types_info_t_hl_cols_set, doc=r"""hl_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    fpm_cols = property(_coot.mtz_column_types_info_t_fpm_cols_get, _coot.mtz_column_types_info_t_fpm_cols_set, doc=r"""fpm_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    sigfpm_cols = property(_coot.mtz_column_types_info_t_sigfpm_cols_get, _coot.mtz_column_types_info_t_sigfpm_cols_set, doc=r"""sigfpm_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    i_cols = property(_coot.mtz_column_types_info_t_i_cols_get, _coot.mtz_column_types_info_t_i_cols_set, doc=r"""i_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    ipm_cols = property(_coot.mtz_column_types_info_t_ipm_cols_get, _coot.mtz_column_types_info_t_ipm_cols_set, doc=r"""ipm_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    sigipm_cols = property(_coot.mtz_column_types_info_t_sigipm_cols_get, _coot.mtz_column_types_info_t_sigipm_cols_set, doc=r"""sigipm_cols : std::vector<(coot::mtz_type_label,std::allocator<(coot::mtz_type_label)>)>""")
    selected_f_col = property(_coot.mtz_column_types_info_t_selected_f_col_get, _coot.mtz_column_types_info_t_selected_f_col_set, doc=r"""selected_f_col : int""")
    selected_phi_col = property(_coot.mtz_column_types_info_t_selected_phi_col_get, _coot.mtz_column_types_info_t_selected_phi_col_set, doc=r"""selected_phi_col : int""")
    selected_weight_col = property(_coot.mtz_column_types_info_t_selected_weight_col_get, _coot.mtz_column_types_info_t_selected_weight_col_set, doc=r"""selected_weight_col : int""")
    selected_refmac_fobs_col = property(_coot.mtz_column_types_info_t_selected_refmac_fobs_col_get, _coot.mtz_column_types_info_t_selected_refmac_fobs_col_set, doc=r"""selected_refmac_fobs_col : int""")
    selected_refmac_sigfobs_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigfobs_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigfobs_col_set, doc=r"""selected_refmac_sigfobs_col : int""")
    selected_refmac_r_free_col = property(_coot.mtz_column_types_info_t_selected_refmac_r_free_col_get, _coot.mtz_column_types_info_t_selected_refmac_r_free_col_set, doc=r"""selected_refmac_r_free_col : int""")
    selected_refmac_phi_col = property(_coot.mtz_column_types_info_t_selected_refmac_phi_col_get, _coot.mtz_column_types_info_t_selected_refmac_phi_col_set, doc=r"""selected_refmac_phi_col : int""")
    selected_refmac_fom_col = property(_coot.mtz_column_types_info_t_selected_refmac_fom_col_get, _coot.mtz_column_types_info_t_selected_refmac_fom_col_set, doc=r"""selected_refmac_fom_col : int""")
    selected_refmac_hla_col = property(_coot.mtz_column_types_info_t_selected_refmac_hla_col_get, _coot.mtz_column_types_info_t_selected_refmac_hla_col_set, doc=r"""selected_refmac_hla_col : int""")
    selected_refmac_hlb_col = property(_coot.mtz_column_types_info_t_selected_refmac_hlb_col_get, _coot.mtz_column_types_info_t_selected_refmac_hlb_col_set, doc=r"""selected_refmac_hlb_col : int""")
    selected_refmac_hlc_col = property(_coot.mtz_column_types_info_t_selected_refmac_hlc_col_get, _coot.mtz_column_types_info_t_selected_refmac_hlc_col_set, doc=r"""selected_refmac_hlc_col : int""")
    selected_refmac_hld_col = property(_coot.mtz_column_types_info_t_selected_refmac_hld_col_get, _coot.mtz_column_types_info_t_selected_refmac_hld_col_set, doc=r"""selected_refmac_hld_col : int""")
    selected_refmac_fp_col = property(_coot.mtz_column_types_info_t_selected_refmac_fp_col_get, _coot.mtz_column_types_info_t_selected_refmac_fp_col_set, doc=r"""selected_refmac_fp_col : int""")
    selected_refmac_sigfp_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigfp_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigfp_col_set, doc=r"""selected_refmac_sigfp_col : int""")
    selected_refmac_fm_col = property(_coot.mtz_column_types_info_t_selected_refmac_fm_col_get, _coot.mtz_column_types_info_t_selected_refmac_fm_col_set, doc=r"""selected_refmac_fm_col : int""")
    selected_refmac_sigfm_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigfm_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigfm_col_set, doc=r"""selected_refmac_sigfm_col : int""")
    selected_refmac_iobs_col = property(_coot.mtz_column_types_info_t_selected_refmac_iobs_col_get, _coot.mtz_column_types_info_t_selected_refmac_iobs_col_set, doc=r"""selected_refmac_iobs_col : int""")
    selected_refmac_sigiobs_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigiobs_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigiobs_col_set, doc=r"""selected_refmac_sigiobs_col : int""")
    selected_refmac_ip_col = property(_coot.mtz_column_types_info_t_selected_refmac_ip_col_get, _coot.mtz_column_types_info_t_selected_refmac_ip_col_set, doc=r"""selected_refmac_ip_col : int""")
    selected_refmac_sigip_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigip_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigip_col_set, doc=r"""selected_refmac_sigip_col : int""")
    selected_refmac_im_col = property(_coot.mtz_column_types_info_t_selected_refmac_im_col_get, _coot.mtz_column_types_info_t_selected_refmac_im_col_set, doc=r"""selected_refmac_im_col : int""")
    selected_refmac_sigim_col = property(_coot.mtz_column_types_info_t_selected_refmac_sigim_col_get, _coot.mtz_column_types_info_t_selected_refmac_sigim_col_set, doc=r"""selected_refmac_sigim_col : int""")
    use_weights = property(_coot.mtz_column_types_info_t_use_weights_get, _coot.mtz_column_types_info_t_use_weights_set, doc=r"""use_weights : int""")

    def get_prefered_label_idx(self, cols, prefered_suffix):
        r"""
        get_prefered_label_idx(mtz_column_types_info_t self, vector_mtz_type_label cols, std::string const & prefered_suffix) -> int

        Parameters
        ----------
        cols: std::vector< coot::mtz_type_label,std::allocator< coot::mtz_type_label > > const &
        prefered_suffix: std::string const &

        """
        return _coot.mtz_column_types_info_t_get_prefered_label_idx(self, cols, prefered_suffix)

    def get_prefered_f_col_idx(self):
        r"""get_prefered_f_col_idx(mtz_column_types_info_t self) -> int"""
        return _coot.mtz_column_types_info_t_get_prefered_f_col_idx(self)

    def get_prefered_phi_col_idx(self):
        r"""get_prefered_phi_col_idx(mtz_column_types_info_t self) -> int"""
        return _coot.mtz_column_types_info_t_get_prefered_phi_col_idx(self)

    def __init__(self):
        r"""__init__(mtz_column_types_info_t self) -> mtz_column_types_info_t"""
        _coot.mtz_column_types_info_t_swiginit(self, _coot.new_mtz_column_types_info_t())
    __swig_destroy__ = _coot.delete_mtz_column_types_info_t

# Register mtz_column_types_info_t in _coot:
_coot.mtz_column_types_info_t_swigregister(mtz_column_types_info_t)

def get_mtz_columns(filename):
    r"""
    get_mtz_columns(std::string const & filename) -> mtz_column_types_info_t

    Parameters
    ----------
    filename: std::string const &

    """
    return _coot.get_mtz_columns(filename)

def get_f_cols(mtz_file_name):
    r"""
    get_f_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_f_cols(mtz_file_name)

def get_sigf_cols(mtz_file_name):
    r"""
    get_sigf_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_sigf_cols(mtz_file_name)

def get_r_free_cols(mtz_file_name):
    r"""
    get_r_free_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_r_free_cols(mtz_file_name)

def get_phi_cols(mtz_file_name):
    r"""
    get_phi_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_phi_cols(mtz_file_name)

def get_weight_cols(mtz_file_name):
    r"""
    get_weight_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_weight_cols(mtz_file_name)

def get_d_cols(mtz_file_name):
    r"""
    get_d_cols(std::string const & mtz_file_name) -> vector_string

    Parameters
    ----------
    mtz_file_name: std::string const &

    """
    return _coot.get_d_cols(mtz_file_name)

def my_combo_box_text_add_items(combobox, labels, active_label_index):
    r"""
    my_combo_box_text_add_items(GtkComboBox * combobox, vector_mtz_type_label labels, int active_label_index)

    Parameters
    ----------
    combobox: GtkComboBox *
    labels: std::vector< coot::mtz_type_label,std::allocator< coot::mtz_type_label > > const &
    active_label_index: int

    """
    return _coot.my_combo_box_text_add_items(combobox, labels, active_label_index)
DELETED = _coot.DELETED

MUTATED = _coot.MUTATED

MOVINGATOMS = _coot.MOVINGATOMS

ROTAMERSEARCHAUTOMATIC = _coot.ROTAMERSEARCHAUTOMATIC

ROTAMERSEARCHHIGHRES = _coot.ROTAMERSEARCHHIGHRES

ROTAMERSEARCHLOWRES = _coot.ROTAMERSEARCHLOWRES


def residue_to_sdf_file(imol, chain_id, res_no, ins_code, sdf_file_name, kekulize):
    r"""
    residue_to_sdf_file(int imol, char const * chain_id, int res_no, char const * ins_code, char const * sdf_file_name, bool kekulize) -> bool

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    sdf_file_name: char const *
    kekulize: bool

    """
    return _coot.residue_to_sdf_file(imol, chain_id, res_no, ins_code, sdf_file_name, kekulize)

def residue_to_mdl_file_for_mogul(imol, chain_id, res_no, ins_code, mdl_file_name):
    r"""
    residue_to_mdl_file_for_mogul(int imol, char const * chain_id, int res_no, char const * ins_code, char const * mdl_file_name) -> bool

    Parameters
    ----------
    imol: int
    chain_id: char const *
    res_no: int
    ins_code: char const *
    mdl_file_name: char const *

    """
    return _coot.residue_to_mdl_file_for_mogul(imol, chain_id, res_no, ins_code, mdl_file_name)

def show_feats(imol, chain_id, resno, ins_code):
    r"""
    show_feats(int imol, char const * chain_id, int resno, char const * ins_code) -> bool

    Parameters
    ----------
    imol: int
    chain_id: char const *
    resno: int
    ins_code: char const *

    """
    return _coot.show_feats(imol, chain_id, resno, ins_code)
class atom_spec_t(object):
    r"""Proxy of C++ coot::atom_spec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    chain_id = property(_coot.atom_spec_t_chain_id_get, _coot.atom_spec_t_chain_id_set, doc=r"""chain_id : std::string""")
    res_no = property(_coot.atom_spec_t_res_no_get, _coot.atom_spec_t_res_no_set, doc=r"""res_no : int""")
    ins_code = property(_coot.atom_spec_t_ins_code_get, _coot.atom_spec_t_ins_code_set, doc=r"""ins_code : std::string""")
    atom_name = property(_coot.atom_spec_t_atom_name_get, _coot.atom_spec_t_atom_name_set, doc=r"""atom_name : std::string""")
    alt_conf = property(_coot.atom_spec_t_alt_conf_get, _coot.atom_spec_t_alt_conf_set, doc=r"""alt_conf : std::string""")
    int_user_data = property(_coot.atom_spec_t_int_user_data_get, _coot.atom_spec_t_int_user_data_set, doc=r"""int_user_data : int""")
    float_user_data = property(_coot.atom_spec_t_float_user_data_get, _coot.atom_spec_t_float_user_data_set, doc=r"""float_user_data : float""")
    string_user_data = property(_coot.atom_spec_t_string_user_data_get, _coot.atom_spec_t_string_user_data_set, doc=r"""string_user_data : std::string""")
    model_number = property(_coot.atom_spec_t_model_number_get, _coot.atom_spec_t_model_number_set, doc=r"""model_number : int""")

    def __init__(self, *args):
        r"""
        __init__(atom_spec_t self) -> atom_spec_t
        __init__(atom_spec_t self, std::string const & chain_in, int resno_in, std::string const & insertion_code_in, std::string const & atom_name_in, std::string const & alt_conf_in) -> atom_spec_t

        Parameters
        ----------
        chain_in: std::string const &
        resno_in: int
        insertion_code_in: std::string const &
        atom_name_in: std::string const &
        alt_conf_in: std::string const &

        __init__(atom_spec_t self, mmdb::Atom * at) -> atom_spec_t

        Parameters
        ----------
        at: mmdb::Atom *

        __init__(atom_spec_t self, mmdb::Atom * at, std::string const & user_data_string) -> atom_spec_t

        Parameters
        ----------
        at: mmdb::Atom *
        user_data_string: std::string const &

        """
        _coot.atom_spec_t_swiginit(self, _coot.new_atom_spec_t(*args))

    def empty(self):
        r"""empty(atom_spec_t self) -> bool"""
        return _coot.atom_spec_t_empty(self)

    def selectatoms(self, mol, SelHnd):
        r"""
        selectatoms(atom_spec_t self, mmdb::Manager * mol, int SelHnd)

        Parameters
        ----------
        mol: mmdb::Manager *
        SelHnd: int

        """
        return _coot.atom_spec_t_selectatoms(self, mol, SelHnd)

    def matches_spec(self, atom):
        r"""
        matches_spec(atom_spec_t self, mmdb::Atom * atom) -> bool

        Parameters
        ----------
        atom: mmdb::Atom *

        """
        return _coot.atom_spec_t_matches_spec(self, atom)

    def format(self):
        r"""format(atom_spec_t self) -> std::string"""
        return _coot.atom_spec_t_format(self)

    def label(self, *args):
        r"""
        label(atom_spec_t self) -> std::string
        label(atom_spec_t self, std::string const & residue_name) -> std::string

        Parameters
        ----------
        residue_name: std::string const &

        """
        return _coot.atom_spec_t_label(self, *args)

    def simple_label(self, *args):
        r"""
        simple_label(atom_spec_t self, std::string const & residue_name="") -> std::string

        Parameters
        ----------
        residue_name: std::string const &

        """
        return _coot.atom_spec_t_simple_label(self, *args)

    def is_same(self, matcher):
        r"""
        is_same(atom_spec_t self, atom_spec_t matcher) -> bool

        Parameters
        ----------
        matcher: coot::atom_spec_t const &

        """
        return _coot.atom_spec_t_is_same(self, matcher)

    def get_atom(self, mol):
        r"""
        get_atom(atom_spec_t self, mmdb::Manager * mol) -> mmdb::Atom *

        Parameters
        ----------
        mol: mmdb::Manager *

        """
        return _coot.atom_spec_t_get_atom(self, mol)
    __swig_destroy__ = _coot.delete_atom_spec_t

# Register atom_spec_t in _coot:
_coot.atom_spec_t_swigregister(atom_spec_t)

def compare_atom_specs_user_float(a1, a2):
    r"""
    compare_atom_specs_user_float(atom_spec_t a1, atom_spec_t a2) -> bool

    Parameters
    ----------
    a1: coot::atom_spec_t const &
    a2: coot::atom_spec_t const &

    """
    return _coot.compare_atom_specs_user_float(a1, a2)

def compare_atom_specs_user_float_in_pair(a, b):
    r"""
    compare_atom_specs_user_float_in_pair(std::pair< coot::atom_spec_t,std::string > const & a, std::pair< coot::atom_spec_t,std::string > const & b) -> bool

    Parameters
    ----------
    a: std::pair< coot::atom_spec_t,std::string > const &
    b: std::pair< coot::atom_spec_t,std::string > const &

    """
    return _coot.compare_atom_specs_user_float_in_pair(a, b)

def link_atoms(*args):
    r"""
    link_atoms(mmdb::Link * link, mmdb::Model * model_p=None) -> std::pair< coot::atom_spec_t,coot::atom_spec_t >

    Parameters
    ----------
    link: mmdb::Link *
    model_p: mmdb::Model *

    link_atoms(mmdb::LinkR * link, mmdb::Model * model_p=None) -> std::pair< coot::atom_spec_t,coot::atom_spec_t >

    Parameters
    ----------
    link: mmdb::LinkR *
    model_p: mmdb::Model *

    """
    return _coot.link_atoms(*args)
class residue_spec_t(object):
    r"""Proxy of C++ coot::residue_spec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    model_number = property(_coot.residue_spec_t_model_number_get, _coot.residue_spec_t_model_number_set, doc=r"""model_number : int""")
    chain_id = property(_coot.residue_spec_t_chain_id_get, _coot.residue_spec_t_chain_id_set, doc=r"""chain_id : std::string""")
    res_no = property(_coot.residue_spec_t_res_no_get, _coot.residue_spec_t_res_no_set, doc=r"""res_no : int""")
    ins_code = property(_coot.residue_spec_t_ins_code_get, _coot.residue_spec_t_ins_code_set, doc=r"""ins_code : std::string""")
    int_user_data = property(_coot.residue_spec_t_int_user_data_get, _coot.residue_spec_t_int_user_data_set, doc=r"""int_user_data : int""")
    float_user_data = property(_coot.residue_spec_t_float_user_data_get, _coot.residue_spec_t_float_user_data_set, doc=r"""float_user_data : float""")
    string_user_data = property(_coot.residue_spec_t_string_user_data_get, _coot.residue_spec_t_string_user_data_set, doc=r"""string_user_data : std::string""")

    def __init__(self, *args):
        r"""
        __init__(residue_spec_t self, int r) -> residue_spec_t

        Parameters
        ----------
        r: int

        __init__(residue_spec_t self, std::string const & chain_in, int r) -> residue_spec_t

        Parameters
        ----------
        chain_in: std::string const &
        r: int

        __init__(residue_spec_t self, int model_number_in, std::string const & chain_in, int r, std::string const & ins_code_in) -> residue_spec_t

        Parameters
        ----------
        model_number_in: int
        chain_in: std::string const &
        r: int
        ins_code_in: std::string const &

        __init__(residue_spec_t self, std::string const & chain_in, int r, std::string const & ins_code_in) -> residue_spec_t

        Parameters
        ----------
        chain_in: std::string const &
        r: int
        ins_code_in: std::string const &

        __init__(residue_spec_t self, mmdb::Residue * res) -> residue_spec_t

        Parameters
        ----------
        res: mmdb::Residue *

        __init__(residue_spec_t self, atom_spec_t atom_spec) -> residue_spec_t

        Parameters
        ----------
        atom_spec: coot::atom_spec_t const &

        __init__(residue_spec_t self) -> residue_spec_t
        """
        _coot.residue_spec_t_swiginit(self, _coot.new_residue_spec_t(*args))

    def unset_p(self):
        r"""unset_p(residue_spec_t self) -> bool"""
        return _coot.residue_spec_t_unset_p(self)

    def empty(self):
        r"""empty(residue_spec_t self) -> bool"""
        return _coot.residue_spec_t_empty(self)

    def next(self):
        r"""next(residue_spec_t self) -> residue_spec_t"""
        return _coot.residue_spec_t_next(self)

    def previous(self):
        r"""previous(residue_spec_t self) -> residue_spec_t"""
        return _coot.residue_spec_t_previous(self)

    def format(self):
        r"""format(residue_spec_t self) -> std::string"""
        return _coot.residue_spec_t_format(self)

    def label(self, *args):
        r"""
        label(residue_spec_t self) -> std::string
        label(residue_spec_t self, std::string const & residue_name) -> std::string

        Parameters
        ----------
        residue_name: std::string const &

        """
        return _coot.residue_spec_t_label(self, *args)

    def get_residue(self, mol):
        r"""
        get_residue(residue_spec_t self, mmdb::Manager * mol) -> mmdb::Residue *

        Parameters
        ----------
        mol: mmdb::Manager *

        """
        return _coot.residue_spec_t_get_residue(self, mol)

    def select_atoms(self, mol, selhnd, selection_key):
        r"""
        select_atoms(residue_spec_t self, mmdb::Manager * mol, int selhnd, mmdb::SELECTION_KEY selection_key) -> int

        Parameters
        ----------
        mol: mmdb::Manager *
        selhnd: int
        selection_key: mmdb::SELECTION_KEY

        """
        return _coot.residue_spec_t_select_atoms(self, mol, selhnd, selection_key)
    __swig_destroy__ = _coot.delete_residue_spec_t

# Register residue_spec_t in _coot:
_coot.residue_spec_t_swigregister(residue_spec_t)
class probe_atom_spec_t(atom_spec_t):
    r"""Proxy of C++ coot::probe_atom_spec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(probe_atom_spec_t self, std::string const & s) -> probe_atom_spec_t

        Parameters
        ----------
        s: std::string const &

        __init__(probe_atom_spec_t self) -> probe_atom_spec_t
        """
        _coot.probe_atom_spec_t_swiginit(self, _coot.new_probe_atom_spec_t(*args))
    __swig_destroy__ = _coot.delete_probe_atom_spec_t

# Register probe_atom_spec_t in _coot:
_coot.probe_atom_spec_t_swigregister(probe_atom_spec_t)
class one_way_probe_contact_t(object):
    r"""Proxy of C++ coot::one_way_probe_contact_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    from_atom = property(_coot.one_way_probe_contact_t_from_atom_get, _coot.one_way_probe_contact_t_from_atom_set, doc=r"""from_atom : coot::probe_atom_spec_t""")
    to_atoms = property(_coot.one_way_probe_contact_t_to_atoms_get, _coot.one_way_probe_contact_t_to_atoms_set, doc=r"""to_atoms : std::vector<(coot::probe_atom_spec_t,std::allocator<(coot::probe_atom_spec_t)>)>""")

    def __init__(self, spec):
        r"""
        __init__(one_way_probe_contact_t self, probe_atom_spec_t spec) -> one_way_probe_contact_t

        Parameters
        ----------
        spec: coot::probe_atom_spec_t const &

        """
        _coot.one_way_probe_contact_t_swiginit(self, _coot.new_one_way_probe_contact_t(spec))

    def size(self):
        r"""size(one_way_probe_contact_t self) -> unsigned int"""
        return _coot.one_way_probe_contact_t_size(self)

    def add(self, spec):
        r"""
        add(one_way_probe_contact_t self, probe_atom_spec_t spec)

        Parameters
        ----------
        spec: coot::probe_atom_spec_t const &

        """
        return _coot.one_way_probe_contact_t_add(self, spec)
    __swig_destroy__ = _coot.delete_one_way_probe_contact_t

# Register one_way_probe_contact_t in _coot:
_coot.one_way_probe_contact_t_swigregister(one_way_probe_contact_t)
class one_way_probe_contact_container_t(object):
    r"""Proxy of C++ coot::one_way_probe_contact_container_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    contacts = property(_coot.one_way_probe_contact_container_t_contacts_get, _coot.one_way_probe_contact_container_t_contacts_set, doc=r"""contacts : std::vector<(coot::one_way_probe_contact_t,std::allocator<(coot::one_way_probe_contact_t)>)>""")

    def add(self, from_atom, to_atom):
        r"""
        add(one_way_probe_contact_container_t self, probe_atom_spec_t from_atom, probe_atom_spec_t to_atom)

        Parameters
        ----------
        from_atom: coot::probe_atom_spec_t const &
        to_atom: coot::probe_atom_spec_t const &

        """
        return _coot.one_way_probe_contact_container_t_add(self, from_atom, to_atom)

    def size(self):
        r"""size(one_way_probe_contact_container_t self) -> unsigned int"""
        return _coot.one_way_probe_contact_container_t_size(self)

    def __init__(self):
        r"""__init__(one_way_probe_contact_container_t self) -> one_way_probe_contact_container_t"""
        _coot.one_way_probe_contact_container_t_swiginit(self, _coot.new_one_way_probe_contact_container_t())
    __swig_destroy__ = _coot.delete_one_way_probe_contact_container_t

# Register one_way_probe_contact_container_t in _coot:
_coot.one_way_probe_contact_container_t_swigregister(one_way_probe_contact_container_t)
class probe_clash_score_t(object):
    r"""Proxy of C++ coot::probe_clash_score_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filled = property(_coot.probe_clash_score_t_filled_get, _coot.probe_clash_score_t_filled_set, doc=r"""filled : bool""")
    n_bad_overlaps = property(_coot.probe_clash_score_t_n_bad_overlaps_get, _coot.probe_clash_score_t_n_bad_overlaps_set, doc=r"""n_bad_overlaps : int""")
    n_hydrogen_bonds = property(_coot.probe_clash_score_t_n_hydrogen_bonds_get, _coot.probe_clash_score_t_n_hydrogen_bonds_set, doc=r"""n_hydrogen_bonds : int""")
    n_small_overlaps = property(_coot.probe_clash_score_t_n_small_overlaps_get, _coot.probe_clash_score_t_n_small_overlaps_set, doc=r"""n_small_overlaps : int""")
    n_close_contacts = property(_coot.probe_clash_score_t_n_close_contacts_get, _coot.probe_clash_score_t_n_close_contacts_set, doc=r"""n_close_contacts : int""")
    n_wide_contacts = property(_coot.probe_clash_score_t_n_wide_contacts_get, _coot.probe_clash_score_t_n_wide_contacts_set, doc=r"""n_wide_contacts : int""")

    def __init__(self, *args):
        r"""
        __init__(probe_clash_score_t self) -> probe_clash_score_t
        __init__(probe_clash_score_t self, int n_bad_overlaps_in, int n_hydrogen_bonds_in, int n_small_overlaps_in, int n_close_contacts_in, int n_wide_contacts_in) -> probe_clash_score_t

        Parameters
        ----------
        n_bad_overlaps_in: int
        n_hydrogen_bonds_in: int
        n_small_overlaps_in: int
        n_close_contacts_in: int
        n_wide_contacts_in: int

        __init__(probe_clash_score_t self, std::string const & dots_file_name) -> probe_clash_score_t

        Parameters
        ----------
        dots_file_name: std::string const &

        """
        _coot.probe_clash_score_t_swiginit(self, _coot.new_probe_clash_score_t(*args))
    __swig_destroy__ = _coot.delete_probe_clash_score_t

# Register probe_clash_score_t in _coot:
_coot.probe_clash_score_t_swigregister(probe_clash_score_t)
class spec_eraser(object):
    r"""Proxy of C++ coot::spec_eraser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ref_specs = property(_coot.spec_eraser_ref_specs_get, _coot.spec_eraser_ref_specs_set, doc=r"""ref_specs : std::map<(std::pair<(coot::probe_atom_spec_t,coot::probe_atom_spec_t)>,bool)>""")

    def __init__(self, ref_specs_in):
        r"""
        __init__(spec_eraser self, std::map< std::pair< coot::probe_atom_spec_t,coot::probe_atom_spec_t >,bool > const & ref_specs_in) -> spec_eraser

        Parameters
        ----------
        ref_specs_in: std::map< std::pair< coot::probe_atom_spec_t,coot::probe_atom_spec_t >,bool > const &

        """
        _coot.spec_eraser_swiginit(self, _coot.new_spec_eraser(ref_specs_in))
    __swig_destroy__ = _coot.delete_spec_eraser

# Register spec_eraser in _coot:
_coot.spec_eraser_swigregister(spec_eraser)

def probe_clash_score_py(dots_file_name):
    r"""
    probe_clash_score_py(std::string const & dots_file_name) -> PyObject *

    Parameters
    ----------
    dots_file_name: std::string const &

    """
    return _coot.probe_clash_score_py(dots_file_name)

def probe_clash_score_as_py(p):
    r"""
    probe_clash_score_as_py(probe_clash_score_t p) -> PyObject *

    Parameters
    ----------
    p: coot::probe_clash_score_t const &

    """
    return _coot.probe_clash_score_as_py(p)

def probe_clash_score_from_py(p):
    r"""
    probe_clash_score_from_py(PyObject * p) -> probe_clash_score_t

    Parameters
    ----------
    p: PyObject *

    """
    return _coot.probe_clash_score_from_py(p)

def coot_version():
    r"""coot_version() -> std::string"""
    return _coot.coot_version()

def coot_version_extra_info():
    r"""coot_version_extra_info() -> std::string"""
    return _coot.coot_version_extra_info()

def get_monomer(comp_id):
    r"""
    get_monomer(std::string const & comp_id) -> int

    Parameters
    ----------
    comp_id: std::string const &

    """
    return _coot.get_monomer(comp_id)

def get_monomer_for_molecule(comp_id, imol):
    r"""
    get_monomer_for_molecule(std::string const & comp_id, int imol) -> int

    Parameters
    ----------
    comp_id: std::string const &
    imol: int

    """
    return _coot.get_monomer_for_molecule(comp_id, imol)

def get_monomer_from_dictionary(comp_id, idealised_flag):
    r"""
    get_monomer_from_dictionary(std::string const & comp_id, int idealised_flag) -> int

    Parameters
    ----------
    comp_id: std::string const &
    idealised_flag: int

    """
    return _coot.get_monomer_from_dictionary(comp_id, idealised_flag)

def register_extension(name, version):
    r"""
    register_extension(std::string const & name, std::string const & version)

    Parameters
    ----------
    name: std::string const &
    version: std::string const &

    """
    return _coot.register_extension(name, version)

def version_for_extension(name):
    r"""
    version_for_extension(std::string const & name) -> std::string

    Parameters
    ----------
    name: std::string const &

    """
    return _coot.version_for_extension(name)

def remove_file_curlew_menu_item_maybe():
    r"""remove_file_curlew_menu_item_maybe()"""
    return _coot.remove_file_curlew_menu_item_maybe()

def c_beta_deviations_py(imol):
    r"""
    c_beta_deviations_py(int imol) -> PyObject *

    Parameters
    ----------
    imol: int

    """
    return _coot.c_beta_deviations_py(imol)

def clear_generic_objects_dialog_pointer():
    r"""clear_generic_objects_dialog_pointer()"""
    return _coot.clear_generic_objects_dialog_pointer()

def set_display_all_generic_objects(state):
    r"""
    set_display_all_generic_objects(int state)

    Parameters
    ----------
    state: int

    """
    return _coot.set_display_all_generic_objects(state)

def generic_objects_gui_wrapper():
    r"""generic_objects_gui_wrapper()"""
    return _coot.generic_objects_gui_wrapper()

def close_all_generic_objects():
    r"""close_all_generic_objects()"""
    return _coot.close_all_generic_objects()

def chemical_feature_clusters_py(environment_residues_py, solvated_ligand_info_py, radius_1, radius_2):
    r"""
    chemical_feature_clusters_py(PyObject * environment_residues_py, PyObject * solvated_ligand_info_py, double radius_1, double radius_2) -> PyObject *

    Parameters
    ----------
    environment_residues_py: PyObject *
    solvated_ligand_info_py: PyObject *
    radius_1: double
    radius_2: double

    """
    return _coot.chemical_feature_clusters_py(environment_residues_py, solvated_ligand_info_py, radius_1, radius_2)

def chemical_feature_clusters_accept_info_py(site_number, env_residue_py, mol_ligand_specs_py, cluster_info_py):
    r"""
    chemical_feature_clusters_accept_info_py(unsigned int site_number, PyObject * env_residue_py, PyObject * mol_ligand_specs_py, PyObject * cluster_info_py)

    Parameters
    ----------
    site_number: unsigned int
    env_residue_py: PyObject *
    mol_ligand_specs_py: PyObject *
    cluster_info_py: PyObject *

    """
    return _coot.chemical_feature_clusters_accept_info_py(site_number, env_residue_py, mol_ligand_specs_py, cluster_info_py)

def chemical_feature_clusters_accept_site_clusters_info_py(site_info_py):
    r"""
    chemical_feature_clusters_accept_site_clusters_info_py(PyObject * site_info_py) -> PyObject *

    Parameters
    ----------
    site_info_py: PyObject *

    """
    return _coot.chemical_feature_clusters_accept_site_clusters_info_py(site_info_py)
class water_cluster_info_from_python(object):
    r"""Proxy of C++ cfc::water_cluster_info_from_python class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(water_cluster_info_from_python self, clipper::Coord_orth const & pos_in, double w_in, double r_in) -> water_cluster_info_from_python

        Parameters
        ----------
        pos_in: clipper::Coord_orth const &
        w_in: double
        r_in: double

        __init__(water_cluster_info_from_python self) -> water_cluster_info_from_python
        """
        _coot.water_cluster_info_from_python_swiginit(self, _coot.new_water_cluster_info_from_python(*args))
    pos = property(_coot.water_cluster_info_from_python_pos_get, _coot.water_cluster_info_from_python_pos_set, doc=r"""pos : clipper::Coord_orth""")
    weight = property(_coot.water_cluster_info_from_python_weight_get, _coot.water_cluster_info_from_python_weight_set, doc=r"""weight : double""")
    radius = property(_coot.water_cluster_info_from_python_radius_get, _coot.water_cluster_info_from_python_radius_set, doc=r"""radius : double""")
    __swig_destroy__ = _coot.delete_water_cluster_info_from_python

# Register water_cluster_info_from_python in _coot:
_coot.water_cluster_info_from_python_swigregister(water_cluster_info_from_python)
class clustered_feature_info_from_python(object):
    r"""Proxy of C++ cfc::clustered_feature_info_from_python class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(clustered_feature_info_from_python self, int imol_in, residue_spec_t spec_in, unsigned int cluster_number_in) -> clustered_feature_info_from_python

        Parameters
        ----------
        imol_in: int
        spec_in: coot::residue_spec_t const &
        cluster_number_in: unsigned int

        __init__(clustered_feature_info_from_python self) -> clustered_feature_info_from_python
        """
        _coot.clustered_feature_info_from_python_swiginit(self, _coot.new_clustered_feature_info_from_python(*args))
    imol = property(_coot.clustered_feature_info_from_python_imol_get, _coot.clustered_feature_info_from_python_imol_set, doc=r"""imol : int""")
    cluster_number = property(_coot.clustered_feature_info_from_python_cluster_number_get, _coot.clustered_feature_info_from_python_cluster_number_set, doc=r"""cluster_number : unsigned int""")
    residue_spec = property(_coot.clustered_feature_info_from_python_residue_spec_get, _coot.clustered_feature_info_from_python_residue_spec_set, doc=r"""residue_spec : coot::residue_spec_t""")
    __swig_destroy__ = _coot.delete_clustered_feature_info_from_python

# Register clustered_feature_info_from_python in _coot:
_coot.clustered_feature_info_from_python_swigregister(clustered_feature_info_from_python)
class extracted_cluster_info_from_python(object):
    r"""Proxy of C++ cfc::extracted_cluster_info_from_python class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wc = property(_coot.extracted_cluster_info_from_python_wc_get, _coot.extracted_cluster_info_from_python_wc_set, doc=r"""wc : std::vector<(cfc::water_cluster_info_from_python,std::allocator<(cfc::water_cluster_info_from_python)>)>""")
    cw = property(_coot.extracted_cluster_info_from_python_cw_get, _coot.extracted_cluster_info_from_python_cw_set, doc=r"""cw : std::vector<(cfc::clustered_feature_info_from_python,std::allocator<(cfc::clustered_feature_info_from_python)>)>""")

    def __init__(self, cluster_info_py):
        r"""
        __init__(extracted_cluster_info_from_python self, PyObject * cluster_info_py) -> extracted_cluster_info_from_python

        Parameters
        ----------
        cluster_info_py: PyObject *

        """
        _coot.extracted_cluster_info_from_python_swiginit(self, _coot.new_extracted_cluster_info_from_python(cluster_info_py))

    def n_water_structures(self):
        r"""n_water_structures(extracted_cluster_info_from_python self) -> unsigned int"""
        return _coot.extracted_cluster_info_from_python_n_water_structures(self)

    def n_pharmacophore_structures(self):
        r"""n_pharmacophore_structures(extracted_cluster_info_from_python self) -> unsigned int"""
        return _coot.extracted_cluster_info_from_python_n_pharmacophore_structures(self)

    def water_structures_vec(self):
        r"""water_structures_vec(extracted_cluster_info_from_python self) -> IntVector"""
        return _coot.extracted_cluster_info_from_python_water_structures_vec(self)

    def pharmacophore_structures_vec(self):
        r"""pharmacophore_structures_vec(extracted_cluster_info_from_python self) -> IntVector"""
        return _coot.extracted_cluster_info_from_python_pharmacophore_structures_vec(self)

    def pharmacophore_structures_and_specs_vec(self):
        r"""pharmacophore_structures_and_specs_vec(extracted_cluster_info_from_python self) -> std::vector< std::pair< int,coot::residue_spec_t >,std::allocator< std::pair< int,coot::residue_spec_t > > >"""
        return _coot.extracted_cluster_info_from_python_pharmacophore_structures_and_specs_vec(self)

    def pharmacophores_centre(self):
        r"""pharmacophores_centre(extracted_cluster_info_from_python self) -> std::pair< bool,clipper::Coord_orth >"""
        return _coot.extracted_cluster_info_from_python_pharmacophores_centre(self)

    def water_cluster_imol_residue_spec_vec(self):
        r"""water_cluster_imol_residue_spec_vec(extracted_cluster_info_from_python self) -> std::vector< std::pair< int,coot::residue_spec_t >,std::allocator< std::pair< int,coot::residue_spec_t > > >"""
        return _coot.extracted_cluster_info_from_python_water_cluster_imol_residue_spec_vec(self)

    def pharmacophore_cluster_imol_residue_spec_vec(self, type, cluster_idx):
        r"""
        pharmacophore_cluster_imol_residue_spec_vec(extracted_cluster_info_from_python self, std::string const & type, unsigned int cluster_idx) -> std::vector< std::pair< int,coot::residue_spec_t >,std::allocator< std::pair< int,coot::residue_spec_t > > >

        Parameters
        ----------
        type: std::string const &
        cluster_idx: unsigned int

        """
        return _coot.extracted_cluster_info_from_python_pharmacophore_cluster_imol_residue_spec_vec(self, type, cluster_idx)

    def water_cluster_idx_max(self):
        r"""water_cluster_idx_max(extracted_cluster_info_from_python self) -> unsigned int"""
        return _coot.extracted_cluster_info_from_python_water_cluster_idx_max(self)
    pharmacophore = property(_coot.extracted_cluster_info_from_python_pharmacophore_get, _coot.extracted_cluster_info_from_python_pharmacophore_set, doc=r"""pharmacophore : std::map<(std::string,std::vector<(cfc::clustered_feature_info_from_python,std::allocator<(cfc::clustered_feature_info_from_python)>)>)>""")
    pharmacophore_model_cluster_means = property(_coot.extracted_cluster_info_from_python_pharmacophore_model_cluster_means_get, _coot.extracted_cluster_info_from_python_pharmacophore_model_cluster_means_set, doc=r"""pharmacophore_model_cluster_means : std::map<(std::string,std::vector<(clipper::Coord_orth,std::allocator<(clipper::Coord_orth)>)>)>""")

    @staticmethod
    def cluster_vector_sorter(v1, v2):
        r"""
        cluster_vector_sorter(std::pair< std::vector< int,std::allocator< int > >,cfc::water_cluster_info_from_python > const & v1, std::pair< std::vector< int,std::allocator< int > >,cfc::water_cluster_info_from_python > const & v2) -> bool

        Parameters
        ----------
        v1: std::pair< std::vector< int,std::allocator< int > >,cfc::water_cluster_info_from_python > const &
        v2: std::pair< std::vector< int,std::allocator< int > >,cfc::water_cluster_info_from_python > const &

        """
        return _coot.extracted_cluster_info_from_python_cluster_vector_sorter(v1, v2)

    def show_water_balls(self, site_number):
        r"""
        show_water_balls(extracted_cluster_info_from_python self, unsigned int site_number) -> int

        Parameters
        ----------
        site_number: unsigned int

        """
        return _coot.extracted_cluster_info_from_python_show_water_balls(self, site_number)
    __swig_destroy__ = _coot.delete_extracted_cluster_info_from_python

# Register extracted_cluster_info_from_python in _coot:
_coot.extracted_cluster_info_from_python_swigregister(extracted_cluster_info_from_python)

def chemical_feature_clusters_setup_dialog():
    r"""chemical_feature_clusters_setup_dialog()"""
    return _coot.chemical_feature_clusters_setup_dialog()

def regularize_residue():
    r"""regularize_residue()"""
    return _coot.regularize_residue()

def regularize_tandem_3():
    r"""regularize_tandem_3()"""
    return _coot.regularize_tandem_3()

def regularize_sphere():
    r"""regularize_sphere()"""
    return _coot.regularize_sphere()

def regularize_fragment_active_atom():
    r"""regularize_fragment_active_atom()"""
    return _coot.regularize_fragment_active_atom()

def regularize_chain():
    r"""regularize_chain()"""
    return _coot.regularize_chain()

def rsr_refine_residue():
    r"""rsr_refine_residue()"""
    return _coot.rsr_refine_residue()

def rsr_refine_chain():
    r"""rsr_refine_chain()"""
    return _coot.rsr_refine_chain()

def rsr_refine_all_atoms():
    r"""rsr_refine_all_atoms()"""
    return _coot.rsr_refine_all_atoms()

def rsr_refine_tandem_5():
    r"""rsr_refine_tandem_5()"""
    return _coot.rsr_refine_tandem_5()

def rsr_refine_tandem_3():
    r"""rsr_refine_tandem_3()"""
    return _coot.rsr_refine_tandem_3()

def rsr_sphere_refine_plus():
    r"""rsr_sphere_refine_plus()"""
    return _coot.rsr_sphere_refine_plus()

def rsr_sphere_refine():
    r"""rsr_sphere_refine()"""
    return _coot.rsr_sphere_refine()

def rsr_refine_fragment_active_residue():
    r"""rsr_refine_fragment_active_residue()"""
    return _coot.rsr_refine_fragment_active_residue()

def set_user_defined_atom_colour_by_selection_py(imol, residue_specs_colour_index_tuple_list_py):
    r"""
    set_user_defined_atom_colour_by_selection_py(int imol, PyObject * residue_specs_colour_index_tuple_list_py)

    Parameters
    ----------
    imol: int
    residue_specs_colour_index_tuple_list_py: PyObject *

    """
    return _coot.set_user_defined_atom_colour_by_selection_py(imol, residue_specs_colour_index_tuple_list_py)

def set_user_defined_atom_colour_py(imol, atom_specs_colour_index_tuple_list_py):
    r"""
    set_user_defined_atom_colour_py(int imol, PyObject * atom_specs_colour_index_tuple_list_py)

    Parameters
    ----------
    imol: int
    atom_specs_colour_index_tuple_list_py: PyObject *

    """
    return _coot.set_user_defined_atom_colour_py(imol, atom_specs_colour_index_tuple_list_py)

def set_user_defined_colours_py(colour_list_py):
    r"""
    set_user_defined_colours_py(PyObject * colour_list_py)

    Parameters
    ----------
    colour_list_py: PyObject *

    """
    return _coot.set_user_defined_colours_py(colour_list_py)

def clear_user_defined_atom_colours(imol):
    r"""
    clear_user_defined_atom_colours(int imol)

    Parameters
    ----------
    imol: int

    """
    return _coot.clear_user_defined_atom_colours(imol)
class phenix_geo_bond(object):
    r"""Proxy of C++ coot::phenix_geo_bond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    atom_1 = property(_coot.phenix_geo_bond_atom_1_get, _coot.phenix_geo_bond_atom_1_set, doc=r"""atom_1 : coot::atom_spec_t""")
    atom_2 = property(_coot.phenix_geo_bond_atom_2_get, _coot.phenix_geo_bond_atom_2_set, doc=r"""atom_2 : coot::atom_spec_t""")
    ideal = property(_coot.phenix_geo_bond_ideal_get, _coot.phenix_geo_bond_ideal_set, doc=r"""ideal : double""")
    model = property(_coot.phenix_geo_bond_model_get, _coot.phenix_geo_bond_model_set, doc=r"""model : double""")
    delta = property(_coot.phenix_geo_bond_delta_get, _coot.phenix_geo_bond_delta_set, doc=r"""delta : double""")
    sigma = property(_coot.phenix_geo_bond_sigma_get, _coot.phenix_geo_bond_sigma_set, doc=r"""sigma : double""")
    weight = property(_coot.phenix_geo_bond_weight_get, _coot.phenix_geo_bond_weight_set, doc=r"""weight : double""")
    residual = property(_coot.phenix_geo_bond_residual_get, _coot.phenix_geo_bond_residual_set, doc=r"""residual : double""")
    geom_set_flag = property(_coot.phenix_geo_bond_geom_set_flag_get, _coot.phenix_geo_bond_geom_set_flag_set, doc=r"""geom_set_flag : bool""")

    def __init__(self, a1, a2):
        r"""
        __init__(phenix_geo_bond self, atom_spec_t a1, atom_spec_t a2) -> phenix_geo_bond

        Parameters
        ----------
        a1: coot::atom_spec_t const &
        a2: coot::atom_spec_t const &

        """
        _coot.phenix_geo_bond_swiginit(self, _coot.new_phenix_geo_bond(a1, a2))

    def set_geom(self, ideal_in, model_in, delta_in, sigma_in, weight_in, residual_in):
        r"""
        set_geom(phenix_geo_bond self, double ideal_in, double model_in, double delta_in, double sigma_in, double weight_in, double residual_in)

        Parameters
        ----------
        ideal_in: double
        model_in: double
        delta_in: double
        sigma_in: double
        weight_in: double
        residual_in: double

        """
        return _coot.phenix_geo_bond_set_geom(self, ideal_in, model_in, delta_in, sigma_in, weight_in, residual_in)
    __swig_destroy__ = _coot.delete_phenix_geo_bond

# Register phenix_geo_bond in _coot:
_coot.phenix_geo_bond_swigregister(phenix_geo_bond)
class phenix_geo_bonds(object):
    r"""Proxy of C++ coot::phenix_geo_bonds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bonds = property(_coot.phenix_geo_bonds_bonds_get, _coot.phenix_geo_bonds_bonds_set, doc=r"""bonds : std::vector<(coot::phenix_geo_bond,std::allocator<(coot::phenix_geo_bond)>)>""")

    def __init__(self, *args):
        r"""
        __init__(phenix_geo_bonds self) -> phenix_geo_bonds
        __init__(phenix_geo_bonds self, std::string const & file_name) -> phenix_geo_bonds

        Parameters
        ----------
        file_name: std::string const &

        """
        _coot.phenix_geo_bonds_swiginit(self, _coot.new_phenix_geo_bonds(*args))

    def size(self):
        r"""size(phenix_geo_bonds self) -> unsigned int"""
        return _coot.phenix_geo_bonds_size(self)

    def add_bond(self, b):
        r"""
        add_bond(phenix_geo_bonds self, phenix_geo_bond b)

        Parameters
        ----------
        b: coot::phenix_geo_bond const &

        """
        return _coot.phenix_geo_bonds_add_bond(self, b)
    __swig_destroy__ = _coot.delete_phenix_geo_bonds

# Register phenix_geo_bonds in _coot:
_coot.phenix_geo_bonds_swigregister(phenix_geo_bonds)

def coot_get_url(url, file_name):
    r"""
    coot_get_url(std::string const & url, std::string const & file_name) -> int

    Parameters
    ----------
    url: std::string const &
    file_name: std::string const &

    """
    return _coot.coot_get_url(url, file_name)

def coot_get_url_as_string_py(url):
    r"""
    coot_get_url_as_string_py(char const * url) -> PyObject *

    Parameters
    ----------
    url: char const *

    """
    return _coot.coot_get_url_as_string_py(url)

def curl_progress_info_py(file_name):
    r"""
    curl_progress_info_py(char const * file_name) -> PyObject *

    Parameters
    ----------
    file_name: char const *

    """
    return _coot.curl_progress_info_py(file_name)

def write_coot_curl_data(buffer, size, nmemb, userp):
    r"""
    write_coot_curl_data(void * buffer, size_t size, size_t nmemb, void * userp) -> size_t

    Parameters
    ----------
    buffer: void *
    size: size_t
    nmemb: size_t
    userp: void *

    """
    return _coot.write_coot_curl_data(buffer, size, nmemb, userp)

def write_coot_curl_data_to_file(buffer, size, nmemb, userp):
    r"""
    write_coot_curl_data_to_file(void * buffer, size_t size, size_t nmemb, void * userp) -> size_t

    Parameters
    ----------
    buffer: void *
    size: size_t
    nmemb: size_t
    userp: void *

    """
    return _coot.write_coot_curl_data_to_file(buffer, size, nmemb, userp)

def wrapped_curl_easy_perform(data):
    r"""
    wrapped_curl_easy_perform(void * data) -> void *

    Parameters
    ----------
    data: void *

    """
    return _coot.wrapped_curl_easy_perform(data)

def associate_pir_alignment(imol, chain_id, pir_alignment):
    r"""
    associate_pir_alignment(int imol, std::string chain_id, std::string pir_alignment)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    pir_alignment: std::string

    """
    return _coot.associate_pir_alignment(imol, chain_id, pir_alignment)

def associate_pir_alignment_from_file(imol, chain_id, pir_alignment_file_name):
    r"""
    associate_pir_alignment_from_file(int imol, std::string chain_id, std::string pir_alignment_file_name)

    Parameters
    ----------
    imol: int
    chain_id: std::string
    pir_alignment_file_name: std::string

    """
    return _coot.associate_pir_alignment_from_file(imol, chain_id, pir_alignment_file_name)

def apply_pir_alignment(imol, chain_id):
    r"""
    apply_pir_alignment(int imol, std::string chain_id)

    Parameters
    ----------
    imol: int
    chain_id: std::string

    """
    return _coot.apply_pir_alignment(imol, chain_id)

